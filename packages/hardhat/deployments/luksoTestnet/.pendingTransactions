{
  "0x7ee9cb7c4b7abb95a3ea3b7504e20acc46db26dfb76a208db10bc2e75ba577b3": {
    "name": "LSP8LoogiesFixed",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "LSP8LoogiesFixed",
      "sourceName": "contracts/LSP8LoogiesFixed.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "contractOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "ERC725Y_DataKeysValuesEmptyArray",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ERC725Y_DataKeysValuesLengthMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ERC725Y_MsgValueDisallowed",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "storedData",
              "type": "bytes"
            }
          ],
          "name": "InvalidExtensionAddress",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "InvalidFunctionSelector",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP4TokenNameNotEditable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP4TokenSymbolNotEditable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP4TokenTypeNotEditable",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "callIndex",
              "type": "uint256"
            }
          ],
          "name": "LSP8BatchCallFailed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8CannotSendToAddressZero",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8CannotUseAddressZeroAsOperator",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8InvalidTransferBatch",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "LSP8NonExistentTokenId",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "LSP8NonExistingOperator",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "name": "LSP8NotTokenOperator",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "name": "LSP8NotTokenOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenReceiver",
              "type": "address"
            }
          ],
          "name": "LSP8NotifyTokenReceiverContractMissingLSP1Interface",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenReceiver",
              "type": "address"
            }
          ],
          "name": "LSP8NotifyTokenReceiverIsEOA",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "LSP8OperatorAlreadyAuthorized",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "LSP8RevokeOperatorNotAuthorized",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8TokenContractCannotHoldValue",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "LSP8TokenIdAlreadyMinted",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8TokenIdFormatNotEditable",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8TokenIdsDataEmptyArray",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8TokenIdsDataLengthMismatch",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "LSP8TokenOwnerCannotBeOperator",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "oldOwner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "LSP8TokenOwnerChanged",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "functionSelector",
              "type": "bytes4"
            }
          ],
          "name": "NoExtensionFoundForFunctionSelector",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "OwnableCannotSetZeroAddressAsOwner",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "name": "DataChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "operatorNotificationData",
              "type": "bytes"
            }
          ],
          "name": "OperatorAuthorizationChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "notified",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "operatorNotificationData",
              "type": "bytes"
            }
          ],
          "name": "OperatorRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "name": "TokenIdDataChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "force",
              "type": "bool"
            },
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "stateMutability": "payable",
          "type": "fallback"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "operatorNotificationData",
              "type": "bytes"
            }
          ],
          "name": "authorizeOperator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "name": "batchCalls",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "results",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "chubbiness",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "color",
          "outputs": [
            {
              "internalType": "bytes3",
              "name": "",
              "type": "bytes3"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "curve",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            }
          ],
          "name": "getData",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            }
          ],
          "name": "getDataBatch",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "tokenIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            }
          ],
          "name": "getDataBatchForTokenIds",
          "outputs": [
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            }
          ],
          "name": "getDataForTokenId",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "getOperatorsOf",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "isOperatorFor",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "isUniversalProfile",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "limit",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "loogieType",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "loogiesMetadata",
          "outputs": [
            {
              "internalType": "contract OnChainLoogiesMetadata",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "mintItem",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "mintLoogie",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "mouthLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "price",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "recipient",
          "outputs": [
            {
              "internalType": "address payable",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "notify",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "operatorNotificationData",
              "type": "bytes"
            }
          ],
          "name": "revokeOperator",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "name": "setData",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ],
          "name": "setDataBatch",
          "outputs": [],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "tokenIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "dataKeys",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "dataValues",
              "type": "bytes[]"
            }
          ],
          "name": "setDataBatchForTokenIds",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "dataKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "dataValue",
              "type": "bytes"
            }
          ],
          "name": "setDataForTokenId",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "username",
              "type": "string"
            }
          ],
          "name": "setUPUsername",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            }
          ],
          "name": "tokenExists",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOwner",
              "type": "address"
            }
          ],
          "name": "tokenIdsOf",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            }
          ],
          "name": "tokenOwnerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "tokenId",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "force",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "transfer",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "from",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "to",
              "type": "address[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "tokenId",
              "type": "bytes32[]"
            },
            {
              "internalType": "bool[]",
              "name": "force",
              "type": "bool[]"
            },
            {
              "internalType": "bytes[]",
              "name": "data",
              "type": "bytes[]"
            }
          ],
          "name": "transferBatch",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "name": "upUsernames",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "updateCollectionMetadata",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "stateMutability": "payable",
          "type": "receive"
        }
      ],
      "bytecode": "0x6080604090808252346200113557806200807380380380916200002382856200116c565b83396020928391810103126200113557516001600160a01b03808216939190848203620011355782519162000058836200113a565b6012835271131d5adcdbd31bdbd9da595cc8119a5e195960721b8584015283519562000084876200113a565b6009875268098aa96989e8e8c92b60bb1b86880152620000a43362001205565b156200112457620000b59062001205565b620000bf62001190565b937feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c6000938185526001918284528686209888519260018060401b03998a851162001110578b54948686811c9616801562001105575b88871014620010f157601f95868111620010a9575b50878682116001146200103e579c818693928c9d9e9f6200018d9d9162001032575b50600019600383901b1c191690891b1790555b8b51807fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b29b8c9382620011d7565b0390a27fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af190818a528587528a8a20908051918d83116200101e5780548881811c9116801562001013575b8a82101462000fff579081888d94931162000fa7575b5089938d89821160011462000f4a57620002289495826200098f575b50600019600383901b1c1916908a1b1790555b8c5191829182620011d7565b0390a27f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275690818952848652898920908051918c831162000c605780548781811c9116801562000f3f575b8982101462000c41579081878c94931162000eea575b5088938c88821160011462000e9757620002c394958262000b72575b50600019600383901b1c191690891b1790555b8b5191829182620011d7565b0390a28751600285820152848152620002dc816200113a565b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb390818952848652898920908051918c831162000c605780548781811c9116801562000e8c575b8982101462000c41579081878c94931162000e37575b5088938c88821160011462000de4576200037294958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a2875187858201528481526200038a816200113a565b7ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d90818952848652898920908051918c831162000c605780548781811c9116801562000dd9575b8982101462000c41579081878c94931162000d84575b5088938c88821160011462000d31576200042094958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a267016345785d8a0000600e55875161369c808201908282108c83111762000a8457908291620049d78339039088f0801562000d2757851660018060a01b031960065416176006556200047462001190565b818852838552888820908051918b831162000a845780548681811c9116801562000d1c575b8882101462000a65579081868b94931162000cc7575b50879386811160011462000c745780620004eb94958d9162000a98575b50600019600383901b1c191690881b1790555b8a5191829182620011d7565b0390a28651610e9090818582015284815262000507816200113a565b7fa23ea79c706be4641bfd97c9afb5b71a552c5bc320930dbe09b3530ed76dee0f90818952848652898920908051918c831162000c605780548781811c9116801562000c55575b8982101462000c41579081878c94931162000bec575b5088938c88821160011462000b7e576200059d94958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a287519084820152838152620005b5816200113a565b7fd28c95357cf4c94d638a4f572d5d3df8d7e1415c8b650e747a219c559d1435c890818852838552888820908051918b831162000a845780548681811c9116801562000b67575b8882101462000a65579081868b94931162000b12575b50879386811160011462000aa457806200064c94958d9162000a985750600019600383901b1c191690881b1790558a5191829182620011d7565b0390a2865193828486015283855262000665856200113a565b7f6de85eaf5d982b4e5da00000d8c2f51c0e567ed9ec7b1f9ee90bb0b2839d168d808852838552888820958051968b881162000a845780548681811c9116801562000a79575b8882101462000a655791899183878d9796951162000a0a575b5088998781116001146200099b57908162000702939260049c89916200098f5750600019600383901b1c1916908a1b1790558c5191829182620011d7565b0390a26006541688519586809263934118fb60e01b82525afa93841562000985578690879562000916575b50604881856200077893519101208951968791650379abe3500160c51b8884015260288301526200076781518092898686019101620011b2565b81010360288101875201856200116c565b7f9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e95868152828452878120938551998a11620009025784548481811c91168015620008f7575b82821014620008e35780848c921162000899575b505080928a116001146200082f57509780928192620008129798999a9362000823575b501b916000199060031b1c19161790555b845191829182620011d7565b0390a25161372f9081620012a88239f35b860151925038620007f5565b9891601f1983169985835280832092905b8b82106200088157505082620008129798999a1062000867575b5050811b01905562000806565b85015160001960f88460031b161c1916905538806200085a565b808684958294958b0151815501940192019062000840565b86845284838520918482850160051c84019410620008d9575b0160051c019085905b828110620008cd57508b9150620007d2565b848155018590620008bb565b92508192620008b2565b634e487b7160e01b83526022600452602483fd5b90607f1690620007be565b634e487b7160e01b82526041600452602482fd5b9450503d8087863e6200092a81866200116c565b84018785820312620009815784518981116200097d57816200094e9187016200124c565b9484810151908a8211620009795762000778926048926200097092016200124c565b9591506200072d565b8880fd5b8780fd5b8680fd5b87513d88823e3d90fd5b90508301513862000209565b8187528987209a601f198216885b818110620009ee57509160049c8b92826200070297969510620009d4575b5050811b0190556200021c565b85015160001960f88460031b161c191690553880620009c7565b858301518e559c8b019c8f99508e9650918c01918c01620009a9565b9193949581935052878b2086808b0160051c8201928a8c1062000a5b575b8c94928e98979694928b920160051c01915b82811062000a4a575050620006c4565b9788558d978d95508a910162000a3a565b9250819262000a28565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620006ab565b634e487b7160e01b8a52604160045260248afd5b905083015138620004cc565b818c52888c2094889190601f1982168e5b8c82821062000af757505090826200064c9798921062000add575b5050811b019055620004df565b85015160001960f88460031b161c19169055388062000ad0565b878401518a5598909401978e97508b94928101920162000ab5565b90809293508b52878b208680860160051c8201928a871062000b5d575b9189918d969594930160051c01915b82811062000b4e57505062000612565b8d81558c955089910162000b3e565b9250819262000b2f565b90607f1690620005fc565b905083015138620002a4565b8281528a8120958a9291601f198316905b8d82821062000bd157505090826200059d9798921062000bb7575b5050811b019055620002b7565b85015160001960f88460031b161c19169055388062000baa565b878401518a5598909401978f97508c94928101920162000b8f565b90809293508c52888c208780860160051c8201928b871062000c37575b918a918e969594930160051c01915b82811062000c2857505062000564565b8e81558d95508a910162000c18565b9250819262000c09565b634e487b7160e01b8c52602260045260248cfd5b90607f16906200054e565b634e487b7160e01b8b52604160045260248bfd5b818c52888c2094889190601f1982168e5b8c82821062000cac5750509082620004eb9798921062000add575050811b019055620004df565b878401518a5598909401978e97508b94928101920162000c85565b90809293508b52878b208680860160051c8201928a871062000d12575b9189918d969594930160051c01915b82811062000d03575050620004af565b8d81558c955089910162000cf3565b9250819262000ce4565b90607f169062000499565b88513d89823e3d90fd5b8281528a8120958a9291601f198316905b8d82821062000d695750509082620004209798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000d42565b90809293508c52888c208780860160051c8201928b871062000dcf575b918a918e969594930160051c01915b82811062000dc0575050620003e7565b8e81558d95508a910162000db0565b9250819262000da1565b90607f1690620003d1565b8281528a8120958a9291601f198316905b8d82821062000e1c5750509082620003729798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000df5565b90809293508c52888c208780860160051c8201928b871062000e82575b918a918e969594930160051c01915b82811062000e7357505062000339565b8e81558d95508a910162000e63565b9250819262000e54565b90607f169062000323565b8281528a8120958a9291601f198316905b8d82821062000ecf5750509082620002c39798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000ea8565b90809293508c52888c208780860160051c8201928b871062000f35575b918a918e969594930160051c01915b82811062000f2657505062000288565b8e81558d95508a910162000f16565b9250819262000f07565b90607f169062000272565b8281528b8120958b9291601f198316908e5b82821062000f8257505090826200022897989210620009d4575050811b0190556200021c565b929597509386988684939598015181550194019201918e95939694918c938e62000f5c565b90809293508d52898d208880860160051c8201928c871062000ff5575b8e959493910160051c909101908a908f5b83821062000fe657505050620001ed565b81558e95508b91018f62000fd5565b9250819262000fc4565b634e487b7160e01b8d52602260045260248dfd5b90607f1690620001d7565b634e487b7160e01b8c52604160045260248cfd5b9050830151386200014c565b8d8b52888b2090601f1983168c5b818110620010935750926200018d9c9d9e9f928a92828a97961062001079575b5050811b0190556200015f565b85015160001960f88460031b161c1916905538806200106c565b858301518455928a0192918b01918b016200104c565b8d8b52888b208780840160051c8201928b8510620010e7575b0160051c019088905b828110620010db5750506200012a565b8c8155018890620010cb565b92508192620010c2565b634e487b7160e01b8a52602260045260248afd5b95607f169562000115565b634e487b7160e01b89526041600452602489fd5b83516306b620db60e21b8152600490fd5b600080fd5b604081019081106001600160401b038211176200115657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200115657604052565b604051906200119f826200113a565b60048252632936598960e21b6020830152565b60005b838110620011c65750506000910152565b8181015183820152602001620011b5565b60409160208252620011f98151809281602086015260208686019101620011b2565b601f01601f1916010190565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b81601f82011215620011355780516001600160401b03811162001156576040519262001283601f8301601f1916602001856200116c565b818452602082840101116200113557620012a49160208085019101620011b2565b9056fe60806040526004361015610033575b3615610026575b61001e36611d28565b602081519101f35b61002e611d74565b610015565b60003560e01c8062923f9e14610366578063017c96b81461035d57806301ffc9a71461035457806306fdde031461034b5780630e2fee841461034257806316e023b31461033957806318160ddd1461033057806319c9d79b146103275780631d26fce61461031e5780631ead90b014610315578063217b22701461030c5780632a3654a414610303578063472dfcfb146102fa578063475a590d146102f157806349a6078d146102e8578063511b6952146102df57806354f6127f146102d65780636643a686146102cd57806366d003ac146102c45780636963d438146102bb57806370a08231146102b2578063715018a6146102a95780637165485d146102a0578063791790c9146102975780637e87632c1461028e5780637f23690c1461028557806386a10ddd1461027c5780638da5cb5b1461027357806395d89b411461026a5780639790242114610261578063a035b1fe14610258578063a3b261f21461024f578063a4d66daf14610246578063be9f0e6f1461023d578063d6c1407c14610234578063d91a61d01461022b578063db8c966314610222578063dedff9c614610219578063eb93406b14610210578063f2fde38b146102075763fc056acc0361000e57610202611c4f565b61000e565b50610202611b9d565b506102026119de565b50610202611956565b5061020261187c565b506102026117aa565b50610202611763565b50610202611673565b50610202611655565b506102026115da565b506102026115bb565b506102026114f6565b50610202611498565b5061020261146e565b50610202611317565b506102026112c0565b50610202611226565b506102026110ac565b5061020261108e565b50610202611041565b50610202611006565b50610202610fa0565b50610202610f70565b50610202610f43565b50610202610f23565b50610202610ebb565b50610202610dfa565b50610202610c13565b50610202610bdc565b50610202610abd565b50610202610a76565b50610202610a2b565b50610202610961565b5061020261071d565b50610202610605565b506102026105e2565b506102026105b8565b5061020261053f565b5061020261041a565b506102026103ed565b503461039857602036600319011261039857600435600052600c602052602060ff604060002054166040519015158152f35b600080fd5b6000526008602052604060002090565b6000526009602052604060002090565b600052600a602052604060002090565b600052600b602052604060002090565b600052600d602052604060002090565b503461039857602036600319011261039857600435600052600a6020526020604060002054604051908152f35b5034610398576020366003190112610398576004356001600160e01b03198116908181036103985761046f91631d138b8360e11b81149182159182610473575b50506040519115158252509081906020820190565b0390f35b909161049b575b50811561048b575b5038808061045a565b61049591506133a8565b38610482565b90915063a918fa6b60e01b81149081156104b8575b50903861047a565b6318a6a9a560e21b8114915081156104d2575b50386104b0565b6301ffc9a760e01b149050386104cb565b60005b8381106104f65750506000910152565b81810151838201526020016104e6565b9060209161051f815180928185528580860191016104e3565b601f01601f1916010190565b90602061053c928181520190610506565b90565b50346103985760003660031901126103985760008051602061361a833981519152600052600160205260405161046f906105a48161059d817f2a367ae1ac46d529739aa27ac74856f860e70af05d3642d18ba60fd5d32a069a610b29565b0382610699565b604051918291602083526020830190610506565b5034610398576000366003190112610398576006546040516001600160a01b039091168152602090f35b50346103985760403660031901126103985761046f6105a46024356004356134ec565b5034610398576000366003190112610398576020600754604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761065657604052565b61065e610624565b604052565b602081019081106001600160401b0382111761065657604052565b606081019081106001600160401b0382111761065657604052565b601f909101601f19168101906001600160401b0382119082101761065657604052565b6020906001600160401b0381116106d9575b601f01601f19160190565b6106e1610624565b6106ce565b9291926106f2826106bc565b916107006040519384610699565b829481845281830111610398578281602093846000960137010152565b5034610398576040366003190112610398576001600160401b036004356024358281116103985736602382011215610398576107639036906024816004013591016106e6565b9161078a61077083612249565b6001600160a01b038116331490811561086b575b50613276565b6000918252602090600d82526040832091845191821161085e575b6107b9826107b38554610aef565b8561210e565b80601f83116001146107f357508394829394926107e8575b50508160011b916000199060031b1c191617905580f35b0151905038806107d1565b90601f1983169561080985600052602060002090565b9286905b8882106108465750508360019596971061082d575b505050811b01905580f35b015160001960f88460031b161c19169055388080610822565b8060018596829496860151815501950193019061080d565b610866610624565b6107a5565b61087591506132ce565b38610784565b6020906001600160401b038111610894575b60051b0190565b61089c610624565b61088d565b81601f82011215610398578035916108b88361087b565b926108c66040519485610699565b808452602092838086019260051b820101928311610398578301905b8282106108f0575050505090565b813581529083019083016108e2565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109335750505050505090565b9091929394958480610951600193603f198682030187528a51610506565b9801930193019194939290610923565b5034610398576040366003190112610398576001600160401b03600435818111610398576109939036906004016108a1565b90602435908111610398576109ac9036906004016108a1565b908051825103610a19576109c08151611ca5565b9160005b8251811015610a0b57806109ef6109dd60019386611d06565b516109e88386611d06565b51906134ec565b6109f98287611d06565b52610a048186611d06565b50016109c4565b6040518061046f86826108ff565b6040516317d38eff60e11b8152600490fd5b5034610398576020366003190112610398576004356000526008602052602060406000205460e81b6040519062ffffff60e81b168152f35b6001600160a01b03909116815260200190565b5034610398576020366003190112610398576020610a95600435612249565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361039857565b5034610398576040366003190112610398576020610ae5610adc610aa7565b602435906123ec565b6040519015158152f35b90600182811c92168015610b1f575b6020831014610b0957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610afe565b9060009291805491610b3a83610aef565b918282526001938481169081600014610b9c5750600114610b5c575b50505050565b90919394506000526020928360002092846000945b838610610b88575050505001019038808080610b56565b805485870183015294019385908201610b71565b9294505050602093945060ff191683830152151560051b01019038808080610b56565b90610bda610bd39260405193848092610b29565b0383610699565b565b503461039857602036600319011261039857600435600052600d60205261046f61059d6105a4604060002060405192838092610b29565b50346103985760203660031901126103985761046f610c30610aa7565b610c43610c3e600754613049565b600755565b610d8860075491610c6e610c6184600052600c602052604060002090565b805460ff19166001179055565b6005610c7943612e14565b40604051610ca181610c9360208201948730918b88613073565b03601f198101835282610699565b519020610cf1600082901a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b9060e81c62ffffff19825416179055565b610d0f610d0a610d038360031a61300e565b60ff900490565b613057565b610d18866103ad565b55610d44610d3f610d03610d35610d2e896103ad565b5460021c90565b8460041a90613036565b613065565b610d4d866103bd565b55811a0680610d985750610d68610d63846103cd565b613119565b610d79610d74846103dd565b613136565b82610d82611de9565b916131b0565b6040519081529081906020820190565b60018103610db75750610db2610dad846103cd565b6130fd565b610d68565b60028103610dd15750610db2610dcc846103cd565b6130e2565b600303610de957610db2610de4846103cd565b6130c4565b610db2610df5846103cd565b6130a0565b50346103985760208060031936011261039857600435610e1981612703565b15610e7e5760005260058152610e326040600020612f38565b906040519181839283018184528251809152816040850193019160005b828110610e5e57505050500390f35b83516001600160a01b031685528695509381019392810192600101610e4f565b60249060405190635747cd1b60e11b82526004820152fd5b8015150361039857565b9080601f830112156103985781602061053c933591016106e6565b50346103985760a036600319011261039857610ed5610aa7565b6024356001600160a01b038116810361039857606435610ef481610e96565b608435926001600160401b03841161039857610f17610f21943690600401610ea0565b9260443591612427565b005b50346103985760203660031901126103985761046f6105a4600435611c86565b50346103985760203660031901126103985760043560005260096020526020604060002054604051908152f35b503461039857600036600319011261039857602060405173a81a6a910fed20374361b35c451a4a44f86ced468152f35b5034610398576020366003190112610398576001600160401b036004358181116103985736602382011215610398578060040135918211610398573660248360051b830101116103985761046f916024610ffa92016122bb565b604051918291826108ff565b5034610398576020366003190112610398576001600160a01b03611028610aa7565b1660005260046020526020604060002054604051908152f35b50346103985760008060031936011261108b5761105c612c76565b80546001600160a01b03198116825581906001600160a01b031660008051602061365a8339815191528280a380f35b80fd5b50346103985760003660031901126103985760206040516103ea8152f35b5034610398576020366003190112610398576020610ae56110cb610aa7565b6132ce565b81601f82011215610398578035916110e78361087b565b926110f56040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061111f575050505090565b81356001600160a01b0381168103610398578152908301908301611111565b81601f82011215610398578035916111558361087b565b926111636040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061118d575050505090565b838091833561119b81610e96565b81520191019061117f565b9080601f83011215610398578135906111be8261087b565b926111cc6040519485610699565b828452602092838086019160051b8301019280841161039857848301915b8483106111fa5750505050505090565b82356001600160401b03811161039857869161121b84848094890101610ea0565b8152019201916111ea565b50346103985760a03660031901126103985760046001600160401b0381358181116103985761125890369084016110d0565b906024358181116103985761127090369085016110d0565b6044358281116103985761128790369086016108a1565b906064358381116103985761129f903690870161113e565b9260843590811161039857610f21956112ba913691016111a6565b936125b0565b506040366003190112610398576024356001600160401b038111610398576112ec903690600401610ea0565b6112f4612c76565b3461130557610f2190600435611fa8565b60405163f36ba73760e01b8152600490fd5b503461039857606036600319011261039857611331610aa7565b602435906044356001600160401b03811161039857611354903690600401610ea0565b9061135e83612249565b6001600160a01b038181169133830361144f57508216801561143d5780821461142b576113a56113a18461139c886000526005602052604060002090565b612f87565b1590565b61140b57938061140692610f21967f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215604051806113e28a8261052b565b0390a46113f86040519485923360208501612396565b03601f198101845283610699565b612aaf565b6040516314ec4d6d60e31b81528061142787866004840161237b565b0390fd5b6040516344fed6b160e11b8152600490fd5b604051639577b8b360e01b8152600490fd5b85611427604051928392632d938f5160e11b8452339160048501612358565b5034610398576000366003190112610398576000546040516001600160a01b039091168152602090f35b50346103985760003660031901126103985760008051602061367a833981519152600052600160205260405161046f906105a48161059d817f83b322886c7b7e25779e5d38e06e005c9e7aba1e1267ce9210cf24e31833535a610b29565b5060403660031901126103985760046001600160401b0381358181116103985761152390369084016108a1565b906024359081116103985761153b90369084016111a6565b91611544612c76565b346115ac57815183510361159d5781511561158e575060005b8151811015610f21578061158861157660019385611d06565b516115818387611d06565b5190611fa8565b0161155d565b6040516397da5f9560e01b8152fd5b604051633bcc897960e01b8152fd5b60405163f36ba73760e01b8152fd5b5034610398576000366003190112610398576020600e54604051908152f35b503461039857602080600319360112610398576001600160a01b036115fd610aa7565b16600052600481526116126040600020612f38565b906040519181839283018184528251809152816040850193019160005b82811061163e57505050500390f35b83518552869550938101939281019260010161162f565b5034610398576000366003190112610398576020604051610e908152f35b50346103985760603660031901126103985760046001600160401b038135818111610398576116a590369084016108a1565b602435828111610398576116bc90369085016108a1565b91604435908111610398576116d490369085016111a6565b926116dd612c76565b8151835180911490811591611757575b5061174857815115611739575060005b8151811015610f21578061173361171660019385611d06565b516117218387611d06565b5161172c8489611d06565b51916128d3565b016116fd565b6040516380c9830560e01b8152fd5b6040516317d38eff60e11b8152fd5b905084511415386116ed565b5034610398576060366003190112610398576044356001600160401b03811161039857611797610f21913690600401610ea0565b61179f612c76565b6024356004356128d3565b50346103985760008060031936011261108b5761180d60048260018060a01b036117d8818354163314613276565b600654166040519283809263934118fb60e01b82525afa90811561186f575b8390849261184a575b50602081519101206134a6565b6000805160206136da83398151915261184460008051602061363a8339815191529283855260016020526105a48160408720612153565b0390a280f35b905061186891503d8085833e6118608183610699565b81019061341e565b9038611800565b611877612aa2565b6117f7565b503461039857608036600319011261039857611896610aa7565b602435604435916118a683610e96565b6064356001600160401b038111610398576118c5903690600401610ea0565b6118ce83612249565b936001600160a01b03808616903382900361191f575b841690811561143d571461142b576118ff8282868887612680565b61190557005b610f21936113f861140692604051958693602085016123c1565b84811633146118e45760405163760b5acd60e01b81523360048201526001600160a01b038816602482015260448101879052606490fd5b5034610398576020366003190112610398576004356001600160401b038111610398576119879036906004016108a1565b6119918151611ca5565b9060005b81518110156119d057806119b46119ae60019385611d06565b51611c86565b6119be8286611d06565b526119c98185611d06565b5001611995565b6040518061046f85826108ff565b5060008060031936011261108b5761046f906119ff610e9060075410612f9a565b611a29611a24611a1c600e54611a1781341015612fd5565b61301f565b6103e8900490565b600e55565b611a37610c3e600754613049565b610d8860075491611a55610c6184600052600c602052604060002090565b6005611a6043612e14565b40604051611a7b81610c936020820194309033908b88613073565b519020611ab881841a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b611aca610d0a610d038360031a61300e565b611ad3866103ad565b55611ae9610d3f610d03610d35610d2e896103ad565b611af2866103bd565b55811a0680611b4f5750611b08610d63846103cd565b611b14610d74846103dd565b611b26611b1f611de9565b84336131b0565b8080803473a81a6a910fed20374361b35c451a4a44f86ced465af1611b49611e1a565b50613157565b60018103611b695750611b64610dad846103cd565b611b08565b60028103611b7e5750611b64610dcc846103cd565b600303611b9157611b64610de4846103cd565b611b64610df5846103cd565b503461039857602036600319011261039857611bb7610aa7565b611bbf612c76565b6001600160a01b039081168015611bfb57600080546001600160a01b031981168317825590921660008051602061365a8339815191528380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461039857602036600319011261039857600435600052600b60205261046f61059d6105a4604060002060405192838092610b29565b600052600160205261059d61053c604060002060405192838092610b29565b90611caf8261087b565b611cbc6040519182610699565b8281528092611ccd601f199161087b565b019060005b828110611cde57505050565b806060602080938501015201611cd2565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015611d1b575b60051b010190565b611d23611cef565b611d13565b60043610611d395761053c90611e4a565b6044604051809263e5099ee360e01b825260206004830152806024830152806000848401376000828201840152601f01601f19168101030190fd5b503415611d8d576040516330fa4a2160e11b8152600490fd5b606460405163e5099ee360e01b8152602060048201526004602482015260006044820152fd5b908092918237016000815290565b9060349391816000823760609390931b6001600160601b031916920191825260148201520190565b60405190602082016001600160401b03811183821017611e0d575b60405260008252565b611e15610624565b611e04565b3d15611e45573d90611e2b826106bc565b91611e396040519384610699565b82523d6000602084013e565b606090565b60609063ffffffff60e01b6000351691611e9a611e95604051696773c5a04a6d4300884b60b11b60208201526000602a82015285602c82015260208152611e908161063b565b611f85565b611c86565b805160148114159081611f46575b50611f2157611eb690611f50565b901c918215611efd57506000918291604051611ede81610c9360208201943490339087611dc1565b519134905af1611eec611e1a565b9015611ef55790565b602081519101fd5b60405163bb370b2b60e01b81526001600160e01b0319919091166004820152602490fd5b6040516342bfe79f60e01b815260206004820152908190611427906024830190610506565b9050151538611ea8565b80516020909101516001600160601b0319808216939290919060148110611f7657505050565b60140360031b82901b16169150565b602081519101519060208110611f99575090565b6000199060200360031b1b1690565b907ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d82146120985760008051602061361a8339815191528203611ff7576040516385c169bd60e01b8152600490fd5b60008051602061367a833981519152820361201e57604051630eceab6760e31b8152600490fd5b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3820361205757604051634ef6d7fb60e01b8152600490fd5b612093816120876000805160206136da83398151915293612082866000526001602052604060002090565b612153565b6040519182918261052b565b0390a2565b604051631b32400560e11b8152600490fd5b9060031b600019811b9283911b169119161790565b916120cb9183546120aa565b9055565b8181106120da575050565b600081556001016120cf565b90601f81116120f3575050565b610bda91600052601f6020600020910160051c8101906120cf565b9190601f811161211d57505050565b610bda926000526020600020906020601f840160051c83019310612149575b601f0160051c01906120cf565b909150819061213c565b81519192916001600160401b038111612222575b61217b816121758454610aef565b8461210e565b602080601f83116001146121b75750819293946000926121ac575b50508160011b916000199060031b1c1916179055565b015190503880612196565b90601f198316956121cd85600052602060002090565b926000905b88821061220a575050836001959697106121f1575b505050811b019055565b015160001960f88460031b161c191690553880806121e7565b806001859682949686015181550195019301906121d2565b61222a610624565b612167565b6001600160a01b0316600090815260046020526040902090565b6000818152600360205260409020546001600160a01b0316908115610e7e575090565b91908110156122ae575b60051b81013590601e19813603018212156103985701803591906001600160401b038311610398576020018236038113610398579190565b6122b6611cef565b612276565b91906122c681611ca5565b92600091825b8181106122d95750505050565b83806122e683858761226c565b604093916122f8855180938193611db3565b0390305af490612306611e1a565b911561232d57509060019161231b8289611d06565b526123268188611d06565b50016122cc565b81519192911561233f57825160208401fd5b5163234eb81960e01b8152600481019190915260249150fd5b6001600160a01b0391821681526020810192909252909116604082015260600190565b6001600160a01b039091168152602081019190915260400190565b61053c939260809260018060a01b031682526020820152600160408201528160608201520190610506565b61053c939260809260018060a01b031682526020820152600060408201528160608201520190610506565b6001600160a01b03806123fe84612249565b16911690811491821561241057505090565b61053c925060005260056020526040600020612de8565b9092939161243581336123ec565b156125925761244381612249565b6001600160a01b038181169184821691828403612575578088169384156125635761246d86612249565b91821603612533575050926125298380610bda9997946113f8999761249561252e98876127e5565b6124a7836124a28861222f565b612e6b565b506124ba836124b58b61222f565b612d83565b506124f2896124d3856000526003602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040516000805160206136ba83398151915290806125128a8e3384612749565b0390a46040519788948592888633602087016127ab565b612b5a565b612bf6565b604051635a9c31d360e01b8152600481018690526001600160a01b03928316602482015291166044820152606490fd5b6040516324ecef4d60e01b8152600490fd5b604051632d938f5160e11b81528061142788888660048501612358565b60449060405190631294d2a960e01b82526004820152336024820152fd5b949390919285519383518514801590612675575b801561266a575b801561265f575b61264d5760005b8581106125ea575050505050509050565b8061264761260a6125fd6001948c611d06565b516001600160a01b031690565b6126176125fd848a611d06565b6126218487611d06565b5161263561262f868a611d06565b51151590565b91612640868b611d06565b5193612427565b016125d9565b6040516393a8311960e01b8152600490fd5b5082518514156125d2565b5081518514156125cb565b5080518514156125c4565b91939284600052600560205260406000209260018060a01b03906126a78282168096612e6b565b156126e45750906126df60008051602061369a8339815191529392604051938493151584526040602085015216956040830190610506565b0390a4565b6040516312a8c6a360e21b81529081906114279089906004840161237b565b6000908152600360205260409020546001600160a01b0316151590565b6001600160a01b0390911681526001602082015260606040820181905261053c92910190610506565b6001600160a01b039091168152901515602082015260606040820181905261053c92910190610506565b6001600160a01b0391821681526000602082015291166040820152606081019190915260a06080820181905261053c92910190610506565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260a06080820181905261053c92910190610506565b9060009080825260059160209383855260409182812094855495825b87811061281357505050505050505050565b8154156128a9575b8184528884205486516001600160a01b039182169161283982610663565b868252898752858c5261284e838a8920612e6b565b1561288e576001939260008051602061369a8339815191528d896128858e968e968e88805196879687528601521696830190610506565b0390a401612801565b88516312a8c6a360e21b8152806114278c866004840161237b565b6128b1611cef565b61281b565b9190604051926020840152604083015260408252610bda8261067e565b90916128df83836128b6565b805160208092012060005260019081815260406000209183519160018060401b0383116129f7575b61291b836129158654610aef565b8661210e565b80601f8411600114612975575091808061296595936000805160206135fa833981519152979560009361296a575b501b916000199060031b1c19161790556040519182918261052b565b0390a3565b860151925038612949565b90601f93929319831661298d86600052602060002090565b926000905b8282106129e057505091839161296596946000805160206135fa833981519152989694106129c7575b5050811b019055612087565b85015160001960f88460031b161c1916905538806129bb565b808785968294968c01518155019501930190612992565b6129ff610624565b612907565b81601f82011215610398578051612a1a816106bc565b92612a286040519485610699565b818452602082840101116103985761053c91602080850191016104e3565b906020828203126103985781516001600160401b0381116103985761053c9201612a04565b90604061053c927f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d81528160208201520190610506565b506040513d6000823e3d90fd5b612ab881612cce565b612ac0575050565b612b13600092918392604051948580948193631aed5a8560e21b83527f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f009706004840152604060248401526044830190610506565b03926001600160a01b03165af18015612b4d575b612b2e5750565b612b4a903d806000833e612b428183610699565b810190612a46565b50565b612b55612aa2565b612b27565b612b6381612cce565b612b6b575050565b612b13600092918392604051948580948193631aed5a8560e21b83527fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab006004840152604060248401526044830190610506565b612bc781612cce565b15612bf257604051631aed5a8560e21b8152916000918391829084908290612b139060048301612a6b565b5050565b9190612c0183612cce565b15612c2b5750612b136000928392604051948580948193631aed5a8560e21b835260048301612a6b565b905015612c355750565b803b15612c5957604051634349776d60e01b81529081906114279060048301610a63565b604051630317313760e01b81529081906114279060048301610a63565b6000546001600160a01b03163303612c8a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000602091604051838101906301ffc9a760e01b8252631aed5a8560e21b602482015260248152612cfe8161067e565b5191617530fa6000513d82612d1f575b5081612d18575090565b9050151590565b60201115915038612d0e565b600090602092604051848101916301ffc9a760e01b835263ffffffff60e01b16602482015260248152612cfe8161067e565b8054821015612d76575b60005260206000200190600090565b612d7e611cef565b612d67565b612d8d8282612de8565b612de1578082612dbd612db4600194548560401b811015612dd4575b858101855584612d5d565b819391546120aa565b905580549260005201602052604060002055600190565b612ddc610624565b612da9565b5050600090565b60019160005201602052604060002054151590565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211612e2357565b610bda612dfd565b8054908115612e555760001991820191612e458383612d5d565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001810191806000528260205260406000205492831515600014612f2f57612ebd612ecc936000958619808201828111612f22575b8354918201918211612f15575b808203612ed2575b505050612e2b565b90600052602052604060002090565b55600190565b612efc612ef691612ee6612f0c9487612d5d565b90549060031b1c92839187612d5d565b906120bf565b8590600052602052604060002090565b55388080612eb5565b612f1d612dfd565b612ead565b612f2a612dfd565b612ea0565b50505050600090565b9060405191828154918282526020928383019160005283600020936000905b828210612f6d57505050610bda92500383610699565b855484526001958601958895509381019390910190612f57565b61053c916001600160a01b031690612d83565b15612fa157565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15612fdc57565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b9081603702916037830403612e2357565b906103ea91828102928184041490151715612e2357565b81810292918115918404141715612e2357565b9060018201809211612e2357565b6023019081602311612e2357565b60b401908160b411612e2357565b9291606894918452602084015260018060601b0319809260601b16604084015260601b1660548201520190565b6130b36130ad8254610aef565b826120e6565b600c6579656c6c6f7760d01b019055565b6130d16130ad8254610aef565b600c65707572706c6560d01b019055565b6130ef6130ad8254610aef565b6006621c995960ea1b019055565b61310a6130ad8254610aef565b600863626c756560e01b019055565b6131266130ad8254610aef565b600a6433b932b2b760d91b019055565b6131436130ad8254610aef565b6012681b1d5adcdbdb985d5d60ba1b019055565b1561315e57565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b60019060001981146131a4570190565b6131ac612dfd565b0190565b909291906001600160a01b0381168015612563576131cd85612703565b61325d576131da85612703565b61325d5784610bda9495613258926131fb6131f6600254613194565b600255565b613208826124b58761222f565b50613221856124d3846000526003602052604060002090565b60006000805160206136ba833981519152604051806132418a3383612720565b0390a46113f8604051948592853360208601612773565b612bbe565b6040516334c7b51160e01b815260048101869052602490fd5b1561327d57565b60405162461bcd60e51b81526020600482015260146024820152731314d40e0e88139bdd08185d5d1a1bdc9a5e995960621b6044820152606490fd5b90816020910312610398575161053c81610e96565b6040516301ffc9a760e01b808252633a271fff60e01b60048301526001600160a01b0392909216916020918281602481875afa60009181613389575b506133185750505050600090565b61332457505050600090565b604051908152631aed5a8560e21b6004820152918190839060249082905afa91829160009361335a575b505061053c5750600090565b61337a929350803d10613382575b6133728183610699565b8101906132b9565b90388061334e565b503d613368565b6133a1919250843d8611613382576133728183610699565b903861330a565b6133e5611e95604051696773c5a04a6d4300884b60b11b60208201526000602a8201526301ffc9a760e01b602c82015260208152611e908161063b565b805160148114159081613414575b50611f215761340190611f50565b60601c908115612de15761053c91612d2b565b90501515386133f3565b9190916040818403126103985780516001600160401b039390848111610398578161344a918401612a04565b9360208301519081116103985761053c9201612a04565b9294916134819061053c979592855260c0602086015260c0850190610506565b9462ffffff60e81b1660408401526060830152608082015260a0818403910152610506565b6048610bda91939293604051948591650379abe3500160c51b602084015260288301526134dc81518092602086860191016104e3565b8101036028810185520183610699565b9060008051602061363a83398151915281036135c5575080600061351a61351561053c946103dd565b610bbf565b9161352e6135278261039d565b5460e81b90565b90613538816103ad565b5493613543826103bd565b5491613581613554613515836103cd565b6006549093906001600160a01b0316946040519889978896879663ad27274b60e01b885260048801613461565b03915afa9081156135b8575b60009081926135a35750602081519101206134a6565b9061186892503d8091833e6118608183610699565b6135c0612aa2565b61358d565b61053c91906135d3916128b6565b60208151910120600052600160205261059d61053c604060002060405192838092610b2956fea6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbbdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af19afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e02f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3cb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bfece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2a2646970667358221220facca20eb8e2ef9a16a8249853dd259e81beba0c461a5ea4dd10a578c3ba1a2c64736f6c63430008110033604060808152346200113b576200001562001140565b906200002062001140565b603a81526020907f4d2032303020323030206d202d37302030206120373020353020302031203020828201527f31343020302061203730203530203020312030202d31343020300000000000008382015283526200007d62001140565b603a81527f4d2032303020323030206d202d36352030206120363520353520302031203020828201527f31333020302061203635203535203020312030202d31333020300000000000008382015281840152620000d962001140565b603a81527f4d2032303020323030206d202d37352030206120373520343520302031203020828201527f31353020302061203735203435203020312030202d313530203000000000000083820152828401526000908154936003948584558086106200111e575b508280528183209083905b86821062000ff6575050506200016062001140565b936200016b620011b6565b607181527f4d2031373020313830206d202d31352030206120313520313520302031203020838201527f333020302061203135203135203020312030202d33302030204d2032333020318582015260607f3830206d202d3135203020612031352031352030203120302033302030206120818301526080917003135203135203020312030202d3330203607c1b83820152875262000208620011b6565b607181527f4d2031373020313730206d202d31322030206120313220313820302031203020858201527f323420302061203132203138203020312030202d32342030204d203233302031878201527f3730206d202d3132203020612031322031382030203120302032342030206120828201527003132203138203020312030202d3234203607c1b8382015284880152620002a2620011b6565b607181527f4d2031373020313830206d202d31372030206120313720313320302031203020858201527f333420302061203137203133203020312030202d33342030204d203233302031878201527f3830206d202d3137203020612031372031332030203120302033342030206120828201527003137203133203020312030202d3334203607c1b8382015286880152600196875484895580851062000fd9575b508786528486209086905b85821062000ebb575050506200036362001140565b6200036d620011d6565b601b81527f4d20313630203232302051203230302032343020323430203232300000000000868201528152620003a2620011d6565b601b81527f4d203136302032323020512032303020323530203234302032323000000000008682015285820152620003d9620011d6565b601b81527f4d2031363020323235205120323030203233352032343020323235000000000086820152878201526002548460025580851062000e9d575b50600286528486209086905b85821062000d7f575050506200043762001140565b62000441620011b6565b606781527f4d2031373020313830206d202d35203020612035203520302031203020313020868201527f30206120352035203020312030202d31302030204d2032333020313830206d20888201527f2d352030206120352035203020312030203130203020612035203520302031208382015266030202d313020360cc1b848201528152620004cf620011b6565b606381527f4d2031373020313730206d202d34203020612034203620302031203020382030868201527f206120342036203020312030202d382030204d2032333020313730206d202d34888201527f203020612034203620302031203020382030206120342036203020312030202d838201526203820360ec1b84820152858201526200055b620011b6565b606381527f4d2031373020313830206d202d33203020612033203320302031203020362030868201527f206120332033203020312030202d362030204d2032333020313830206d202d33888201527f203020612033203320302031203020362030206120332033203020312030202d838201526203620360ec1b8482015287820152835484805580851062000d62575b508386528486209086905b85821062000c30575050506200060b62001176565b9262000616620011d6565b97600498898152631a19585960e21b87820152855262000635620011d6565b898152636579657360e01b878201528686015262000652620011d6565b6006815265707570696c7360d01b878201528886015262000672620011d6565b94600595868152640dadeeae8d60db1b8882015284820152899088905b8b821062000af957505050508592600894926200094a87936200087f8b62000aeb9c9d620007ae620006c062001196565b620006ca620011d6565b9b8b8d526433b932b2b760d91b9c8d8c8201528252620006e9620011d6565b9d8e52671cdd185b99185c9960c21b9d8e8c8201528b8301526200070c620011f6565b908152848201526200071d620011d6565b9a60079c8c8e809e52662361336536333560c81b8d8201528a84015262000743620011d6565b9b8d8d526611b3333333333360c91b9c8d828201528c8501528d62000767620011d6565b9e8f52660233030303030360cc1b9e8f90818482015260a08701526200078c620011d6565b9182528282015260c0850152620007a2620011d6565b928352820152620012dc565b8b8d620007ba62001196565b938d620007c6620011d6565b9385855263626c756560e01b9485828201528752620007e4620011d6565b916008835281830152860152620007fa620011f6565b9182528401528c661199b11c19331b60c91b62000816620011d6565b918d8352820152878401528c896200082d620011d6565b918d8352820152888401528c8a62000844620011d6565b918d835282015260a08401528c8a6200085c620011d6565b918d835282015260c084015262000872620011d6565b9182528c820152620012dc565b6200088962001196565b9062000894620011d6565b818152621c995960ea1b90818c8201528352620008b0620011d6565b600881528a8c8201528b8401528d620008c8620011f6565b908d8252840152620008d9620011d6565b8981526608d9598d0d0d0d60ca1b8c82015285840152620008f9620011d6565b898152878c820152868401526200090f620011d6565b898152888c82015260a084015262000926620011d6565b898152888c82015260c08401526200093d620011d6565b9182528a820152620012dc565b62000a1d6200095862001196565b62000962620011d6565b6006815265707572706c6560d01b90818b820152825262000982620011d6565b60088152898b8201528a83015262000999620011f6565b8b81528d830152620009aa620011d6565b888152662361383535663760c81b8b82015284830152620009ca620011d6565b888152868b82015285830152620009e0620011d6565b888152878b82015260a0830152620009f7620011d6565b888152878b82015260c083015262000a0e620011d6565b90600682528a820152620012dc565b62000a2762001196565b9762000a32620011d6565b96600688526579656c6c6f7760d01b97888a8201528a5262000a53620011d6565b906008825289820152888a015262000a6a620011f6565b9081528a89015262000a7b620011d6565b90858252662366616363313560c81b8883015288015262000a9b620011d6565b918483528683015286015262000ab0620011d6565b828152818582015260a086015262000ac7620011d6565b9182528382015260c084015262000add620011d6565b9160068352820152620012dc565b51611c2a908162001a728239f35b805180519091906001600160401b03811162000c1c5785918b918d62000b20885462001216565b908d601f9283811162000be1575b50508491831160011462000b71579085968362000b65575b5050600019828b1b1c191690841b1786555b019301910190916200068f565b01519050388062000b46565b90601f198316898352858320925b81811062000bbe575090869784889594931062000ba5575b505050811b01865562000b58565b0151600019838d1b60f8161c1916905538808062000b97565b9497939686929691938786015181550195019301928e94918a9693979462000b7f565b62000c0a918b84528784209085808801821c8301938a891062000c12575b01901c019062001253565b8d3862000b2e565b9350829362000bff565b50634e487b7160e01b8b5260418d5260248bfd5b805180519091906001600160401b03811162000d4e578b91899162000c56875462001216565b948c601f968588821162000d1e575b5050508c8496831160011462000cac5795829186979262000ca0575b5050600019828c1b1c191690841b1786555b01930191019091620005f6565b01519050388062000c81565b9095601f198316898352858320925b81811062000cfa575090869784889594931062000ce1575b505050811b01865562000c93565b0151600019838e1b60f8161c1916905538808062000cd3565b9497939686929691938786015181550195019301928f95929693918d959262000cbb565b828b62000d45945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000c65565b634e487b7160e01b8a52604160045260248afd5b84875285872062000d789181019086016200126c565b38620005eb565b805180519091906001600160401b03811162000d4e578b91899162000da5875462001216565b948c601f968588821162000e6d575b5050508c8496831160011462000dfb5795829186979262000def575b5050600019828c1b1c191690841b1786555b0193019101909162000422565b01519050388062000dd0565b9095601f198316898352858320925b81811062000e49575090869784889594931062000e30575b505050811b01865562000de2565b0151600019838e1b60f8161c1916905538808062000e22565b9497939686929691938786015181550195019301928f95929693918d959262000e0a565b828b62000e94945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000db4565b6002875285872062000eb49181019086016200126c565b3862000416565b805180519091906001600160401b03811162000d4e578b91899162000ee1875462001216565b948c601f968588821162000fa9575b5050508c8496831160011462000f375795829186979262000f2b575b5050600019828c1b1c191690841b1786555b019301910190916200034e565b01519050388062000f0c565b9095601f198316898352858320925b81811062000f85575090869784889594931062000f6c575b505050811b01865562000f1e565b0151600019838e1b60f8161c1916905538808062000f5e565b9497939686929691938786015181550195019301928f95929693918d959262000f46565b828b62000fd0945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000ef0565b88875285872062000fef9181019086016200126c565b3862000343565b80518051906001600160401b0382116200110a5790859162001019865462001216565b90601f91828111620010da575b50839183116001146200106f579180600195928695948b9262001063575b5050600019828d1b1c191690841b1786555b019301910190916200014b565b01519050388062001044565b8689528389209190601f1984168a5b818110620010c15750916001969391858897969410620010a8575b505050831b8301865562001056565b0151600019838e1b60f8161c1916905538808062001099565b8284015185558a9660019095019493840193016200107e565b6200110390888b52858b20600585808801821c83019389891062000c125701901c019062001253565b3862001026565b634e487b7160e01b87526041600452602487fd5b838052828420620011349181019087016200126c565b3862000140565b600080fd5b60405190606082016001600160401b038111838210176200116057604052565b634e487b7160e01b600052604160045260246000fd5b60405190608082016001600160401b038111838210176200116057604052565b6040519060e082016001600160401b038111838210176200116057604052565b6040519060a082016001600160401b038111838210176200116057604052565b60408051919082016001600160401b038111838210176200116057604052565b60405190602082016001600160401b038111838210176200116057604052565b90600182811c9216801562001248575b60208310146200123257565b634e487b7160e01b600052602260045260246000fd5b91607f169162001226565b8181106200125f575050565b6000815560010162001253565b81811062001278575050565b80620012876001925462001216565b8062001296575b50016200126c565b601f8082118414620012b0575050600081555b386200128e565b620012d060009284845285602093848620920160051c8201910162001253565b812081835555620012a9565b815190602091828401519260408501519260608601519560808101519060c060a0820151910151916200130e62001176565b98895284890152604088015260608701526200132962001176565b928352818301948552604083019384526060830195865281604051828193519060005b82811062001a5b5750508101600981520301902091519081519360018060401b039485811162001160578062001383865462001216565b94601f9586811162001a29575b508490868311600114620019bf57600092620019b3575b50508160011b916000199060031b1c19161784555b600195868501905180519087821162001160578190620013dd845462001216565b87811162001981575b50859087831160011462001919576000926200190d575b5050600019600383901b1c191690881b1790555b5180516002850191868211620011605781906200142f845462001216565b868111620018db575b508490868311600114620018735760009262001867575b5050600019600383901b1c191690871b1790555b60039283810196519687518051908782116200116057819062001487845462001216565b87811162001835575b508590878311600114620017ce57600092620017c2575b505060001982881b1c191690881b1790555b600481018288015180519087821162001160578190620014da845462001216565b87811162001790575b50859087831160011462001729576000926200171d575b505060001982881b1c191690881b1790555b60058101604088015180519087821162001160576200152c835462001216565b868111620016eb575b5084908683116001146200167957918060069492606096946000926200166d575b5050600019828a1b1c1916908a1b1790555b01960151908151948511620011605762001583875462001216565b83811162001630575b5080928511600114620015c65750938394918492600095620015ba575b50501b92600019911b1c1916179055565b015193503880620015a9565b92919084601f1981168860005285600020956000905b89838310620016155750505010620015fa575b50505050811b019055565b01519060f884600019921b161c1916905538808080620015ef565b858701518955909701969485019488935090810190620015dc565b6200165c9088600052826000208580890160051c820192858a1062001663575b0160051c019062001253565b386200158c565b9250819262001650565b01519050388062001556565b899291601f1983169185600052876000209260005b89828210620016d45750509160609795939185600698969410620016bb575b505050811b01905562001568565b0151600019838c1b60f8161c19169055388080620016ad565b8385015186558e979095019493840193016200168e565b620017169084600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001535565b015190503880620014fa565b908a9350601f1983169185600052876000209260005b8982821062001779575050841162001760575b505050811b0190556200150c565b0151600019838a1b60f8161c1916905538808062001752565b8385015186558e979095019493840193016200173f565b620017bb9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620014e3565b015190503880620014a7565b908a9350601f1983169185600052876000209260005b898282106200181e575050841162001805575b505050811b019055620014b9565b0151600019838a1b60f8161c19169055388080620017f7565b8385015186558e97909501949384019301620017e4565b620018609085600052876000208980860160051c8201928a871062001663570160051c019062001253565b3862001490565b0151905038806200144f565b90899350601f1983169185600052866000209260005b88828210620018c45750508411620018aa575b505050811b01905562001463565b015160001960f88460031b161c191690553880806200189c565b8385015186558d9790950194938401930162001889565b620019069085600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001438565b015190503880620013fd565b908a9350601f1983169185600052876000209260005b898282106200196a575050841162001950575b505050811b01905562001411565b015160001960f88460031b161c1916905538808062001942565b8385015186558e979095019493840193016200192f565b620019ac9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620013e6565b015190503880620013a7565b60008881528681209350601f198516905b8782821062001a12575050908460019594939210620019f8575b505050811b018455620013bc565b015160001960f88460031b161c19169055388080620019ea565b6001859682939686015181550195019301620019d0565b62001a549088600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001390565b818101850151868201528694869450016200134c56fe6080604052600436101561001257600080fd5b60003560e01c806380a6dfa014611375578063934118fb14610cfe578063ad27274b146100915763c65eb1801461004857600080fd5b3461008c57602036600319011261008c57600435600052600860205261008861007460406000206115be565b6040519182916020835260208301906116b2565b0390f35b600080fd5b3461008c5760c036600319011261008c576001600160401b0360243581811161008c576100c290369060040161151a565b604435916001600160e81b03198316830361008c5760a43590811161008c576100ef90369060040161151a565b906100f8611a65565b60405193610105856114a6565b600685526020368187013760005b60038110610c6d5750508151159050610c66575b604051602081835161013c8183858801611561565b81016009815203019020606061018d60036040519361015a8561148b565b610163816115be565b8552610171600182016115be565b6020860152610182600282016115be565b604086015201611664565b9101908152600360ff6040516020810190600435825260006040820152602181526101b7816114c1565b5190201606600360ff60405160208101906004358252600160f81b6040820152602181526101e4816114c1565b5190201606600360ff60405160208101906004358252600160f91b604082015260218152610211816114c1565b5190201606600360ff604051602081019060043582528360f81b60408201526021815261023d816114c1565b519020160692600054811015610c50576000805261027c907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016115be565b9351908151936060830151956040602085015194015194600154811015610c5057600160005260206000200191600354811015610c5057600360005260206000200192600254811015610c505760026000526102f9907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016115be565b9460405197889760208901600080516020611bb58339815191529052604089017f30302f737667222076696577426f783d22302030203430302034303022207769905276323a341e911a181811103432b4b3b43a1e911a1818111f60491b60608a015260778901661e39ba3cb6329f60c91b9052607e89016a173432b0b23db334b6361d60a91b90528051908160898b01916020019161039892611561565b880191671db9ba3937b5b29d60c11b806089850152825160208401948160918201906103c49188611561565b0197723b7374726f6b652d77696474683a3370783b7d60681b9889609182015260a481016a1732bcb2b9bdb334b6361d60a91b90528151918260af8301916020019161040f92611561565b019060af8201528251908160b78201906104299187611561565b0160b78101723b7374726f6b652d77696474683a3270783b7d60681b905260ca81016c17383ab834b639bdb334b6361d60991b90528151918260d78301916020019161047492611561565b019060d782016d3b7374726f6b653a6e6f6e653b7d60901b905260e58201771736b7baba343db334b6361d3737b7329db9ba3937b5b29d60411b905251918260fd83016104c092611561565b0160fd810194909452671e17b9ba3cb6329f60c11b6101108501527f3c726563742077696474683d2234303022206865696768743d223430302220666101188501526e34b6361e911198181818181811179f60891b610138850152681e3830ba3410321e9160b91b6101478501819052815190946101509261054a90839085840190602001611561565b01906f111031b630b9b99e913432b0b211179f60811b908201528361016082015261016901610578916119e2565b6f111031b630b9b99e9132bcb2b991179f60811b81528260108201526019016105a0916119e2565b9071111031b630b9b99e91383ab834b63991179f60711b8252601282015281519182601b830191602001916105d492611561565b70111031b630b9b99e9136b7baba3411179f60791b601b92909101918201527f3c7465787420783d223230302220793d223238302220666f6e742d66616d696c602c8201527f793d22417269616c2220666f6e742d73697a653d223136222066696c6c3d2223604c8201527f6666666666662220746578742d616e63686f723d226d6964646c65223e000000606c820152845190610679826089830160208901611561565b0160898101661e17ba32bc3a1f60c91b905260908101651e17b9bb339f60d11b9052036076810182526096016106af90826114dc565b6106b890611731565b916040518093602082017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b905280519081603a840191602001916106f892611561565b810103601a81018452603a0161070e90846114dc565b82516020840120936107216004356118a5565b93604051809560208201674c6f6f676965202360c01b90528051908160288401916020019161074f92611561565b81010360088101865260280161076590866114dc565b60643595610772876118a5565b9660843591610780836118a5565b98604051998a91602083017954686973204c6f6f6769652069732074686520636f6c6f72202360301b90528751603a84018160208b01916107c092611561565b8301603a8101750103bb4ba3410309031b43ab13134b732b9b99037b3160551b9052815191826050830191602001916107f892611561565b01605081017401030b7321036b7baba34103632b733ba341037b31605d1b90528151918260658301916020019161082e92611561565b0160658101601760f91b905203604681018a5260660161084e908a6114dc565b61085790611ab1565b90610861906118a5565b9161086b906118a5565b926040519889987a3d912629a81a26b2ba30b230ba30911d103d913730b6b2911d101160291b60208b015280519081603b8c0191602001916108ac92611561565b8901711116113232b9b1b934b83a34b7b7111d101160711b603b82015281519182604d830191602001916108df92611561565b7f222c226c696e6b73223a205b7b227469746c65223a2257656273697465222c22604d92909101918201527f75726c223a2268747470733a2f2f6c756b736f6c6f6f676965732e7665726365606d820152721b0b985c1c089f574b089a58dbdb888e96d74b606a1b608d8201527f22696d61676573223a205b5b7b227769647468223a203430302c22686569676860a0820152671d088e880d0c0c0b60c21b60c082015267113ab936111d101160c11b60c88201528151916109aa90839060d0840190602001611561565b0160d081017f222c22766572696669636174696f6e223a207b226d6574686f64223a20226b6590527831b1b0b5991a9b14313cba32b9949116113230ba30911d101160391b60f082015281519061010992828483019160200191610a0d92611561565b65089f5f57574b60d21b9101918201526d2261747472696275746573223a5b60901b61010f820152787b226b6579223a22636f6c6f72222c2276616c7565223a222360381b61011d820152835161013694909190610a7390839087840190602001611561565b72088b089d1e5c19488e889cdd1c9a5b99c89f4b606a1b91019384018190527b3d9135b2bc911d1131b43ab13134b732b9b99116113b30b63ab2911d60211b6101498501528151909361016592610ad290839085840190602001611561565b01710b089d1e5c19488e889b9d5b58995c889f4b60721b809282015261017781017f7b226b6579223a226d6f7574684c656e677468222c2276616c7565223a000000905282519061019493828583019160200191610b2f92611561565b01918201527a3d9135b2bc911d113ab9b2b93730b6b29116113b30b63ab2911d1160291b6101a68201528251906101c193828583019160200191610b7292611561565b0191820152763d9135b2bc911d113a3cb8329116113b30b63ab2911d1160491b6101d48201528151906101eb92828483019160200191610bb192611561565b019071222c2274797065223a22737472696e67227d60701b908201526101fd8101625d7d7d60e81b9052036101e08101825261020001610bf190826114dc565b610bfa81611731565b604051809160208201600080516020611bd5833981519152905280519081603d84019160200191610c2a92611561565b810103601d81018252603d01610c4090826114dc565b60405191829161008891836116d7565b634e487b7160e01b600052603260045260246000fd5b5081610127565b81811a906001600160f81b031980610c8c600485901c60ff1687611a91565b5116928260011b9383850460021484151715610ce857610cbe91600f9160001a610cb6878d611a91565b531686611a91565b51169160018101809111610ce857610cdd610ce39360001a9189611a91565b53611aa2565b610113565b634e487b7160e01b600052601160045260246000fd5b3461008c57600036600319011261008c576040516101a08101906001600160401b0382118183101761135f5761134091604052611350603d61016480845261130f6102d5610efa610ef4602094858901600080516020611bb583398151915281527f30302f737667222077696474683d2234303022206865696768743d223430302260408b01527f2076696577426f783d223020302034303020343030223e3c726563742077696460608b01527f74683d2234303022206865696768743d22343030222066696c6c3d222330303060808b01527f222f3e3c7465787420783d223230302220793d223138302220666f6e742d666160a08b01527f6d696c793d22417269616c2220666f6e742d73697a653d223430222066696c6c60c08b01527f3d22236666662220746578742d616e63686f723d226d6964646c65223e4c756b60e08b01527f736f4c6f6f676965733c2f746578743e3c7465787420783d223230302220793d6101008b01527f223233302220666f6e742d66616d696c793d22417269616c2220666f6e742d736101208b01527f697a653d223230222066696c6c3d22233066302220746578742d616e63686f726101408b01527f3d226d6964646c65223e46697865642045646974696f6e3c2f746578743e3c2f6101608b01526339bb339f60e11b6101808b01522097611731565b96611ab1565b604051707b224c5350344d65746164617461223a7b60781b858201527b089b985b59488e88931d5adcdbd31bdbd9da595cc8119a5e1959088b60221b60318201527f226465736372697074696f6e223a224c756b736f4c6f6f676965732061726520604d8201527f4c554b534f205374616e64617264204c535038204e4654732077697468206120606d8201527f736d696c65203a29204f6e6c792033373238204c756b736f4c6f6f6769657320608d8201527f617661696c61626c65206f6e206120707269636520637572766520696e63726560ad8201527f6173696e6720302e322520776974682065616368206e6577206d696e742e205460cd8201527f6869732066697865642076657273696f6e2073686f77732070726f706572207460ed8201527f6f6b656e206174747269627574657320616e64205356472072656e646572696e61010d8201526319cb888b60e21b61012d8201527f226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275726c6101318201527f223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c2e616101518201527f7070227d2c7b227469746c65223a2254776974746572222c2275726c223a22686101718201527f747470733a2f2f747769747465722e636f6d2f6c756b736f4c6f6f6769657322610191820152621f574b60ea1b6101b18201526b22696d61676573223a5b5b7b60a01b6101b48201526b089dda591d1a088e8d0c0c0b60a21b6101c08201526c089a195a59da1d088e8d0c0c0b609a1b6101cc8201527f2275726c223a22646174613a696d6167652f7376672b786d6c3b6261736536346101d9820152600b60fa1b6101f9820152875190978892916101fa9161118e908290848701908a01611561565b83019061088b60f21b908201527f22766572696669636174696f6e223a7b226d6574686f64223a226b656363616b6101fc82015273191a9b14313cba32b9949116113230ba30911d1160611b61021c8201528151906111f68261023094898685019101611561565b61227d60f01b910191820152631f57574b60e21b6102328201526d2261747472696275746573223a5b60901b6102368201527f7b226b6579223a2274797065222c2276616c7565223a22636f6c6c656374696f610244820152731b888b089d1e5c19488e889cdd1c9a5b99c89f4b60621b6102648201527f7b226b6579223a226c696d6974222c2276616c7565223a333732382c227479706102788201526c19488e889b9d5b58995c889f4b609a1b6102988201527f7b226b6579223a226375727665222c2276616c7565223a3130302e322c2274796102a58201526c7065223a226e756d626572227d60981b6102c5820152605d60f81b6102d2820152617d7d60f01b6102d3820152036102b58101875201856114dc565b61131884611731565b6040519582600080516020611bd5833981519152889485015282519283918686019101611561565b810103601d8101855201836114dc565b610088604051928392836116d7565b634e487b7160e01b600052604160045260246000fd5b3461008c5760208060031936011261008c57600435906001600160401b03821161008c576100886113c4826113b161142095369060040161151a565b8160405193828580945193849201611561565b810160098152030190206113d7816115be565b92606061147a61146861143b6113ef600187016115be565b9561142d61140b6003611404600285016115be565b9301611664565b976040519b8c9b60808d5260808d01906116b2565b908b8203898d01526116b2565b9089820360408b01526116b2565b938785038489015261145686516080875260808701906116b2565b908087015190868303908701526116b2565b604085015184820360408601526116b2565b9201519060608184039101526116b2565b608081019081106001600160401b0382111761135f57604052565b604081019081106001600160401b0382111761135f57604052565b606081019081106001600160401b0382111761135f57604052565b601f909101601f19168101906001600160401b0382119082101761135f57604052565b6001600160401b03811161135f57601f01601f191660200190565b81601f8201121561008c57803590611531826114ff565b9261153f60405194856114dc565b8284526020838301011161008c57816000926020809301838601378301015290565b60005b8381106115745750506000910152565b8181015183820152602001611564565b90600182811c921680156115b4575b602083101461159e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611593565b90604051918260008254926115d284611584565b90818452600194858116908160001461164157506001146115fe575b50506115fc925003836114dc565b565b9093915060005260209081600020936000915b8183106116295750506115fc935082010138806115ee565b85548884018501529485019487945091830191611611565b9150506115fc94506020925060ff191682840152151560051b82010138806115ee565b906040516116718161148b565b60606116ad60038395611683816115be565b8552611691600182016115be565b60208601526116a2600282016115be565b6040860152016115be565b910152565b906020916116cb81518092818552858086019101611561565b601f01601f1916010190565b90916116ee6116fc936040845260408401906116b2565b9160208184039101526116b2565b90565b90611709826114ff565b61171660405191826114dc565b8281528092611727601f19916114ff565b0190602036910137565b8051156118815760405190606082016001600160401b0381118382101761135f57604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051600291828201809211610ce8576003918290046001600160fe1b0381168103610ce8576117d7908495941b6116ff565b936020850193829183518401906020820192835194600085525b83811061183057505050505251068060011461181d57600214611812575090565b603d90600019015390565b50603d9081600019820153600119015390565b87600491999293949901918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518982015301979291906117f1565b50604051602081016001600160401b0381118282101761135f576040526000815290565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b808210156119d4575b506904ee2d6d415b85acef8160201b808310156119c5575b50662386f26fc10000808310156119b6575b506305f5e100808310156119a7575b5061271080831015611998575b506064821015611988575b600a8092101561197e575b6001908160216119368287016116ff565b95860101905b611948575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156119795791908261193c565b611941565b9160010191611925565b919060646002910491019161191a565b6004919392049101913861190f565b60089193920491019138611902565b601091939204910191386118f3565b602091939204910191386118e1565b6040935081049150386118c9565b6000929181546119f181611584565b92600191808316908115611a4a5750600114611a0e575b50505050565b90919293945060005260209081600020906000915b858310611a395750505050019038808080611a08565b805485840152918301918101611a23565b60ff1916845250505081151590910201915038808080611a08565b60405190611a72826114a6565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b908151811015610c50570160200190565b6000198114610ce85760010190565b611ab9611a65565b9060405191611ac78361148b565b604283526020908184016060368237845115610c505760309053835192600193841015610c50576078602186015360005b838110611b0757505050505090565b6001600160f81b031982821a600482611b2583831c60ff1688611a91565b51169284891b92600294868504861487151715611b9f57848601809611611b9f57600f600393928d611b5e89611b669560001a92611a91565b531689611a91565b51169201809311611b8a575090610cdd611b85939260001a9189611a91565b611af8565b601190634e487b7160e01b6000525260246000fd5b601184634e487b7160e01b6000525260246000fdfe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000a264697066735822122076ec184052ec9fe0b0c266082170ba33445633eed4eac586995af4480fb1163464736f6c63430008110033",
      "deployedBytecode": "0x60806040526004361015610033575b3615610026575b61001e36611d28565b602081519101f35b61002e611d74565b610015565b60003560e01c8062923f9e14610366578063017c96b81461035d57806301ffc9a71461035457806306fdde031461034b5780630e2fee841461034257806316e023b31461033957806318160ddd1461033057806319c9d79b146103275780631d26fce61461031e5780631ead90b014610315578063217b22701461030c5780632a3654a414610303578063472dfcfb146102fa578063475a590d146102f157806349a6078d146102e8578063511b6952146102df57806354f6127f146102d65780636643a686146102cd57806366d003ac146102c45780636963d438146102bb57806370a08231146102b2578063715018a6146102a95780637165485d146102a0578063791790c9146102975780637e87632c1461028e5780637f23690c1461028557806386a10ddd1461027c5780638da5cb5b1461027357806395d89b411461026a5780639790242114610261578063a035b1fe14610258578063a3b261f21461024f578063a4d66daf14610246578063be9f0e6f1461023d578063d6c1407c14610234578063d91a61d01461022b578063db8c966314610222578063dedff9c614610219578063eb93406b14610210578063f2fde38b146102075763fc056acc0361000e57610202611c4f565b61000e565b50610202611b9d565b506102026119de565b50610202611956565b5061020261187c565b506102026117aa565b50610202611763565b50610202611673565b50610202611655565b506102026115da565b506102026115bb565b506102026114f6565b50610202611498565b5061020261146e565b50610202611317565b506102026112c0565b50610202611226565b506102026110ac565b5061020261108e565b50610202611041565b50610202611006565b50610202610fa0565b50610202610f70565b50610202610f43565b50610202610f23565b50610202610ebb565b50610202610dfa565b50610202610c13565b50610202610bdc565b50610202610abd565b50610202610a76565b50610202610a2b565b50610202610961565b5061020261071d565b50610202610605565b506102026105e2565b506102026105b8565b5061020261053f565b5061020261041a565b506102026103ed565b503461039857602036600319011261039857600435600052600c602052602060ff604060002054166040519015158152f35b600080fd5b6000526008602052604060002090565b6000526009602052604060002090565b600052600a602052604060002090565b600052600b602052604060002090565b600052600d602052604060002090565b503461039857602036600319011261039857600435600052600a6020526020604060002054604051908152f35b5034610398576020366003190112610398576004356001600160e01b03198116908181036103985761046f91631d138b8360e11b81149182159182610473575b50506040519115158252509081906020820190565b0390f35b909161049b575b50811561048b575b5038808061045a565b61049591506133a8565b38610482565b90915063a918fa6b60e01b81149081156104b8575b50903861047a565b6318a6a9a560e21b8114915081156104d2575b50386104b0565b6301ffc9a760e01b149050386104cb565b60005b8381106104f65750506000910152565b81810151838201526020016104e6565b9060209161051f815180928185528580860191016104e3565b601f01601f1916010190565b90602061053c928181520190610506565b90565b50346103985760003660031901126103985760008051602061361a833981519152600052600160205260405161046f906105a48161059d817f2a367ae1ac46d529739aa27ac74856f860e70af05d3642d18ba60fd5d32a069a610b29565b0382610699565b604051918291602083526020830190610506565b5034610398576000366003190112610398576006546040516001600160a01b039091168152602090f35b50346103985760403660031901126103985761046f6105a46024356004356134ec565b5034610398576000366003190112610398576020600754604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761065657604052565b61065e610624565b604052565b602081019081106001600160401b0382111761065657604052565b606081019081106001600160401b0382111761065657604052565b601f909101601f19168101906001600160401b0382119082101761065657604052565b6020906001600160401b0381116106d9575b601f01601f19160190565b6106e1610624565b6106ce565b9291926106f2826106bc565b916107006040519384610699565b829481845281830111610398578281602093846000960137010152565b5034610398576040366003190112610398576001600160401b036004356024358281116103985736602382011215610398576107639036906024816004013591016106e6565b9161078a61077083612249565b6001600160a01b038116331490811561086b575b50613276565b6000918252602090600d82526040832091845191821161085e575b6107b9826107b38554610aef565b8561210e565b80601f83116001146107f357508394829394926107e8575b50508160011b916000199060031b1c191617905580f35b0151905038806107d1565b90601f1983169561080985600052602060002090565b9286905b8882106108465750508360019596971061082d575b505050811b01905580f35b015160001960f88460031b161c19169055388080610822565b8060018596829496860151815501950193019061080d565b610866610624565b6107a5565b61087591506132ce565b38610784565b6020906001600160401b038111610894575b60051b0190565b61089c610624565b61088d565b81601f82011215610398578035916108b88361087b565b926108c66040519485610699565b808452602092838086019260051b820101928311610398578301905b8282106108f0575050505090565b813581529083019083016108e2565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109335750505050505090565b9091929394958480610951600193603f198682030187528a51610506565b9801930193019194939290610923565b5034610398576040366003190112610398576001600160401b03600435818111610398576109939036906004016108a1565b90602435908111610398576109ac9036906004016108a1565b908051825103610a19576109c08151611ca5565b9160005b8251811015610a0b57806109ef6109dd60019386611d06565b516109e88386611d06565b51906134ec565b6109f98287611d06565b52610a048186611d06565b50016109c4565b6040518061046f86826108ff565b6040516317d38eff60e11b8152600490fd5b5034610398576020366003190112610398576004356000526008602052602060406000205460e81b6040519062ffffff60e81b168152f35b6001600160a01b03909116815260200190565b5034610398576020366003190112610398576020610a95600435612249565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361039857565b5034610398576040366003190112610398576020610ae5610adc610aa7565b602435906123ec565b6040519015158152f35b90600182811c92168015610b1f575b6020831014610b0957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610afe565b9060009291805491610b3a83610aef565b918282526001938481169081600014610b9c5750600114610b5c575b50505050565b90919394506000526020928360002092846000945b838610610b88575050505001019038808080610b56565b805485870183015294019385908201610b71565b9294505050602093945060ff191683830152151560051b01019038808080610b56565b90610bda610bd39260405193848092610b29565b0383610699565b565b503461039857602036600319011261039857600435600052600d60205261046f61059d6105a4604060002060405192838092610b29565b50346103985760203660031901126103985761046f610c30610aa7565b610c43610c3e600754613049565b600755565b610d8860075491610c6e610c6184600052600c602052604060002090565b805460ff19166001179055565b6005610c7943612e14565b40604051610ca181610c9360208201948730918b88613073565b03601f198101835282610699565b519020610cf1600082901a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b9060e81c62ffffff19825416179055565b610d0f610d0a610d038360031a61300e565b60ff900490565b613057565b610d18866103ad565b55610d44610d3f610d03610d35610d2e896103ad565b5460021c90565b8460041a90613036565b613065565b610d4d866103bd565b55811a0680610d985750610d68610d63846103cd565b613119565b610d79610d74846103dd565b613136565b82610d82611de9565b916131b0565b6040519081529081906020820190565b60018103610db75750610db2610dad846103cd565b6130fd565b610d68565b60028103610dd15750610db2610dcc846103cd565b6130e2565b600303610de957610db2610de4846103cd565b6130c4565b610db2610df5846103cd565b6130a0565b50346103985760208060031936011261039857600435610e1981612703565b15610e7e5760005260058152610e326040600020612f38565b906040519181839283018184528251809152816040850193019160005b828110610e5e57505050500390f35b83516001600160a01b031685528695509381019392810192600101610e4f565b60249060405190635747cd1b60e11b82526004820152fd5b8015150361039857565b9080601f830112156103985781602061053c933591016106e6565b50346103985760a036600319011261039857610ed5610aa7565b6024356001600160a01b038116810361039857606435610ef481610e96565b608435926001600160401b03841161039857610f17610f21943690600401610ea0565b9260443591612427565b005b50346103985760203660031901126103985761046f6105a4600435611c86565b50346103985760203660031901126103985760043560005260096020526020604060002054604051908152f35b503461039857600036600319011261039857602060405173a81a6a910fed20374361b35c451a4a44f86ced468152f35b5034610398576020366003190112610398576001600160401b036004358181116103985736602382011215610398578060040135918211610398573660248360051b830101116103985761046f916024610ffa92016122bb565b604051918291826108ff565b5034610398576020366003190112610398576001600160a01b03611028610aa7565b1660005260046020526020604060002054604051908152f35b50346103985760008060031936011261108b5761105c612c76565b80546001600160a01b03198116825581906001600160a01b031660008051602061365a8339815191528280a380f35b80fd5b50346103985760003660031901126103985760206040516103ea8152f35b5034610398576020366003190112610398576020610ae56110cb610aa7565b6132ce565b81601f82011215610398578035916110e78361087b565b926110f56040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061111f575050505090565b81356001600160a01b0381168103610398578152908301908301611111565b81601f82011215610398578035916111558361087b565b926111636040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061118d575050505090565b838091833561119b81610e96565b81520191019061117f565b9080601f83011215610398578135906111be8261087b565b926111cc6040519485610699565b828452602092838086019160051b8301019280841161039857848301915b8483106111fa5750505050505090565b82356001600160401b03811161039857869161121b84848094890101610ea0565b8152019201916111ea565b50346103985760a03660031901126103985760046001600160401b0381358181116103985761125890369084016110d0565b906024358181116103985761127090369085016110d0565b6044358281116103985761128790369086016108a1565b906064358381116103985761129f903690870161113e565b9260843590811161039857610f21956112ba913691016111a6565b936125b0565b506040366003190112610398576024356001600160401b038111610398576112ec903690600401610ea0565b6112f4612c76565b3461130557610f2190600435611fa8565b60405163f36ba73760e01b8152600490fd5b503461039857606036600319011261039857611331610aa7565b602435906044356001600160401b03811161039857611354903690600401610ea0565b9061135e83612249565b6001600160a01b038181169133830361144f57508216801561143d5780821461142b576113a56113a18461139c886000526005602052604060002090565b612f87565b1590565b61140b57938061140692610f21967f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215604051806113e28a8261052b565b0390a46113f86040519485923360208501612396565b03601f198101845283610699565b612aaf565b6040516314ec4d6d60e31b81528061142787866004840161237b565b0390fd5b6040516344fed6b160e11b8152600490fd5b604051639577b8b360e01b8152600490fd5b85611427604051928392632d938f5160e11b8452339160048501612358565b5034610398576000366003190112610398576000546040516001600160a01b039091168152602090f35b50346103985760003660031901126103985760008051602061367a833981519152600052600160205260405161046f906105a48161059d817f83b322886c7b7e25779e5d38e06e005c9e7aba1e1267ce9210cf24e31833535a610b29565b5060403660031901126103985760046001600160401b0381358181116103985761152390369084016108a1565b906024359081116103985761153b90369084016111a6565b91611544612c76565b346115ac57815183510361159d5781511561158e575060005b8151811015610f21578061158861157660019385611d06565b516115818387611d06565b5190611fa8565b0161155d565b6040516397da5f9560e01b8152fd5b604051633bcc897960e01b8152fd5b60405163f36ba73760e01b8152fd5b5034610398576000366003190112610398576020600e54604051908152f35b503461039857602080600319360112610398576001600160a01b036115fd610aa7565b16600052600481526116126040600020612f38565b906040519181839283018184528251809152816040850193019160005b82811061163e57505050500390f35b83518552869550938101939281019260010161162f565b5034610398576000366003190112610398576020604051610e908152f35b50346103985760603660031901126103985760046001600160401b038135818111610398576116a590369084016108a1565b602435828111610398576116bc90369085016108a1565b91604435908111610398576116d490369085016111a6565b926116dd612c76565b8151835180911490811591611757575b5061174857815115611739575060005b8151811015610f21578061173361171660019385611d06565b516117218387611d06565b5161172c8489611d06565b51916128d3565b016116fd565b6040516380c9830560e01b8152fd5b6040516317d38eff60e11b8152fd5b905084511415386116ed565b5034610398576060366003190112610398576044356001600160401b03811161039857611797610f21913690600401610ea0565b61179f612c76565b6024356004356128d3565b50346103985760008060031936011261108b5761180d60048260018060a01b036117d8818354163314613276565b600654166040519283809263934118fb60e01b82525afa90811561186f575b8390849261184a575b50602081519101206134a6565b6000805160206136da83398151915261184460008051602061363a8339815191529283855260016020526105a48160408720612153565b0390a280f35b905061186891503d8085833e6118608183610699565b81019061341e565b9038611800565b611877612aa2565b6117f7565b503461039857608036600319011261039857611896610aa7565b602435604435916118a683610e96565b6064356001600160401b038111610398576118c5903690600401610ea0565b6118ce83612249565b936001600160a01b03808616903382900361191f575b841690811561143d571461142b576118ff8282868887612680565b61190557005b610f21936113f861140692604051958693602085016123c1565b84811633146118e45760405163760b5acd60e01b81523360048201526001600160a01b038816602482015260448101879052606490fd5b5034610398576020366003190112610398576004356001600160401b038111610398576119879036906004016108a1565b6119918151611ca5565b9060005b81518110156119d057806119b46119ae60019385611d06565b51611c86565b6119be8286611d06565b526119c98185611d06565b5001611995565b6040518061046f85826108ff565b5060008060031936011261108b5761046f906119ff610e9060075410612f9a565b611a29611a24611a1c600e54611a1781341015612fd5565b61301f565b6103e8900490565b600e55565b611a37610c3e600754613049565b610d8860075491611a55610c6184600052600c602052604060002090565b6005611a6043612e14565b40604051611a7b81610c936020820194309033908b88613073565b519020611ab881841a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b611aca610d0a610d038360031a61300e565b611ad3866103ad565b55611ae9610d3f610d03610d35610d2e896103ad565b611af2866103bd565b55811a0680611b4f5750611b08610d63846103cd565b611b14610d74846103dd565b611b26611b1f611de9565b84336131b0565b8080803473a81a6a910fed20374361b35c451a4a44f86ced465af1611b49611e1a565b50613157565b60018103611b695750611b64610dad846103cd565b611b08565b60028103611b7e5750611b64610dcc846103cd565b600303611b9157611b64610de4846103cd565b611b64610df5846103cd565b503461039857602036600319011261039857611bb7610aa7565b611bbf612c76565b6001600160a01b039081168015611bfb57600080546001600160a01b031981168317825590921660008051602061365a8339815191528380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461039857602036600319011261039857600435600052600b60205261046f61059d6105a4604060002060405192838092610b29565b600052600160205261059d61053c604060002060405192838092610b29565b90611caf8261087b565b611cbc6040519182610699565b8281528092611ccd601f199161087b565b019060005b828110611cde57505050565b806060602080938501015201611cd2565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015611d1b575b60051b010190565b611d23611cef565b611d13565b60043610611d395761053c90611e4a565b6044604051809263e5099ee360e01b825260206004830152806024830152806000848401376000828201840152601f01601f19168101030190fd5b503415611d8d576040516330fa4a2160e11b8152600490fd5b606460405163e5099ee360e01b8152602060048201526004602482015260006044820152fd5b908092918237016000815290565b9060349391816000823760609390931b6001600160601b031916920191825260148201520190565b60405190602082016001600160401b03811183821017611e0d575b60405260008252565b611e15610624565b611e04565b3d15611e45573d90611e2b826106bc565b91611e396040519384610699565b82523d6000602084013e565b606090565b60609063ffffffff60e01b6000351691611e9a611e95604051696773c5a04a6d4300884b60b11b60208201526000602a82015285602c82015260208152611e908161063b565b611f85565b611c86565b805160148114159081611f46575b50611f2157611eb690611f50565b901c918215611efd57506000918291604051611ede81610c9360208201943490339087611dc1565b519134905af1611eec611e1a565b9015611ef55790565b602081519101fd5b60405163bb370b2b60e01b81526001600160e01b0319919091166004820152602490fd5b6040516342bfe79f60e01b815260206004820152908190611427906024830190610506565b9050151538611ea8565b80516020909101516001600160601b0319808216939290919060148110611f7657505050565b60140360031b82901b16169150565b602081519101519060208110611f99575090565b6000199060200360031b1b1690565b907ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d82146120985760008051602061361a8339815191528203611ff7576040516385c169bd60e01b8152600490fd5b60008051602061367a833981519152820361201e57604051630eceab6760e31b8152600490fd5b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3820361205757604051634ef6d7fb60e01b8152600490fd5b612093816120876000805160206136da83398151915293612082866000526001602052604060002090565b612153565b6040519182918261052b565b0390a2565b604051631b32400560e11b8152600490fd5b9060031b600019811b9283911b169119161790565b916120cb9183546120aa565b9055565b8181106120da575050565b600081556001016120cf565b90601f81116120f3575050565b610bda91600052601f6020600020910160051c8101906120cf565b9190601f811161211d57505050565b610bda926000526020600020906020601f840160051c83019310612149575b601f0160051c01906120cf565b909150819061213c565b81519192916001600160401b038111612222575b61217b816121758454610aef565b8461210e565b602080601f83116001146121b75750819293946000926121ac575b50508160011b916000199060031b1c1916179055565b015190503880612196565b90601f198316956121cd85600052602060002090565b926000905b88821061220a575050836001959697106121f1575b505050811b019055565b015160001960f88460031b161c191690553880806121e7565b806001859682949686015181550195019301906121d2565b61222a610624565b612167565b6001600160a01b0316600090815260046020526040902090565b6000818152600360205260409020546001600160a01b0316908115610e7e575090565b91908110156122ae575b60051b81013590601e19813603018212156103985701803591906001600160401b038311610398576020018236038113610398579190565b6122b6611cef565b612276565b91906122c681611ca5565b92600091825b8181106122d95750505050565b83806122e683858761226c565b604093916122f8855180938193611db3565b0390305af490612306611e1a565b911561232d57509060019161231b8289611d06565b526123268188611d06565b50016122cc565b81519192911561233f57825160208401fd5b5163234eb81960e01b8152600481019190915260249150fd5b6001600160a01b0391821681526020810192909252909116604082015260600190565b6001600160a01b039091168152602081019190915260400190565b61053c939260809260018060a01b031682526020820152600160408201528160608201520190610506565b61053c939260809260018060a01b031682526020820152600060408201528160608201520190610506565b6001600160a01b03806123fe84612249565b16911690811491821561241057505090565b61053c925060005260056020526040600020612de8565b9092939161243581336123ec565b156125925761244381612249565b6001600160a01b038181169184821691828403612575578088169384156125635761246d86612249565b91821603612533575050926125298380610bda9997946113f8999761249561252e98876127e5565b6124a7836124a28861222f565b612e6b565b506124ba836124b58b61222f565b612d83565b506124f2896124d3856000526003602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040516000805160206136ba83398151915290806125128a8e3384612749565b0390a46040519788948592888633602087016127ab565b612b5a565b612bf6565b604051635a9c31d360e01b8152600481018690526001600160a01b03928316602482015291166044820152606490fd5b6040516324ecef4d60e01b8152600490fd5b604051632d938f5160e11b81528061142788888660048501612358565b60449060405190631294d2a960e01b82526004820152336024820152fd5b949390919285519383518514801590612675575b801561266a575b801561265f575b61264d5760005b8581106125ea575050505050509050565b8061264761260a6125fd6001948c611d06565b516001600160a01b031690565b6126176125fd848a611d06565b6126218487611d06565b5161263561262f868a611d06565b51151590565b91612640868b611d06565b5193612427565b016125d9565b6040516393a8311960e01b8152600490fd5b5082518514156125d2565b5081518514156125cb565b5080518514156125c4565b91939284600052600560205260406000209260018060a01b03906126a78282168096612e6b565b156126e45750906126df60008051602061369a8339815191529392604051938493151584526040602085015216956040830190610506565b0390a4565b6040516312a8c6a360e21b81529081906114279089906004840161237b565b6000908152600360205260409020546001600160a01b0316151590565b6001600160a01b0390911681526001602082015260606040820181905261053c92910190610506565b6001600160a01b039091168152901515602082015260606040820181905261053c92910190610506565b6001600160a01b0391821681526000602082015291166040820152606081019190915260a06080820181905261053c92910190610506565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260a06080820181905261053c92910190610506565b9060009080825260059160209383855260409182812094855495825b87811061281357505050505050505050565b8154156128a9575b8184528884205486516001600160a01b039182169161283982610663565b868252898752858c5261284e838a8920612e6b565b1561288e576001939260008051602061369a8339815191528d896128858e968e968e88805196879687528601521696830190610506565b0390a401612801565b88516312a8c6a360e21b8152806114278c866004840161237b565b6128b1611cef565b61281b565b9190604051926020840152604083015260408252610bda8261067e565b90916128df83836128b6565b805160208092012060005260019081815260406000209183519160018060401b0383116129f7575b61291b836129158654610aef565b8661210e565b80601f8411600114612975575091808061296595936000805160206135fa833981519152979560009361296a575b501b916000199060031b1c19161790556040519182918261052b565b0390a3565b860151925038612949565b90601f93929319831661298d86600052602060002090565b926000905b8282106129e057505091839161296596946000805160206135fa833981519152989694106129c7575b5050811b019055612087565b85015160001960f88460031b161c1916905538806129bb565b808785968294968c01518155019501930190612992565b6129ff610624565b612907565b81601f82011215610398578051612a1a816106bc565b92612a286040519485610699565b818452602082840101116103985761053c91602080850191016104e3565b906020828203126103985781516001600160401b0381116103985761053c9201612a04565b90604061053c927f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d81528160208201520190610506565b506040513d6000823e3d90fd5b612ab881612cce565b612ac0575050565b612b13600092918392604051948580948193631aed5a8560e21b83527f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f009706004840152604060248401526044830190610506565b03926001600160a01b03165af18015612b4d575b612b2e5750565b612b4a903d806000833e612b428183610699565b810190612a46565b50565b612b55612aa2565b612b27565b612b6381612cce565b612b6b575050565b612b13600092918392604051948580948193631aed5a8560e21b83527fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab006004840152604060248401526044830190610506565b612bc781612cce565b15612bf257604051631aed5a8560e21b8152916000918391829084908290612b139060048301612a6b565b5050565b9190612c0183612cce565b15612c2b5750612b136000928392604051948580948193631aed5a8560e21b835260048301612a6b565b905015612c355750565b803b15612c5957604051634349776d60e01b81529081906114279060048301610a63565b604051630317313760e01b81529081906114279060048301610a63565b6000546001600160a01b03163303612c8a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000602091604051838101906301ffc9a760e01b8252631aed5a8560e21b602482015260248152612cfe8161067e565b5191617530fa6000513d82612d1f575b5081612d18575090565b9050151590565b60201115915038612d0e565b600090602092604051848101916301ffc9a760e01b835263ffffffff60e01b16602482015260248152612cfe8161067e565b8054821015612d76575b60005260206000200190600090565b612d7e611cef565b612d67565b612d8d8282612de8565b612de1578082612dbd612db4600194548560401b811015612dd4575b858101855584612d5d565b819391546120aa565b905580549260005201602052604060002055600190565b612ddc610624565b612da9565b5050600090565b60019160005201602052604060002054151590565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211612e2357565b610bda612dfd565b8054908115612e555760001991820191612e458383612d5d565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001810191806000528260205260406000205492831515600014612f2f57612ebd612ecc936000958619808201828111612f22575b8354918201918211612f15575b808203612ed2575b505050612e2b565b90600052602052604060002090565b55600190565b612efc612ef691612ee6612f0c9487612d5d565b90549060031b1c92839187612d5d565b906120bf565b8590600052602052604060002090565b55388080612eb5565b612f1d612dfd565b612ead565b612f2a612dfd565b612ea0565b50505050600090565b9060405191828154918282526020928383019160005283600020936000905b828210612f6d57505050610bda92500383610699565b855484526001958601958895509381019390910190612f57565b61053c916001600160a01b031690612d83565b15612fa157565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15612fdc57565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b9081603702916037830403612e2357565b906103ea91828102928184041490151715612e2357565b81810292918115918404141715612e2357565b9060018201809211612e2357565b6023019081602311612e2357565b60b401908160b411612e2357565b9291606894918452602084015260018060601b0319809260601b16604084015260601b1660548201520190565b6130b36130ad8254610aef565b826120e6565b600c6579656c6c6f7760d01b019055565b6130d16130ad8254610aef565b600c65707572706c6560d01b019055565b6130ef6130ad8254610aef565b6006621c995960ea1b019055565b61310a6130ad8254610aef565b600863626c756560e01b019055565b6131266130ad8254610aef565b600a6433b932b2b760d91b019055565b6131436130ad8254610aef565b6012681b1d5adcdbdb985d5d60ba1b019055565b1561315e57565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b60019060001981146131a4570190565b6131ac612dfd565b0190565b909291906001600160a01b0381168015612563576131cd85612703565b61325d576131da85612703565b61325d5784610bda9495613258926131fb6131f6600254613194565b600255565b613208826124b58761222f565b50613221856124d3846000526003602052604060002090565b60006000805160206136ba833981519152604051806132418a3383612720565b0390a46113f8604051948592853360208601612773565b612bbe565b6040516334c7b51160e01b815260048101869052602490fd5b1561327d57565b60405162461bcd60e51b81526020600482015260146024820152731314d40e0e88139bdd08185d5d1a1bdc9a5e995960621b6044820152606490fd5b90816020910312610398575161053c81610e96565b6040516301ffc9a760e01b808252633a271fff60e01b60048301526001600160a01b0392909216916020918281602481875afa60009181613389575b506133185750505050600090565b61332457505050600090565b604051908152631aed5a8560e21b6004820152918190839060249082905afa91829160009361335a575b505061053c5750600090565b61337a929350803d10613382575b6133728183610699565b8101906132b9565b90388061334e565b503d613368565b6133a1919250843d8611613382576133728183610699565b903861330a565b6133e5611e95604051696773c5a04a6d4300884b60b11b60208201526000602a8201526301ffc9a760e01b602c82015260208152611e908161063b565b805160148114159081613414575b50611f215761340190611f50565b60601c908115612de15761053c91612d2b565b90501515386133f3565b9190916040818403126103985780516001600160401b039390848111610398578161344a918401612a04565b9360208301519081116103985761053c9201612a04565b9294916134819061053c979592855260c0602086015260c0850190610506565b9462ffffff60e81b1660408401526060830152608082015260a0818403910152610506565b6048610bda91939293604051948591650379abe3500160c51b602084015260288301526134dc81518092602086860191016104e3565b8101036028810185520183610699565b9060008051602061363a83398151915281036135c5575080600061351a61351561053c946103dd565b610bbf565b9161352e6135278261039d565b5460e81b90565b90613538816103ad565b5493613543826103bd565b5491613581613554613515836103cd565b6006549093906001600160a01b0316946040519889978896879663ad27274b60e01b885260048801613461565b03915afa9081156135b8575b60009081926135a35750602081519101206134a6565b9061186892503d8091833e6118608183610699565b6135c0612aa2565b61358d565b61053c91906135d3916128b6565b60208151910120600052600160205261059d61053c604060002060405192838092610b2956fea6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbbdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af19afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e02f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3cb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bfece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2a2646970667358221220facca20eb8e2ef9a16a8249853dd259e81beba0c461a5ea4dd10a578c3ba1a2c64736f6c63430008110033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ERC725Y_DataKeysValuesEmptyArray()": [
            {
              "details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
            }
          ],
          "ERC725Y_DataKeysValuesLengthMismatch()": [
            {
              "details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
            }
          ],
          "ERC725Y_MsgValueDisallowed()": [
            {
              "details": "Reverts when sending value to the {setData} or {setDataBatch} function."
            }
          ],
          "InvalidExtensionAddress(bytes)": [
            {
              "details": "reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)"
            }
          ],
          "InvalidFunctionSelector(bytes)": [
            {
              "details": "reverts when the contract is called with a function selector not valid (less than 4 bytes of data)"
            }
          ],
          "LSP4TokenNameNotEditable()": [
            {
              "details": "Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
            }
          ],
          "LSP4TokenSymbolNotEditable()": [
            {
              "details": "Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized."
            }
          ],
          "LSP4TokenTypeNotEditable()": [
            {
              "details": "Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized."
            }
          ],
          "LSP8BatchCallFailed(uint256)": [
            {
              "details": "Reverts when a batch call failed."
            }
          ],
          "LSP8CannotSendToAddressZero()": [
            {
              "details": "Reverts when trying to send token to the zero address."
            }
          ],
          "LSP8CannotUseAddressZeroAsOperator()": [
            {
              "details": "Reverts when trying to set the zero address as an operator."
            }
          ],
          "LSP8InvalidTransferBatch()": [
            {
              "details": "Reverts when the parameters used for `transferBatch` have different lengths."
            }
          ],
          "LSP8NonExistentTokenId(bytes32)": [
            {
              "details": "Reverts when `tokenId` has not been minted."
            }
          ],
          "LSP8NonExistingOperator(address,bytes32)": [
            {
              "details": "Reverts when `operator` is not an operator for the `tokenId`."
            }
          ],
          "LSP8NotTokenOperator(bytes32,address)": [
            {
              "details": "Reverts when `caller` is not an allowed operator for `tokenId`."
            }
          ],
          "LSP8NotTokenOwner(address,bytes32,address)": [
            {
              "details": "Reverts when `caller` is not the `tokenOwner` of the `tokenId`."
            }
          ],
          "LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)": [
            {
              "details": "Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`."
            }
          ],
          "LSP8NotifyTokenReceiverIsEOA(address)": [
            {
              "details": "Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`."
            }
          ],
          "LSP8OperatorAlreadyAuthorized(address,bytes32)": [
            {
              "details": "Reverts when `operator` is already authorized for the `tokenId`."
            }
          ],
          "LSP8RevokeOperatorNotAuthorized(address,address,bytes32)": [
            {
              "details": "Reverts when the call to revoke operator is not authorized."
            }
          ],
          "LSP8TokenContractCannotHoldValue()": [
            {
              "details": "Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension."
            }
          ],
          "LSP8TokenIdAlreadyMinted(bytes32)": [
            {
              "details": "Reverts when `tokenId` has already been minted."
            }
          ],
          "LSP8TokenIdFormatNotEditable()": [
            {
              "details": "Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed."
            }
          ],
          "LSP8TokenIdsDataEmptyArray()": [
            {
              "details": "Reverts when empty arrays is passed to the function"
            }
          ],
          "LSP8TokenIdsDataLengthMismatch()": [
            {
              "details": "Reverts when the length of the token IDs data arrays is not equal"
            }
          ],
          "LSP8TokenOwnerCannotBeOperator()": [
            {
              "details": "Reverts when trying to authorize or revoke the token's owner as an operator."
            }
          ],
          "LSP8TokenOwnerChanged(bytes32,address,address)": [
            {
              "details": "Reverts when the token owner changed inside the {_beforeTokenTransfer} hook."
            }
          ],
          "NoExtensionFoundForFunctionSelector(bytes4)": [
            {
              "details": "reverts when there is no extension for the function selector being called with"
            }
          ],
          "OwnableCannotSetZeroAddressAsOwner()": [
            {
              "details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it."
            }
          ]
        },
        "kind": "dev",
        "methods": {
          "authorizeOperator(address,bytes32,bytes)": {
            "details": "Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard",
            "params": {
              "operator": "The address to authorize as an operator.",
              "operatorNotificationData": "The data to notify the operator about via LSP1.",
              "tokenId": "The token ID operator has access to."
            }
          },
          "balanceOf(address)": {
            "details": "Get the number of token IDs owned by `tokenOwner`.",
            "params": {
              "tokenOwner": "The address to query     *"
            },
            "returns": {
              "_0": "The total number of token IDs that `tokenOwner` owns."
            }
          },
          "batchCalls(bytes[])": {
            "custom:info": "It's not possible to send value along the functions call due to the use of `delegatecall`.",
            "details": "Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.",
            "params": {
              "data": "An array of ABI encoded function calls to be called on the contract."
            },
            "returns": {
              "results": "An array of abi-encoded data returned by the functions executed."
            }
          },
          "getData(bytes32)": {
            "details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.",
            "params": {
              "dataKey": "The data key for which to retrieve the value."
            },
            "returns": {
              "dataValue": "The bytes value stored under the specified data key."
            }
          },
          "getDataBatch(bytes32[])": {
            "details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.",
            "params": {
              "dataKeys": "The array of keys which values to retrieve"
            },
            "returns": {
              "dataValues": "The array of data stored at multiple keys"
            }
          },
          "getDataBatchForTokenIds(bytes32[],bytes32[])": {
            "params": {
              "dataKeys": "An array of data keys corresponding to the token IDs.",
              "tokenIds": "An array of token IDs."
            },
            "returns": {
              "dataValues": "An array of data values for each pair of `tokenId` and `dataKey`."
            }
          },
          "getDataForTokenId(bytes32,bytes32)": {
            "params": {
              "dataKey": "The key for the data to retrieve.",
              "tokenId": "The unique identifier for a token."
            },
            "returns": {
              "dataValue": "The data value associated with the given `tokenId` and `dataKey`."
            }
          },
          "getOperatorsOf(bytes32)": {
            "details": "Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.",
            "params": {
              "tokenId": "The token ID to get the operators for."
            },
            "returns": {
              "_0": "An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist."
            }
          },
          "isOperatorFor(address,bytes32)": {
            "details": "Returns whether `operator` address is an operator for a given `tokenId`.",
            "params": {
              "operator": "The address to query operator status for.",
              "tokenId": "The token ID to check if `operator` is allowed to operate on."
            },
            "returns": {
              "_0": "`true` if `operator` is an operator for `tokenId`, `false` otherwise."
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "revokeOperator(address,bytes32,bool,bytes)": {
            "details": "Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.",
            "params": {
              "notify": "Boolean indicating whether to notify the operator or not",
              "operator": "The address to revoke as an operator.",
              "operatorNotificationData": "The data to notify the operator about via LSP1.",
              "tokenId": "The tokenId `operator` is revoked from operating on."
            }
          },
          "setData(bytes32,bytes)": {
            "custom:events": "{DataChanged} event.",
            "custom:requirements": "- SHOULD only be callable by the {owner}.",
            "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
            "details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
            "params": {
              "dataKey": "The data key for which to set a new value.",
              "dataValue": "The new bytes value to set."
            }
          },
          "setDataBatch(bytes32[],bytes[])": {
            "custom:events": "{DataChanged} event **for each data key/value pair set**.",
            "custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
            "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.",
            "details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
            "params": {
              "dataKeys": "An array of data keys to set bytes values for.",
              "dataValues": "An array of bytes values to set for each `dataKeys`."
            }
          },
          "setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": {
            "params": {
              "dataKeys": "An array of data keys corresponding to the token IDs.",
              "dataValues": "An array of values to set for the given data keys.",
              "tokenIds": "An array of token IDs."
            }
          },
          "setDataForTokenId(bytes32,bytes32,bytes)": {
            "params": {
              "dataKey": "The key for the data to set.",
              "dataValue": "The value to set for the given data key.",
              "tokenId": "The unique identifier for a token."
            }
          },
          "supportsInterface(bytes4)": {
            "details": "See {IERC165-supportsInterface}."
          },
          "tokenIdsOf(address)": {
            "details": "Returns the list of token IDs that the `tokenOwner` address owns.",
            "params": {
              "tokenOwner": "The address that we want to get the list of token IDs for."
            },
            "returns": {
              "_0": "An array of `bytes32[] tokenIds` owned by `tokenOwner`."
            }
          },
          "tokenOwnerOf(bytes32)": {
            "details": "Returns the address that owns a given `tokenId`.",
            "params": {
              "tokenId": "The token ID to query the owner for."
            },
            "returns": {
              "_0": "The owner address of the given `tokenId`."
            }
          },
          "totalSupply()": {
            "details": "Returns the number of existing tokens that have been minted in this contract.",
            "returns": {
              "_0": "The number of existing tokens."
            }
          },
          "transfer(address,address,bytes32,bool,bytes)": {
            "details": "Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.",
            "params": {
              "data": "Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.",
              "force": "When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.",
              "from": "The address that owns the given `tokenId`.",
              "to": "The address that will receive the `tokenId`.",
              "tokenId": "The token ID to transfer."
            }
          },
          "transferBatch(address[],address[],bytes32[],bool[],bytes[])": {
            "details": "Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.",
            "params": {
              "data": "Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.",
              "force": "When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.",
              "from": "An array of sending addresses.",
              "to": "An array of recipient addresses.",
              "tokenId": "An array of token IDs to transfer."
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "title": "LSP8LoogiesFixed",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "abi_decode_bytes_fromMemory": {
              "entryPoint": 4684,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes": {
              "entryPoint": 4567,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "copy_literal_to_memory_8031d7c868dca389fb4e96c3f4df5650d21c8966ab67d753610d01e72b8a0278": {
              "entryPoint": 4496,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 4530,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "finalize_allocation": {
              "entryPoint": 4460,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "finalize_allocation_18479": {
              "entryPoint": 4410,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun_transferOwnership": {
              "entryPoint": 4613,
              "id": 3721,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "linkReferences": {},
          "object": "6080604090808252346200113557806200807380380380916200002382856200116c565b83396020928391810103126200113557516001600160a01b03808216939190848203620011355782519162000058836200113a565b6012835271131d5adcdbd31bdbd9da595cc8119a5e195960721b8584015283519562000084876200113a565b6009875268098aa96989e8e8c92b60bb1b86880152620000a43362001205565b156200112457620000b59062001205565b620000bf62001190565b937feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c6000938185526001918284528686209888519260018060401b03998a851162001110578b54948686811c9616801562001105575b88871014620010f157601f95868111620010a9575b50878682116001146200103e579c818693928c9d9e9f6200018d9d9162001032575b50600019600383901b1c191690891b1790555b8b51807fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b29b8c9382620011d7565b0390a27fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af190818a528587528a8a20908051918d83116200101e5780548881811c9116801562001013575b8a82101462000fff579081888d94931162000fa7575b5089938d89821160011462000f4a57620002289495826200098f575b50600019600383901b1c1916908a1b1790555b8c5191829182620011d7565b0390a27f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275690818952848652898920908051918c831162000c605780548781811c9116801562000f3f575b8982101462000c41579081878c94931162000eea575b5088938c88821160011462000e9757620002c394958262000b72575b50600019600383901b1c191690891b1790555b8b5191829182620011d7565b0390a28751600285820152848152620002dc816200113a565b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb390818952848652898920908051918c831162000c605780548781811c9116801562000e8c575b8982101462000c41579081878c94931162000e37575b5088938c88821160011462000de4576200037294958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a2875187858201528481526200038a816200113a565b7ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d90818952848652898920908051918c831162000c605780548781811c9116801562000dd9575b8982101462000c41579081878c94931162000d84575b5088938c88821160011462000d31576200042094958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a267016345785d8a0000600e55875161369c808201908282108c83111762000a8457908291620049d78339039088f0801562000d2757851660018060a01b031960065416176006556200047462001190565b818852838552888820908051918b831162000a845780548681811c9116801562000d1c575b8882101462000a65579081868b94931162000cc7575b50879386811160011462000c745780620004eb94958d9162000a98575b50600019600383901b1c191690881b1790555b8a5191829182620011d7565b0390a28651610e9090818582015284815262000507816200113a565b7fa23ea79c706be4641bfd97c9afb5b71a552c5bc320930dbe09b3530ed76dee0f90818952848652898920908051918c831162000c605780548781811c9116801562000c55575b8982101462000c41579081878c94931162000bec575b5088938c88821160011462000b7e576200059d94958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a287519084820152838152620005b5816200113a565b7fd28c95357cf4c94d638a4f572d5d3df8d7e1415c8b650e747a219c559d1435c890818852838552888820908051918b831162000a845780548681811c9116801562000b67575b8882101462000a65579081868b94931162000b12575b50879386811160011462000aa457806200064c94958d9162000a985750600019600383901b1c191690881b1790558a5191829182620011d7565b0390a2865193828486015283855262000665856200113a565b7f6de85eaf5d982b4e5da00000d8c2f51c0e567ed9ec7b1f9ee90bb0b2839d168d808852838552888820958051968b881162000a845780548681811c9116801562000a79575b8882101462000a655791899183878d9796951162000a0a575b5088998781116001146200099b57908162000702939260049c89916200098f5750600019600383901b1c1916908a1b1790558c5191829182620011d7565b0390a26006541688519586809263934118fb60e01b82525afa93841562000985578690879562000916575b50604881856200077893519101208951968791650379abe3500160c51b8884015260288301526200076781518092898686019101620011b2565b81010360288101875201856200116c565b7f9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e95868152828452878120938551998a11620009025784548481811c91168015620008f7575b82821014620008e35780848c921162000899575b505080928a116001146200082f57509780928192620008129798999a9362000823575b501b916000199060031b1c19161790555b845191829182620011d7565b0390a25161372f9081620012a88239f35b860151925038620007f5565b9891601f1983169985835280832092905b8b82106200088157505082620008129798999a1062000867575b5050811b01905562000806565b85015160001960f88460031b161c1916905538806200085a565b808684958294958b0151815501940192019062000840565b86845284838520918482850160051c84019410620008d9575b0160051c019085905b828110620008cd57508b9150620007d2565b848155018590620008bb565b92508192620008b2565b634e487b7160e01b83526022600452602483fd5b90607f1690620007be565b634e487b7160e01b82526041600452602482fd5b9450503d8087863e6200092a81866200116c565b84018785820312620009815784518981116200097d57816200094e9187016200124c565b9484810151908a8211620009795762000778926048926200097092016200124c565b9591506200072d565b8880fd5b8780fd5b8680fd5b87513d88823e3d90fd5b90508301513862000209565b8187528987209a601f198216885b818110620009ee57509160049c8b92826200070297969510620009d4575b5050811b0190556200021c565b85015160001960f88460031b161c191690553880620009c7565b858301518e559c8b019c8f99508e9650918c01918c01620009a9565b9193949581935052878b2086808b0160051c8201928a8c1062000a5b575b8c94928e98979694928b920160051c01915b82811062000a4a575050620006c4565b9788558d978d95508a910162000a3a565b9250819262000a28565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620006ab565b634e487b7160e01b8a52604160045260248afd5b905083015138620004cc565b818c52888c2094889190601f1982168e5b8c82821062000af757505090826200064c9798921062000add575b5050811b019055620004df565b85015160001960f88460031b161c19169055388062000ad0565b878401518a5598909401978e97508b94928101920162000ab5565b90809293508b52878b208680860160051c8201928a871062000b5d575b9189918d969594930160051c01915b82811062000b4e57505062000612565b8d81558c955089910162000b3e565b9250819262000b2f565b90607f1690620005fc565b905083015138620002a4565b8281528a8120958a9291601f198316905b8d82821062000bd157505090826200059d9798921062000bb7575b5050811b019055620002b7565b85015160001960f88460031b161c19169055388062000baa565b878401518a5598909401978f97508c94928101920162000b8f565b90809293508c52888c208780860160051c8201928b871062000c37575b918a918e969594930160051c01915b82811062000c2857505062000564565b8e81558d95508a910162000c18565b9250819262000c09565b634e487b7160e01b8c52602260045260248cfd5b90607f16906200054e565b634e487b7160e01b8b52604160045260248bfd5b818c52888c2094889190601f1982168e5b8c82821062000cac5750509082620004eb9798921062000add575050811b019055620004df565b878401518a5598909401978e97508b94928101920162000c85565b90809293508b52878b208680860160051c8201928a871062000d12575b9189918d969594930160051c01915b82811062000d03575050620004af565b8d81558c955089910162000cf3565b9250819262000ce4565b90607f169062000499565b88513d89823e3d90fd5b8281528a8120958a9291601f198316905b8d82821062000d695750509082620004209798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000d42565b90809293508c52888c208780860160051c8201928b871062000dcf575b918a918e969594930160051c01915b82811062000dc0575050620003e7565b8e81558d95508a910162000db0565b9250819262000da1565b90607f1690620003d1565b8281528a8120958a9291601f198316905b8d82821062000e1c5750509082620003729798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000df5565b90809293508c52888c208780860160051c8201928b871062000e82575b918a918e969594930160051c01915b82811062000e7357505062000339565b8e81558d95508a910162000e63565b9250819262000e54565b90607f169062000323565b8281528a8120958a9291601f198316905b8d82821062000ecf5750509082620002c39798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000ea8565b90809293508c52888c208780860160051c8201928b871062000f35575b918a918e969594930160051c01915b82811062000f2657505062000288565b8e81558d95508a910162000f16565b9250819262000f07565b90607f169062000272565b8281528b8120958b9291601f198316908e5b82821062000f8257505090826200022897989210620009d4575050811b0190556200021c565b929597509386988684939598015181550194019201918e95939694918c938e62000f5c565b90809293508d52898d208880860160051c8201928c871062000ff5575b8e959493910160051c909101908a908f5b83821062000fe657505050620001ed565b81558e95508b91018f62000fd5565b9250819262000fc4565b634e487b7160e01b8d52602260045260248dfd5b90607f1690620001d7565b634e487b7160e01b8c52604160045260248cfd5b9050830151386200014c565b8d8b52888b2090601f1983168c5b818110620010935750926200018d9c9d9e9f928a92828a97961062001079575b5050811b0190556200015f565b85015160001960f88460031b161c1916905538806200106c565b858301518455928a0192918b01918b016200104c565b8d8b52888b208780840160051c8201928b8510620010e7575b0160051c019088905b828110620010db5750506200012a565b8c8155018890620010cb565b92508192620010c2565b634e487b7160e01b8a52602260045260248afd5b95607f169562000115565b634e487b7160e01b89526041600452602489fd5b83516306b620db60e21b8152600490fd5b600080fd5b604081019081106001600160401b038211176200115657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200115657604052565b604051906200119f826200113a565b60048252632936598960e21b6020830152565b60005b838110620011c65750506000910152565b8181015183820152602001620011b5565b60409160208252620011f98151809281602086015260208686019101620011b2565b601f01601f1916010190565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b81601f82011215620011355780516001600160401b03811162001156576040519262001283601f8301601f1916602001856200116c565b818452602082840101116200113557620012a49160208085019101620011b2565b9056fe60806040526004361015610033575b3615610026575b61001e36611d28565b602081519101f35b61002e611d74565b610015565b60003560e01c8062923f9e14610366578063017c96b81461035d57806301ffc9a71461035457806306fdde031461034b5780630e2fee841461034257806316e023b31461033957806318160ddd1461033057806319c9d79b146103275780631d26fce61461031e5780631ead90b014610315578063217b22701461030c5780632a3654a414610303578063472dfcfb146102fa578063475a590d146102f157806349a6078d146102e8578063511b6952146102df57806354f6127f146102d65780636643a686146102cd57806366d003ac146102c45780636963d438146102bb57806370a08231146102b2578063715018a6146102a95780637165485d146102a0578063791790c9146102975780637e87632c1461028e5780637f23690c1461028557806386a10ddd1461027c5780638da5cb5b1461027357806395d89b411461026a5780639790242114610261578063a035b1fe14610258578063a3b261f21461024f578063a4d66daf14610246578063be9f0e6f1461023d578063d6c1407c14610234578063d91a61d01461022b578063db8c966314610222578063dedff9c614610219578063eb93406b14610210578063f2fde38b146102075763fc056acc0361000e57610202611c4f565b61000e565b50610202611b9d565b506102026119de565b50610202611956565b5061020261187c565b506102026117aa565b50610202611763565b50610202611673565b50610202611655565b506102026115da565b506102026115bb565b506102026114f6565b50610202611498565b5061020261146e565b50610202611317565b506102026112c0565b50610202611226565b506102026110ac565b5061020261108e565b50610202611041565b50610202611006565b50610202610fa0565b50610202610f70565b50610202610f43565b50610202610f23565b50610202610ebb565b50610202610dfa565b50610202610c13565b50610202610bdc565b50610202610abd565b50610202610a76565b50610202610a2b565b50610202610961565b5061020261071d565b50610202610605565b506102026105e2565b506102026105b8565b5061020261053f565b5061020261041a565b506102026103ed565b503461039857602036600319011261039857600435600052600c602052602060ff604060002054166040519015158152f35b600080fd5b6000526008602052604060002090565b6000526009602052604060002090565b600052600a602052604060002090565b600052600b602052604060002090565b600052600d602052604060002090565b503461039857602036600319011261039857600435600052600a6020526020604060002054604051908152f35b5034610398576020366003190112610398576004356001600160e01b03198116908181036103985761046f91631d138b8360e11b81149182159182610473575b50506040519115158252509081906020820190565b0390f35b909161049b575b50811561048b575b5038808061045a565b61049591506133a8565b38610482565b90915063a918fa6b60e01b81149081156104b8575b50903861047a565b6318a6a9a560e21b8114915081156104d2575b50386104b0565b6301ffc9a760e01b149050386104cb565b60005b8381106104f65750506000910152565b81810151838201526020016104e6565b9060209161051f815180928185528580860191016104e3565b601f01601f1916010190565b90602061053c928181520190610506565b90565b50346103985760003660031901126103985760008051602061361a833981519152600052600160205260405161046f906105a48161059d817f2a367ae1ac46d529739aa27ac74856f860e70af05d3642d18ba60fd5d32a069a610b29565b0382610699565b604051918291602083526020830190610506565b5034610398576000366003190112610398576006546040516001600160a01b039091168152602090f35b50346103985760403660031901126103985761046f6105a46024356004356134ec565b5034610398576000366003190112610398576020600754604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761065657604052565b61065e610624565b604052565b602081019081106001600160401b0382111761065657604052565b606081019081106001600160401b0382111761065657604052565b601f909101601f19168101906001600160401b0382119082101761065657604052565b6020906001600160401b0381116106d9575b601f01601f19160190565b6106e1610624565b6106ce565b9291926106f2826106bc565b916107006040519384610699565b829481845281830111610398578281602093846000960137010152565b5034610398576040366003190112610398576001600160401b036004356024358281116103985736602382011215610398576107639036906024816004013591016106e6565b9161078a61077083612249565b6001600160a01b038116331490811561086b575b50613276565b6000918252602090600d82526040832091845191821161085e575b6107b9826107b38554610aef565b8561210e565b80601f83116001146107f357508394829394926107e8575b50508160011b916000199060031b1c191617905580f35b0151905038806107d1565b90601f1983169561080985600052602060002090565b9286905b8882106108465750508360019596971061082d575b505050811b01905580f35b015160001960f88460031b161c19169055388080610822565b8060018596829496860151815501950193019061080d565b610866610624565b6107a5565b61087591506132ce565b38610784565b6020906001600160401b038111610894575b60051b0190565b61089c610624565b61088d565b81601f82011215610398578035916108b88361087b565b926108c66040519485610699565b808452602092838086019260051b820101928311610398578301905b8282106108f0575050505090565b813581529083019083016108e2565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109335750505050505090565b9091929394958480610951600193603f198682030187528a51610506565b9801930193019194939290610923565b5034610398576040366003190112610398576001600160401b03600435818111610398576109939036906004016108a1565b90602435908111610398576109ac9036906004016108a1565b908051825103610a19576109c08151611ca5565b9160005b8251811015610a0b57806109ef6109dd60019386611d06565b516109e88386611d06565b51906134ec565b6109f98287611d06565b52610a048186611d06565b50016109c4565b6040518061046f86826108ff565b6040516317d38eff60e11b8152600490fd5b5034610398576020366003190112610398576004356000526008602052602060406000205460e81b6040519062ffffff60e81b168152f35b6001600160a01b03909116815260200190565b5034610398576020366003190112610398576020610a95600435612249565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361039857565b5034610398576040366003190112610398576020610ae5610adc610aa7565b602435906123ec565b6040519015158152f35b90600182811c92168015610b1f575b6020831014610b0957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610afe565b9060009291805491610b3a83610aef565b918282526001938481169081600014610b9c5750600114610b5c575b50505050565b90919394506000526020928360002092846000945b838610610b88575050505001019038808080610b56565b805485870183015294019385908201610b71565b9294505050602093945060ff191683830152151560051b01019038808080610b56565b90610bda610bd39260405193848092610b29565b0383610699565b565b503461039857602036600319011261039857600435600052600d60205261046f61059d6105a4604060002060405192838092610b29565b50346103985760203660031901126103985761046f610c30610aa7565b610c43610c3e600754613049565b600755565b610d8860075491610c6e610c6184600052600c602052604060002090565b805460ff19166001179055565b6005610c7943612e14565b40604051610ca181610c9360208201948730918b88613073565b03601f198101835282610699565b519020610cf1600082901a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b9060e81c62ffffff19825416179055565b610d0f610d0a610d038360031a61300e565b60ff900490565b613057565b610d18866103ad565b55610d44610d3f610d03610d35610d2e896103ad565b5460021c90565b8460041a90613036565b613065565b610d4d866103bd565b55811a0680610d985750610d68610d63846103cd565b613119565b610d79610d74846103dd565b613136565b82610d82611de9565b916131b0565b6040519081529081906020820190565b60018103610db75750610db2610dad846103cd565b6130fd565b610d68565b60028103610dd15750610db2610dcc846103cd565b6130e2565b600303610de957610db2610de4846103cd565b6130c4565b610db2610df5846103cd565b6130a0565b50346103985760208060031936011261039857600435610e1981612703565b15610e7e5760005260058152610e326040600020612f38565b906040519181839283018184528251809152816040850193019160005b828110610e5e57505050500390f35b83516001600160a01b031685528695509381019392810192600101610e4f565b60249060405190635747cd1b60e11b82526004820152fd5b8015150361039857565b9080601f830112156103985781602061053c933591016106e6565b50346103985760a036600319011261039857610ed5610aa7565b6024356001600160a01b038116810361039857606435610ef481610e96565b608435926001600160401b03841161039857610f17610f21943690600401610ea0565b9260443591612427565b005b50346103985760203660031901126103985761046f6105a4600435611c86565b50346103985760203660031901126103985760043560005260096020526020604060002054604051908152f35b503461039857600036600319011261039857602060405173a81a6a910fed20374361b35c451a4a44f86ced468152f35b5034610398576020366003190112610398576001600160401b036004358181116103985736602382011215610398578060040135918211610398573660248360051b830101116103985761046f916024610ffa92016122bb565b604051918291826108ff565b5034610398576020366003190112610398576001600160a01b03611028610aa7565b1660005260046020526020604060002054604051908152f35b50346103985760008060031936011261108b5761105c612c76565b80546001600160a01b03198116825581906001600160a01b031660008051602061365a8339815191528280a380f35b80fd5b50346103985760003660031901126103985760206040516103ea8152f35b5034610398576020366003190112610398576020610ae56110cb610aa7565b6132ce565b81601f82011215610398578035916110e78361087b565b926110f56040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061111f575050505090565b81356001600160a01b0381168103610398578152908301908301611111565b81601f82011215610398578035916111558361087b565b926111636040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061118d575050505090565b838091833561119b81610e96565b81520191019061117f565b9080601f83011215610398578135906111be8261087b565b926111cc6040519485610699565b828452602092838086019160051b8301019280841161039857848301915b8483106111fa5750505050505090565b82356001600160401b03811161039857869161121b84848094890101610ea0565b8152019201916111ea565b50346103985760a03660031901126103985760046001600160401b0381358181116103985761125890369084016110d0565b906024358181116103985761127090369085016110d0565b6044358281116103985761128790369086016108a1565b906064358381116103985761129f903690870161113e565b9260843590811161039857610f21956112ba913691016111a6565b936125b0565b506040366003190112610398576024356001600160401b038111610398576112ec903690600401610ea0565b6112f4612c76565b3461130557610f2190600435611fa8565b60405163f36ba73760e01b8152600490fd5b503461039857606036600319011261039857611331610aa7565b602435906044356001600160401b03811161039857611354903690600401610ea0565b9061135e83612249565b6001600160a01b038181169133830361144f57508216801561143d5780821461142b576113a56113a18461139c886000526005602052604060002090565b612f87565b1590565b61140b57938061140692610f21967f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215604051806113e28a8261052b565b0390a46113f86040519485923360208501612396565b03601f198101845283610699565b612aaf565b6040516314ec4d6d60e31b81528061142787866004840161237b565b0390fd5b6040516344fed6b160e11b8152600490fd5b604051639577b8b360e01b8152600490fd5b85611427604051928392632d938f5160e11b8452339160048501612358565b5034610398576000366003190112610398576000546040516001600160a01b039091168152602090f35b50346103985760003660031901126103985760008051602061367a833981519152600052600160205260405161046f906105a48161059d817f83b322886c7b7e25779e5d38e06e005c9e7aba1e1267ce9210cf24e31833535a610b29565b5060403660031901126103985760046001600160401b0381358181116103985761152390369084016108a1565b906024359081116103985761153b90369084016111a6565b91611544612c76565b346115ac57815183510361159d5781511561158e575060005b8151811015610f21578061158861157660019385611d06565b516115818387611d06565b5190611fa8565b0161155d565b6040516397da5f9560e01b8152fd5b604051633bcc897960e01b8152fd5b60405163f36ba73760e01b8152fd5b5034610398576000366003190112610398576020600e54604051908152f35b503461039857602080600319360112610398576001600160a01b036115fd610aa7565b16600052600481526116126040600020612f38565b906040519181839283018184528251809152816040850193019160005b82811061163e57505050500390f35b83518552869550938101939281019260010161162f565b5034610398576000366003190112610398576020604051610e908152f35b50346103985760603660031901126103985760046001600160401b038135818111610398576116a590369084016108a1565b602435828111610398576116bc90369085016108a1565b91604435908111610398576116d490369085016111a6565b926116dd612c76565b8151835180911490811591611757575b5061174857815115611739575060005b8151811015610f21578061173361171660019385611d06565b516117218387611d06565b5161172c8489611d06565b51916128d3565b016116fd565b6040516380c9830560e01b8152fd5b6040516317d38eff60e11b8152fd5b905084511415386116ed565b5034610398576060366003190112610398576044356001600160401b03811161039857611797610f21913690600401610ea0565b61179f612c76565b6024356004356128d3565b50346103985760008060031936011261108b5761180d60048260018060a01b036117d8818354163314613276565b600654166040519283809263934118fb60e01b82525afa90811561186f575b8390849261184a575b50602081519101206134a6565b6000805160206136da83398151915261184460008051602061363a8339815191529283855260016020526105a48160408720612153565b0390a280f35b905061186891503d8085833e6118608183610699565b81019061341e565b9038611800565b611877612aa2565b6117f7565b503461039857608036600319011261039857611896610aa7565b602435604435916118a683610e96565b6064356001600160401b038111610398576118c5903690600401610ea0565b6118ce83612249565b936001600160a01b03808616903382900361191f575b841690811561143d571461142b576118ff8282868887612680565b61190557005b610f21936113f861140692604051958693602085016123c1565b84811633146118e45760405163760b5acd60e01b81523360048201526001600160a01b038816602482015260448101879052606490fd5b5034610398576020366003190112610398576004356001600160401b038111610398576119879036906004016108a1565b6119918151611ca5565b9060005b81518110156119d057806119b46119ae60019385611d06565b51611c86565b6119be8286611d06565b526119c98185611d06565b5001611995565b6040518061046f85826108ff565b5060008060031936011261108b5761046f906119ff610e9060075410612f9a565b611a29611a24611a1c600e54611a1781341015612fd5565b61301f565b6103e8900490565b600e55565b611a37610c3e600754613049565b610d8860075491611a55610c6184600052600c602052604060002090565b6005611a6043612e14565b40604051611a7b81610c936020820194309033908b88613073565b519020611ab881841a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b611aca610d0a610d038360031a61300e565b611ad3866103ad565b55611ae9610d3f610d03610d35610d2e896103ad565b611af2866103bd565b55811a0680611b4f5750611b08610d63846103cd565b611b14610d74846103dd565b611b26611b1f611de9565b84336131b0565b8080803473a81a6a910fed20374361b35c451a4a44f86ced465af1611b49611e1a565b50613157565b60018103611b695750611b64610dad846103cd565b611b08565b60028103611b7e5750611b64610dcc846103cd565b600303611b9157611b64610de4846103cd565b611b64610df5846103cd565b503461039857602036600319011261039857611bb7610aa7565b611bbf612c76565b6001600160a01b039081168015611bfb57600080546001600160a01b031981168317825590921660008051602061365a8339815191528380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461039857602036600319011261039857600435600052600b60205261046f61059d6105a4604060002060405192838092610b29565b600052600160205261059d61053c604060002060405192838092610b29565b90611caf8261087b565b611cbc6040519182610699565b8281528092611ccd601f199161087b565b019060005b828110611cde57505050565b806060602080938501015201611cd2565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015611d1b575b60051b010190565b611d23611cef565b611d13565b60043610611d395761053c90611e4a565b6044604051809263e5099ee360e01b825260206004830152806024830152806000848401376000828201840152601f01601f19168101030190fd5b503415611d8d576040516330fa4a2160e11b8152600490fd5b606460405163e5099ee360e01b8152602060048201526004602482015260006044820152fd5b908092918237016000815290565b9060349391816000823760609390931b6001600160601b031916920191825260148201520190565b60405190602082016001600160401b03811183821017611e0d575b60405260008252565b611e15610624565b611e04565b3d15611e45573d90611e2b826106bc565b91611e396040519384610699565b82523d6000602084013e565b606090565b60609063ffffffff60e01b6000351691611e9a611e95604051696773c5a04a6d4300884b60b11b60208201526000602a82015285602c82015260208152611e908161063b565b611f85565b611c86565b805160148114159081611f46575b50611f2157611eb690611f50565b901c918215611efd57506000918291604051611ede81610c9360208201943490339087611dc1565b519134905af1611eec611e1a565b9015611ef55790565b602081519101fd5b60405163bb370b2b60e01b81526001600160e01b0319919091166004820152602490fd5b6040516342bfe79f60e01b815260206004820152908190611427906024830190610506565b9050151538611ea8565b80516020909101516001600160601b0319808216939290919060148110611f7657505050565b60140360031b82901b16169150565b602081519101519060208110611f99575090565b6000199060200360031b1b1690565b907ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d82146120985760008051602061361a8339815191528203611ff7576040516385c169bd60e01b8152600490fd5b60008051602061367a833981519152820361201e57604051630eceab6760e31b8152600490fd5b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3820361205757604051634ef6d7fb60e01b8152600490fd5b612093816120876000805160206136da83398151915293612082866000526001602052604060002090565b612153565b6040519182918261052b565b0390a2565b604051631b32400560e11b8152600490fd5b9060031b600019811b9283911b169119161790565b916120cb9183546120aa565b9055565b8181106120da575050565b600081556001016120cf565b90601f81116120f3575050565b610bda91600052601f6020600020910160051c8101906120cf565b9190601f811161211d57505050565b610bda926000526020600020906020601f840160051c83019310612149575b601f0160051c01906120cf565b909150819061213c565b81519192916001600160401b038111612222575b61217b816121758454610aef565b8461210e565b602080601f83116001146121b75750819293946000926121ac575b50508160011b916000199060031b1c1916179055565b015190503880612196565b90601f198316956121cd85600052602060002090565b926000905b88821061220a575050836001959697106121f1575b505050811b019055565b015160001960f88460031b161c191690553880806121e7565b806001859682949686015181550195019301906121d2565b61222a610624565b612167565b6001600160a01b0316600090815260046020526040902090565b6000818152600360205260409020546001600160a01b0316908115610e7e575090565b91908110156122ae575b60051b81013590601e19813603018212156103985701803591906001600160401b038311610398576020018236038113610398579190565b6122b6611cef565b612276565b91906122c681611ca5565b92600091825b8181106122d95750505050565b83806122e683858761226c565b604093916122f8855180938193611db3565b0390305af490612306611e1a565b911561232d57509060019161231b8289611d06565b526123268188611d06565b50016122cc565b81519192911561233f57825160208401fd5b5163234eb81960e01b8152600481019190915260249150fd5b6001600160a01b0391821681526020810192909252909116604082015260600190565b6001600160a01b039091168152602081019190915260400190565b61053c939260809260018060a01b031682526020820152600160408201528160608201520190610506565b61053c939260809260018060a01b031682526020820152600060408201528160608201520190610506565b6001600160a01b03806123fe84612249565b16911690811491821561241057505090565b61053c925060005260056020526040600020612de8565b9092939161243581336123ec565b156125925761244381612249565b6001600160a01b038181169184821691828403612575578088169384156125635761246d86612249565b91821603612533575050926125298380610bda9997946113f8999761249561252e98876127e5565b6124a7836124a28861222f565b612e6b565b506124ba836124b58b61222f565b612d83565b506124f2896124d3856000526003602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040516000805160206136ba83398151915290806125128a8e3384612749565b0390a46040519788948592888633602087016127ab565b612b5a565b612bf6565b604051635a9c31d360e01b8152600481018690526001600160a01b03928316602482015291166044820152606490fd5b6040516324ecef4d60e01b8152600490fd5b604051632d938f5160e11b81528061142788888660048501612358565b60449060405190631294d2a960e01b82526004820152336024820152fd5b949390919285519383518514801590612675575b801561266a575b801561265f575b61264d5760005b8581106125ea575050505050509050565b8061264761260a6125fd6001948c611d06565b516001600160a01b031690565b6126176125fd848a611d06565b6126218487611d06565b5161263561262f868a611d06565b51151590565b91612640868b611d06565b5193612427565b016125d9565b6040516393a8311960e01b8152600490fd5b5082518514156125d2565b5081518514156125cb565b5080518514156125c4565b91939284600052600560205260406000209260018060a01b03906126a78282168096612e6b565b156126e45750906126df60008051602061369a8339815191529392604051938493151584526040602085015216956040830190610506565b0390a4565b6040516312a8c6a360e21b81529081906114279089906004840161237b565b6000908152600360205260409020546001600160a01b0316151590565b6001600160a01b0390911681526001602082015260606040820181905261053c92910190610506565b6001600160a01b039091168152901515602082015260606040820181905261053c92910190610506565b6001600160a01b0391821681526000602082015291166040820152606081019190915260a06080820181905261053c92910190610506565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260a06080820181905261053c92910190610506565b9060009080825260059160209383855260409182812094855495825b87811061281357505050505050505050565b8154156128a9575b8184528884205486516001600160a01b039182169161283982610663565b868252898752858c5261284e838a8920612e6b565b1561288e576001939260008051602061369a8339815191528d896128858e968e968e88805196879687528601521696830190610506565b0390a401612801565b88516312a8c6a360e21b8152806114278c866004840161237b565b6128b1611cef565b61281b565b9190604051926020840152604083015260408252610bda8261067e565b90916128df83836128b6565b805160208092012060005260019081815260406000209183519160018060401b0383116129f7575b61291b836129158654610aef565b8661210e565b80601f8411600114612975575091808061296595936000805160206135fa833981519152979560009361296a575b501b916000199060031b1c19161790556040519182918261052b565b0390a3565b860151925038612949565b90601f93929319831661298d86600052602060002090565b926000905b8282106129e057505091839161296596946000805160206135fa833981519152989694106129c7575b5050811b019055612087565b85015160001960f88460031b161c1916905538806129bb565b808785968294968c01518155019501930190612992565b6129ff610624565b612907565b81601f82011215610398578051612a1a816106bc565b92612a286040519485610699565b818452602082840101116103985761053c91602080850191016104e3565b906020828203126103985781516001600160401b0381116103985761053c9201612a04565b90604061053c927f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d81528160208201520190610506565b506040513d6000823e3d90fd5b612ab881612cce565b612ac0575050565b612b13600092918392604051948580948193631aed5a8560e21b83527f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f009706004840152604060248401526044830190610506565b03926001600160a01b03165af18015612b4d575b612b2e5750565b612b4a903d806000833e612b428183610699565b810190612a46565b50565b612b55612aa2565b612b27565b612b6381612cce565b612b6b575050565b612b13600092918392604051948580948193631aed5a8560e21b83527fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab006004840152604060248401526044830190610506565b612bc781612cce565b15612bf257604051631aed5a8560e21b8152916000918391829084908290612b139060048301612a6b565b5050565b9190612c0183612cce565b15612c2b5750612b136000928392604051948580948193631aed5a8560e21b835260048301612a6b565b905015612c355750565b803b15612c5957604051634349776d60e01b81529081906114279060048301610a63565b604051630317313760e01b81529081906114279060048301610a63565b6000546001600160a01b03163303612c8a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000602091604051838101906301ffc9a760e01b8252631aed5a8560e21b602482015260248152612cfe8161067e565b5191617530fa6000513d82612d1f575b5081612d18575090565b9050151590565b60201115915038612d0e565b600090602092604051848101916301ffc9a760e01b835263ffffffff60e01b16602482015260248152612cfe8161067e565b8054821015612d76575b60005260206000200190600090565b612d7e611cef565b612d67565b612d8d8282612de8565b612de1578082612dbd612db4600194548560401b811015612dd4575b858101855584612d5d565b819391546120aa565b905580549260005201602052604060002055600190565b612ddc610624565b612da9565b5050600090565b60019160005201602052604060002054151590565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211612e2357565b610bda612dfd565b8054908115612e555760001991820191612e458383612d5d565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001810191806000528260205260406000205492831515600014612f2f57612ebd612ecc936000958619808201828111612f22575b8354918201918211612f15575b808203612ed2575b505050612e2b565b90600052602052604060002090565b55600190565b612efc612ef691612ee6612f0c9487612d5d565b90549060031b1c92839187612d5d565b906120bf565b8590600052602052604060002090565b55388080612eb5565b612f1d612dfd565b612ead565b612f2a612dfd565b612ea0565b50505050600090565b9060405191828154918282526020928383019160005283600020936000905b828210612f6d57505050610bda92500383610699565b855484526001958601958895509381019390910190612f57565b61053c916001600160a01b031690612d83565b15612fa157565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15612fdc57565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b9081603702916037830403612e2357565b906103ea91828102928184041490151715612e2357565b81810292918115918404141715612e2357565b9060018201809211612e2357565b6023019081602311612e2357565b60b401908160b411612e2357565b9291606894918452602084015260018060601b0319809260601b16604084015260601b1660548201520190565b6130b36130ad8254610aef565b826120e6565b600c6579656c6c6f7760d01b019055565b6130d16130ad8254610aef565b600c65707572706c6560d01b019055565b6130ef6130ad8254610aef565b6006621c995960ea1b019055565b61310a6130ad8254610aef565b600863626c756560e01b019055565b6131266130ad8254610aef565b600a6433b932b2b760d91b019055565b6131436130ad8254610aef565b6012681b1d5adcdbdb985d5d60ba1b019055565b1561315e57565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b60019060001981146131a4570190565b6131ac612dfd565b0190565b909291906001600160a01b0381168015612563576131cd85612703565b61325d576131da85612703565b61325d5784610bda9495613258926131fb6131f6600254613194565b600255565b613208826124b58761222f565b50613221856124d3846000526003602052604060002090565b60006000805160206136ba833981519152604051806132418a3383612720565b0390a46113f8604051948592853360208601612773565b612bbe565b6040516334c7b51160e01b815260048101869052602490fd5b1561327d57565b60405162461bcd60e51b81526020600482015260146024820152731314d40e0e88139bdd08185d5d1a1bdc9a5e995960621b6044820152606490fd5b90816020910312610398575161053c81610e96565b6040516301ffc9a760e01b808252633a271fff60e01b60048301526001600160a01b0392909216916020918281602481875afa60009181613389575b506133185750505050600090565b61332457505050600090565b604051908152631aed5a8560e21b6004820152918190839060249082905afa91829160009361335a575b505061053c5750600090565b61337a929350803d10613382575b6133728183610699565b8101906132b9565b90388061334e565b503d613368565b6133a1919250843d8611613382576133728183610699565b903861330a565b6133e5611e95604051696773c5a04a6d4300884b60b11b60208201526000602a8201526301ffc9a760e01b602c82015260208152611e908161063b565b805160148114159081613414575b50611f215761340190611f50565b60601c908115612de15761053c91612d2b565b90501515386133f3565b9190916040818403126103985780516001600160401b039390848111610398578161344a918401612a04565b9360208301519081116103985761053c9201612a04565b9294916134819061053c979592855260c0602086015260c0850190610506565b9462ffffff60e81b1660408401526060830152608082015260a0818403910152610506565b6048610bda91939293604051948591650379abe3500160c51b602084015260288301526134dc81518092602086860191016104e3565b8101036028810185520183610699565b9060008051602061363a83398151915281036135c5575080600061351a61351561053c946103dd565b610bbf565b9161352e6135278261039d565b5460e81b90565b90613538816103ad565b5493613543826103bd565b5491613581613554613515836103cd565b6006549093906001600160a01b0316946040519889978896879663ad27274b60e01b885260048801613461565b03915afa9081156135b8575b60009081926135a35750602081519101206134a6565b9061186892503d8091833e6118608183610699565b6135c0612aa2565b61358d565b61053c91906135d3916128b6565b60208151910120600052600160205261059d61053c604060002060405192838092610b2956fea6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbbdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af19afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e02f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3cb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bfece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2a2646970667358221220facca20eb8e2ef9a16a8249853dd259e81beba0c461a5ea4dd10a578c3ba1a2c64736f6c63430008110033604060808152346200113b576200001562001140565b906200002062001140565b603a81526020907f4d2032303020323030206d202d37302030206120373020353020302031203020828201527f31343020302061203730203530203020312030202d31343020300000000000008382015283526200007d62001140565b603a81527f4d2032303020323030206d202d36352030206120363520353520302031203020828201527f31333020302061203635203535203020312030202d31333020300000000000008382015281840152620000d962001140565b603a81527f4d2032303020323030206d202d37352030206120373520343520302031203020828201527f31353020302061203735203435203020312030202d313530203000000000000083820152828401526000908154936003948584558086106200111e575b508280528183209083905b86821062000ff6575050506200016062001140565b936200016b620011b6565b607181527f4d2031373020313830206d202d31352030206120313520313520302031203020838201527f333020302061203135203135203020312030202d33302030204d2032333020318582015260607f3830206d202d3135203020612031352031352030203120302033302030206120818301526080917003135203135203020312030202d3330203607c1b83820152875262000208620011b6565b607181527f4d2031373020313730206d202d31322030206120313220313820302031203020858201527f323420302061203132203138203020312030202d32342030204d203233302031878201527f3730206d202d3132203020612031322031382030203120302032342030206120828201527003132203138203020312030202d3234203607c1b8382015284880152620002a2620011b6565b607181527f4d2031373020313830206d202d31372030206120313720313320302031203020858201527f333420302061203137203133203020312030202d33342030204d203233302031878201527f3830206d202d3137203020612031372031332030203120302033342030206120828201527003137203133203020312030202d3334203607c1b8382015286880152600196875484895580851062000fd9575b508786528486209086905b85821062000ebb575050506200036362001140565b6200036d620011d6565b601b81527f4d20313630203232302051203230302032343020323430203232300000000000868201528152620003a2620011d6565b601b81527f4d203136302032323020512032303020323530203234302032323000000000008682015285820152620003d9620011d6565b601b81527f4d2031363020323235205120323030203233352032343020323235000000000086820152878201526002548460025580851062000e9d575b50600286528486209086905b85821062000d7f575050506200043762001140565b62000441620011b6565b606781527f4d2031373020313830206d202d35203020612035203520302031203020313020868201527f30206120352035203020312030202d31302030204d2032333020313830206d20888201527f2d352030206120352035203020312030203130203020612035203520302031208382015266030202d313020360cc1b848201528152620004cf620011b6565b606381527f4d2031373020313730206d202d34203020612034203620302031203020382030868201527f206120342036203020312030202d382030204d2032333020313730206d202d34888201527f203020612034203620302031203020382030206120342036203020312030202d838201526203820360ec1b84820152858201526200055b620011b6565b606381527f4d2031373020313830206d202d33203020612033203320302031203020362030868201527f206120332033203020312030202d362030204d2032333020313830206d202d33888201527f203020612033203320302031203020362030206120332033203020312030202d838201526203620360ec1b8482015287820152835484805580851062000d62575b508386528486209086905b85821062000c30575050506200060b62001176565b9262000616620011d6565b97600498898152631a19585960e21b87820152855262000635620011d6565b898152636579657360e01b878201528686015262000652620011d6565b6006815265707570696c7360d01b878201528886015262000672620011d6565b94600595868152640dadeeae8d60db1b8882015284820152899088905b8b821062000af957505050508592600894926200094a87936200087f8b62000aeb9c9d620007ae620006c062001196565b620006ca620011d6565b9b8b8d526433b932b2b760d91b9c8d8c8201528252620006e9620011d6565b9d8e52671cdd185b99185c9960c21b9d8e8c8201528b8301526200070c620011f6565b908152848201526200071d620011d6565b9a60079c8c8e809e52662361336536333560c81b8d8201528a84015262000743620011d6565b9b8d8d526611b3333333333360c91b9c8d828201528c8501528d62000767620011d6565b9e8f52660233030303030360cc1b9e8f90818482015260a08701526200078c620011d6565b9182528282015260c0850152620007a2620011d6565b928352820152620012dc565b8b8d620007ba62001196565b938d620007c6620011d6565b9385855263626c756560e01b9485828201528752620007e4620011d6565b916008835281830152860152620007fa620011f6565b9182528401528c661199b11c19331b60c91b62000816620011d6565b918d8352820152878401528c896200082d620011d6565b918d8352820152888401528c8a62000844620011d6565b918d835282015260a08401528c8a6200085c620011d6565b918d835282015260c084015262000872620011d6565b9182528c820152620012dc565b6200088962001196565b9062000894620011d6565b818152621c995960ea1b90818c8201528352620008b0620011d6565b600881528a8c8201528b8401528d620008c8620011f6565b908d8252840152620008d9620011d6565b8981526608d9598d0d0d0d60ca1b8c82015285840152620008f9620011d6565b898152878c820152868401526200090f620011d6565b898152888c82015260a084015262000926620011d6565b898152888c82015260c08401526200093d620011d6565b9182528a820152620012dc565b62000a1d6200095862001196565b62000962620011d6565b6006815265707572706c6560d01b90818b820152825262000982620011d6565b60088152898b8201528a83015262000999620011f6565b8b81528d830152620009aa620011d6565b888152662361383535663760c81b8b82015284830152620009ca620011d6565b888152868b82015285830152620009e0620011d6565b888152878b82015260a0830152620009f7620011d6565b888152878b82015260c083015262000a0e620011d6565b90600682528a820152620012dc565b62000a2762001196565b9762000a32620011d6565b96600688526579656c6c6f7760d01b97888a8201528a5262000a53620011d6565b906008825289820152888a015262000a6a620011f6565b9081528a89015262000a7b620011d6565b90858252662366616363313560c81b8883015288015262000a9b620011d6565b918483528683015286015262000ab0620011d6565b828152818582015260a086015262000ac7620011d6565b9182528382015260c084015262000add620011d6565b9160068352820152620012dc565b51611c2a908162001a728239f35b805180519091906001600160401b03811162000c1c5785918b918d62000b20885462001216565b908d601f9283811162000be1575b50508491831160011462000b71579085968362000b65575b5050600019828b1b1c191690841b1786555b019301910190916200068f565b01519050388062000b46565b90601f198316898352858320925b81811062000bbe575090869784889594931062000ba5575b505050811b01865562000b58565b0151600019838d1b60f8161c1916905538808062000b97565b9497939686929691938786015181550195019301928e94918a9693979462000b7f565b62000c0a918b84528784209085808801821c8301938a891062000c12575b01901c019062001253565b8d3862000b2e565b9350829362000bff565b50634e487b7160e01b8b5260418d5260248bfd5b805180519091906001600160401b03811162000d4e578b91899162000c56875462001216565b948c601f968588821162000d1e575b5050508c8496831160011462000cac5795829186979262000ca0575b5050600019828c1b1c191690841b1786555b01930191019091620005f6565b01519050388062000c81565b9095601f198316898352858320925b81811062000cfa575090869784889594931062000ce1575b505050811b01865562000c93565b0151600019838e1b60f8161c1916905538808062000cd3565b9497939686929691938786015181550195019301928f95929693918d959262000cbb565b828b62000d45945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000c65565b634e487b7160e01b8a52604160045260248afd5b84875285872062000d789181019086016200126c565b38620005eb565b805180519091906001600160401b03811162000d4e578b91899162000da5875462001216565b948c601f968588821162000e6d575b5050508c8496831160011462000dfb5795829186979262000def575b5050600019828c1b1c191690841b1786555b0193019101909162000422565b01519050388062000dd0565b9095601f198316898352858320925b81811062000e49575090869784889594931062000e30575b505050811b01865562000de2565b0151600019838e1b60f8161c1916905538808062000e22565b9497939686929691938786015181550195019301928f95929693918d959262000e0a565b828b62000e94945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000db4565b6002875285872062000eb49181019086016200126c565b3862000416565b805180519091906001600160401b03811162000d4e578b91899162000ee1875462001216565b948c601f968588821162000fa9575b5050508c8496831160011462000f375795829186979262000f2b575b5050600019828c1b1c191690841b1786555b019301910190916200034e565b01519050388062000f0c565b9095601f198316898352858320925b81811062000f85575090869784889594931062000f6c575b505050811b01865562000f1e565b0151600019838e1b60f8161c1916905538808062000f5e565b9497939686929691938786015181550195019301928f95929693918d959262000f46565b828b62000fd0945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000ef0565b88875285872062000fef9181019086016200126c565b3862000343565b80518051906001600160401b0382116200110a5790859162001019865462001216565b90601f91828111620010da575b50839183116001146200106f579180600195928695948b9262001063575b5050600019828d1b1c191690841b1786555b019301910190916200014b565b01519050388062001044565b8689528389209190601f1984168a5b818110620010c15750916001969391858897969410620010a8575b505050831b8301865562001056565b0151600019838e1b60f8161c1916905538808062001099565b8284015185558a9660019095019493840193016200107e565b6200110390888b52858b20600585808801821c83019389891062000c125701901c019062001253565b3862001026565b634e487b7160e01b87526041600452602487fd5b838052828420620011349181019087016200126c565b3862000140565b600080fd5b60405190606082016001600160401b038111838210176200116057604052565b634e487b7160e01b600052604160045260246000fd5b60405190608082016001600160401b038111838210176200116057604052565b6040519060e082016001600160401b038111838210176200116057604052565b6040519060a082016001600160401b038111838210176200116057604052565b60408051919082016001600160401b038111838210176200116057604052565b60405190602082016001600160401b038111838210176200116057604052565b90600182811c9216801562001248575b60208310146200123257565b634e487b7160e01b600052602260045260246000fd5b91607f169162001226565b8181106200125f575050565b6000815560010162001253565b81811062001278575050565b80620012876001925462001216565b8062001296575b50016200126c565b601f8082118414620012b0575050600081555b386200128e565b620012d060009284845285602093848620920160051c8201910162001253565b812081835555620012a9565b815190602091828401519260408501519260608601519560808101519060c060a0820151910151916200130e62001176565b98895284890152604088015260608701526200132962001176565b928352818301948552604083019384526060830195865281604051828193519060005b82811062001a5b5750508101600981520301902091519081519360018060401b039485811162001160578062001383865462001216565b94601f9586811162001a29575b508490868311600114620019bf57600092620019b3575b50508160011b916000199060031b1c19161784555b600195868501905180519087821162001160578190620013dd845462001216565b87811162001981575b50859087831160011462001919576000926200190d575b5050600019600383901b1c191690881b1790555b5180516002850191868211620011605781906200142f845462001216565b868111620018db575b508490868311600114620018735760009262001867575b5050600019600383901b1c191690871b1790555b60039283810196519687518051908782116200116057819062001487845462001216565b87811162001835575b508590878311600114620017ce57600092620017c2575b505060001982881b1c191690881b1790555b600481018288015180519087821162001160578190620014da845462001216565b87811162001790575b50859087831160011462001729576000926200171d575b505060001982881b1c191690881b1790555b60058101604088015180519087821162001160576200152c835462001216565b868111620016eb575b5084908683116001146200167957918060069492606096946000926200166d575b5050600019828a1b1c1916908a1b1790555b01960151908151948511620011605762001583875462001216565b83811162001630575b5080928511600114620015c65750938394918492600095620015ba575b50501b92600019911b1c1916179055565b015193503880620015a9565b92919084601f1981168860005285600020956000905b89838310620016155750505010620015fa575b50505050811b019055565b01519060f884600019921b161c1916905538808080620015ef565b858701518955909701969485019488935090810190620015dc565b6200165c9088600052826000208580890160051c820192858a1062001663575b0160051c019062001253565b386200158c565b9250819262001650565b01519050388062001556565b899291601f1983169185600052876000209260005b89828210620016d45750509160609795939185600698969410620016bb575b505050811b01905562001568565b0151600019838c1b60f8161c19169055388080620016ad565b8385015186558e979095019493840193016200168e565b620017169084600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001535565b015190503880620014fa565b908a9350601f1983169185600052876000209260005b8982821062001779575050841162001760575b505050811b0190556200150c565b0151600019838a1b60f8161c1916905538808062001752565b8385015186558e979095019493840193016200173f565b620017bb9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620014e3565b015190503880620014a7565b908a9350601f1983169185600052876000209260005b898282106200181e575050841162001805575b505050811b019055620014b9565b0151600019838a1b60f8161c19169055388080620017f7565b8385015186558e97909501949384019301620017e4565b620018609085600052876000208980860160051c8201928a871062001663570160051c019062001253565b3862001490565b0151905038806200144f565b90899350601f1983169185600052866000209260005b88828210620018c45750508411620018aa575b505050811b01905562001463565b015160001960f88460031b161c191690553880806200189c565b8385015186558d9790950194938401930162001889565b620019069085600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001438565b015190503880620013fd565b908a9350601f1983169185600052876000209260005b898282106200196a575050841162001950575b505050811b01905562001411565b015160001960f88460031b161c1916905538808062001942565b8385015186558e979095019493840193016200192f565b620019ac9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620013e6565b015190503880620013a7565b60008881528681209350601f198516905b8782821062001a12575050908460019594939210620019f8575b505050811b018455620013bc565b015160001960f88460031b161c19169055388080620019ea565b6001859682939686015181550195019301620019d0565b62001a549088600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001390565b818101850151868201528694869450016200134c56fe6080604052600436101561001257600080fd5b60003560e01c806380a6dfa014611375578063934118fb14610cfe578063ad27274b146100915763c65eb1801461004857600080fd5b3461008c57602036600319011261008c57600435600052600860205261008861007460406000206115be565b6040519182916020835260208301906116b2565b0390f35b600080fd5b3461008c5760c036600319011261008c576001600160401b0360243581811161008c576100c290369060040161151a565b604435916001600160e81b03198316830361008c5760a43590811161008c576100ef90369060040161151a565b906100f8611a65565b60405193610105856114a6565b600685526020368187013760005b60038110610c6d5750508151159050610c66575b604051602081835161013c8183858801611561565b81016009815203019020606061018d60036040519361015a8561148b565b610163816115be565b8552610171600182016115be565b6020860152610182600282016115be565b604086015201611664565b9101908152600360ff6040516020810190600435825260006040820152602181526101b7816114c1565b5190201606600360ff60405160208101906004358252600160f81b6040820152602181526101e4816114c1565b5190201606600360ff60405160208101906004358252600160f91b604082015260218152610211816114c1565b5190201606600360ff604051602081019060043582528360f81b60408201526021815261023d816114c1565b519020160692600054811015610c50576000805261027c907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016115be565b9351908151936060830151956040602085015194015194600154811015610c5057600160005260206000200191600354811015610c5057600360005260206000200192600254811015610c505760026000526102f9907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016115be565b9460405197889760208901600080516020611bb58339815191529052604089017f30302f737667222076696577426f783d22302030203430302034303022207769905276323a341e911a181811103432b4b3b43a1e911a1818111f60491b60608a015260778901661e39ba3cb6329f60c91b9052607e89016a173432b0b23db334b6361d60a91b90528051908160898b01916020019161039892611561565b880191671db9ba3937b5b29d60c11b806089850152825160208401948160918201906103c49188611561565b0197723b7374726f6b652d77696474683a3370783b7d60681b9889609182015260a481016a1732bcb2b9bdb334b6361d60a91b90528151918260af8301916020019161040f92611561565b019060af8201528251908160b78201906104299187611561565b0160b78101723b7374726f6b652d77696474683a3270783b7d60681b905260ca81016c17383ab834b639bdb334b6361d60991b90528151918260d78301916020019161047492611561565b019060d782016d3b7374726f6b653a6e6f6e653b7d60901b905260e58201771736b7baba343db334b6361d3737b7329db9ba3937b5b29d60411b905251918260fd83016104c092611561565b0160fd810194909452671e17b9ba3cb6329f60c11b6101108501527f3c726563742077696474683d2234303022206865696768743d223430302220666101188501526e34b6361e911198181818181811179f60891b610138850152681e3830ba3410321e9160b91b6101478501819052815190946101509261054a90839085840190602001611561565b01906f111031b630b9b99e913432b0b211179f60811b908201528361016082015261016901610578916119e2565b6f111031b630b9b99e9132bcb2b991179f60811b81528260108201526019016105a0916119e2565b9071111031b630b9b99e91383ab834b63991179f60711b8252601282015281519182601b830191602001916105d492611561565b70111031b630b9b99e9136b7baba3411179f60791b601b92909101918201527f3c7465787420783d223230302220793d223238302220666f6e742d66616d696c602c8201527f793d22417269616c2220666f6e742d73697a653d223136222066696c6c3d2223604c8201527f6666666666662220746578742d616e63686f723d226d6964646c65223e000000606c820152845190610679826089830160208901611561565b0160898101661e17ba32bc3a1f60c91b905260908101651e17b9bb339f60d11b9052036076810182526096016106af90826114dc565b6106b890611731565b916040518093602082017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b905280519081603a840191602001916106f892611561565b810103601a81018452603a0161070e90846114dc565b82516020840120936107216004356118a5565b93604051809560208201674c6f6f676965202360c01b90528051908160288401916020019161074f92611561565b81010360088101865260280161076590866114dc565b60643595610772876118a5565b9660843591610780836118a5565b98604051998a91602083017954686973204c6f6f6769652069732074686520636f6c6f72202360301b90528751603a84018160208b01916107c092611561565b8301603a8101750103bb4ba3410309031b43ab13134b732b9b99037b3160551b9052815191826050830191602001916107f892611561565b01605081017401030b7321036b7baba34103632b733ba341037b31605d1b90528151918260658301916020019161082e92611561565b0160658101601760f91b905203604681018a5260660161084e908a6114dc565b61085790611ab1565b90610861906118a5565b9161086b906118a5565b926040519889987a3d912629a81a26b2ba30b230ba30911d103d913730b6b2911d101160291b60208b015280519081603b8c0191602001916108ac92611561565b8901711116113232b9b1b934b83a34b7b7111d101160711b603b82015281519182604d830191602001916108df92611561565b7f222c226c696e6b73223a205b7b227469746c65223a2257656273697465222c22604d92909101918201527f75726c223a2268747470733a2f2f6c756b736f6c6f6f676965732e7665726365606d820152721b0b985c1c089f574b089a58dbdb888e96d74b606a1b608d8201527f22696d61676573223a205b5b7b227769647468223a203430302c22686569676860a0820152671d088e880d0c0c0b60c21b60c082015267113ab936111d101160c11b60c88201528151916109aa90839060d0840190602001611561565b0160d081017f222c22766572696669636174696f6e223a207b226d6574686f64223a20226b6590527831b1b0b5991a9b14313cba32b9949116113230ba30911d101160391b60f082015281519061010992828483019160200191610a0d92611561565b65089f5f57574b60d21b9101918201526d2261747472696275746573223a5b60901b61010f820152787b226b6579223a22636f6c6f72222c2276616c7565223a222360381b61011d820152835161013694909190610a7390839087840190602001611561565b72088b089d1e5c19488e889cdd1c9a5b99c89f4b606a1b91019384018190527b3d9135b2bc911d1131b43ab13134b732b9b99116113b30b63ab2911d60211b6101498501528151909361016592610ad290839085840190602001611561565b01710b089d1e5c19488e889b9d5b58995c889f4b60721b809282015261017781017f7b226b6579223a226d6f7574684c656e677468222c2276616c7565223a000000905282519061019493828583019160200191610b2f92611561565b01918201527a3d9135b2bc911d113ab9b2b93730b6b29116113b30b63ab2911d1160291b6101a68201528251906101c193828583019160200191610b7292611561565b0191820152763d9135b2bc911d113a3cb8329116113b30b63ab2911d1160491b6101d48201528151906101eb92828483019160200191610bb192611561565b019071222c2274797065223a22737472696e67227d60701b908201526101fd8101625d7d7d60e81b9052036101e08101825261020001610bf190826114dc565b610bfa81611731565b604051809160208201600080516020611bd5833981519152905280519081603d84019160200191610c2a92611561565b810103601d81018252603d01610c4090826114dc565b60405191829161008891836116d7565b634e487b7160e01b600052603260045260246000fd5b5081610127565b81811a906001600160f81b031980610c8c600485901c60ff1687611a91565b5116928260011b9383850460021484151715610ce857610cbe91600f9160001a610cb6878d611a91565b531686611a91565b51169160018101809111610ce857610cdd610ce39360001a9189611a91565b53611aa2565b610113565b634e487b7160e01b600052601160045260246000fd5b3461008c57600036600319011261008c576040516101a08101906001600160401b0382118183101761135f5761134091604052611350603d61016480845261130f6102d5610efa610ef4602094858901600080516020611bb583398151915281527f30302f737667222077696474683d2234303022206865696768743d223430302260408b01527f2076696577426f783d223020302034303020343030223e3c726563742077696460608b01527f74683d2234303022206865696768743d22343030222066696c6c3d222330303060808b01527f222f3e3c7465787420783d223230302220793d223138302220666f6e742d666160a08b01527f6d696c793d22417269616c2220666f6e742d73697a653d223430222066696c6c60c08b01527f3d22236666662220746578742d616e63686f723d226d6964646c65223e4c756b60e08b01527f736f4c6f6f676965733c2f746578743e3c7465787420783d223230302220793d6101008b01527f223233302220666f6e742d66616d696c793d22417269616c2220666f6e742d736101208b01527f697a653d223230222066696c6c3d22233066302220746578742d616e63686f726101408b01527f3d226d6964646c65223e46697865642045646974696f6e3c2f746578743e3c2f6101608b01526339bb339f60e11b6101808b01522097611731565b96611ab1565b604051707b224c5350344d65746164617461223a7b60781b858201527b089b985b59488e88931d5adcdbd31bdbd9da595cc8119a5e1959088b60221b60318201527f226465736372697074696f6e223a224c756b736f4c6f6f676965732061726520604d8201527f4c554b534f205374616e64617264204c535038204e4654732077697468206120606d8201527f736d696c65203a29204f6e6c792033373238204c756b736f4c6f6f6769657320608d8201527f617661696c61626c65206f6e206120707269636520637572766520696e63726560ad8201527f6173696e6720302e322520776974682065616368206e6577206d696e742e205460cd8201527f6869732066697865642076657273696f6e2073686f77732070726f706572207460ed8201527f6f6b656e206174747269627574657320616e64205356472072656e646572696e61010d8201526319cb888b60e21b61012d8201527f226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275726c6101318201527f223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c2e616101518201527f7070227d2c7b227469746c65223a2254776974746572222c2275726c223a22686101718201527f747470733a2f2f747769747465722e636f6d2f6c756b736f4c6f6f6769657322610191820152621f574b60ea1b6101b18201526b22696d61676573223a5b5b7b60a01b6101b48201526b089dda591d1a088e8d0c0c0b60a21b6101c08201526c089a195a59da1d088e8d0c0c0b609a1b6101cc8201527f2275726c223a22646174613a696d6167652f7376672b786d6c3b6261736536346101d9820152600b60fa1b6101f9820152875190978892916101fa9161118e908290848701908a01611561565b83019061088b60f21b908201527f22766572696669636174696f6e223a7b226d6574686f64223a226b656363616b6101fc82015273191a9b14313cba32b9949116113230ba30911d1160611b61021c8201528151906111f68261023094898685019101611561565b61227d60f01b910191820152631f57574b60e21b6102328201526d2261747472696275746573223a5b60901b6102368201527f7b226b6579223a2274797065222c2276616c7565223a22636f6c6c656374696f610244820152731b888b089d1e5c19488e889cdd1c9a5b99c89f4b60621b6102648201527f7b226b6579223a226c696d6974222c2276616c7565223a333732382c227479706102788201526c19488e889b9d5b58995c889f4b609a1b6102988201527f7b226b6579223a226375727665222c2276616c7565223a3130302e322c2274796102a58201526c7065223a226e756d626572227d60981b6102c5820152605d60f81b6102d2820152617d7d60f01b6102d3820152036102b58101875201856114dc565b61131884611731565b6040519582600080516020611bd5833981519152889485015282519283918686019101611561565b810103601d8101855201836114dc565b610088604051928392836116d7565b634e487b7160e01b600052604160045260246000fd5b3461008c5760208060031936011261008c57600435906001600160401b03821161008c576100886113c4826113b161142095369060040161151a565b8160405193828580945193849201611561565b810160098152030190206113d7816115be565b92606061147a61146861143b6113ef600187016115be565b9561142d61140b6003611404600285016115be565b9301611664565b976040519b8c9b60808d5260808d01906116b2565b908b8203898d01526116b2565b9089820360408b01526116b2565b938785038489015261145686516080875260808701906116b2565b908087015190868303908701526116b2565b604085015184820360408601526116b2565b9201519060608184039101526116b2565b608081019081106001600160401b0382111761135f57604052565b604081019081106001600160401b0382111761135f57604052565b606081019081106001600160401b0382111761135f57604052565b601f909101601f19168101906001600160401b0382119082101761135f57604052565b6001600160401b03811161135f57601f01601f191660200190565b81601f8201121561008c57803590611531826114ff565b9261153f60405194856114dc565b8284526020838301011161008c57816000926020809301838601378301015290565b60005b8381106115745750506000910152565b8181015183820152602001611564565b90600182811c921680156115b4575b602083101461159e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611593565b90604051918260008254926115d284611584565b90818452600194858116908160001461164157506001146115fe575b50506115fc925003836114dc565b565b9093915060005260209081600020936000915b8183106116295750506115fc935082010138806115ee565b85548884018501529485019487945091830191611611565b9150506115fc94506020925060ff191682840152151560051b82010138806115ee565b906040516116718161148b565b60606116ad60038395611683816115be565b8552611691600182016115be565b60208601526116a2600282016115be565b6040860152016115be565b910152565b906020916116cb81518092818552858086019101611561565b601f01601f1916010190565b90916116ee6116fc936040845260408401906116b2565b9160208184039101526116b2565b90565b90611709826114ff565b61171660405191826114dc565b8281528092611727601f19916114ff565b0190602036910137565b8051156118815760405190606082016001600160401b0381118382101761135f57604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051600291828201809211610ce8576003918290046001600160fe1b0381168103610ce8576117d7908495941b6116ff565b936020850193829183518401906020820192835194600085525b83811061183057505050505251068060011461181d57600214611812575090565b603d90600019015390565b50603d9081600019820153600119015390565b87600491999293949901918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518982015301979291906117f1565b50604051602081016001600160401b0381118282101761135f576040526000815290565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b808210156119d4575b506904ee2d6d415b85acef8160201b808310156119c5575b50662386f26fc10000808310156119b6575b506305f5e100808310156119a7575b5061271080831015611998575b506064821015611988575b600a8092101561197e575b6001908160216119368287016116ff565b95860101905b611948575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156119795791908261193c565b611941565b9160010191611925565b919060646002910491019161191a565b6004919392049101913861190f565b60089193920491019138611902565b601091939204910191386118f3565b602091939204910191386118e1565b6040935081049150386118c9565b6000929181546119f181611584565b92600191808316908115611a4a5750600114611a0e575b50505050565b90919293945060005260209081600020906000915b858310611a395750505050019038808080611a08565b805485840152918301918101611a23565b60ff1916845250505081151590910201915038808080611a08565b60405190611a72826114a6565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b908151811015610c50570160200190565b6000198114610ce85760010190565b611ab9611a65565b9060405191611ac78361148b565b604283526020908184016060368237845115610c505760309053835192600193841015610c50576078602186015360005b838110611b0757505050505090565b6001600160f81b031982821a600482611b2583831c60ff1688611a91565b51169284891b92600294868504861487151715611b9f57848601809611611b9f57600f600393928d611b5e89611b669560001a92611a91565b531689611a91565b51169201809311611b8a575090610cdd611b85939260001a9189611a91565b611af8565b601190634e487b7160e01b6000525260246000fd5b601184634e487b7160e01b6000525260246000fdfe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000a264697066735822122076ec184052ec9fe0b0c266082170ba33445633eed4eac586995af4480fb1163464736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 SWAP1 DUP1 DUP3 MSTORE CALLVALUE PUSH3 0x1135 JUMPI DUP1 PUSH3 0x8073 DUP1 CODESIZE SUB DUP1 SWAP2 PUSH3 0x23 DUP3 DUP6 PUSH3 0x116C JUMP JUMPDEST DUP4 CODECOPY PUSH1 0x20 SWAP3 DUP4 SWAP2 DUP2 ADD SUB SLT PUSH3 0x1135 JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP3 AND SWAP4 SWAP2 SWAP1 DUP5 DUP3 SUB PUSH3 0x1135 JUMPI DUP3 MLOAD SWAP2 PUSH3 0x58 DUP4 PUSH3 0x113A JUMP JUMPDEST PUSH1 0x12 DUP4 MSTORE PUSH18 0x131D5ADCDBD31BDBD9DA595CC8119A5E1959 PUSH1 0x72 SHL DUP6 DUP5 ADD MSTORE DUP4 MLOAD SWAP6 PUSH3 0x84 DUP8 PUSH3 0x113A JUMP JUMPDEST PUSH1 0x9 DUP8 MSTORE PUSH9 0x98AA96989E8E8C92B PUSH1 0xBB SHL DUP7 DUP9 ADD MSTORE PUSH3 0xA4 CALLER PUSH3 0x1205 JUMP JUMPDEST ISZERO PUSH3 0x1124 JUMPI PUSH3 0xB5 SWAP1 PUSH3 0x1205 JUMP JUMPDEST PUSH3 0xBF PUSH3 0x1190 JUMP JUMPDEST SWAP4 PUSH32 0xEAFEC4D89FA9619884B60000A4D96624A38F7AC2D8D9A604ECF07C12C77E480C PUSH1 0x0 SWAP4 DUP2 DUP6 MSTORE PUSH1 0x1 SWAP2 DUP3 DUP5 MSTORE DUP7 DUP7 KECCAK256 SWAP9 DUP9 MLOAD SWAP3 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB SWAP10 DUP11 DUP6 GT PUSH3 0x1110 JUMPI DUP12 SLOAD SWAP5 DUP7 DUP7 DUP2 SHR SWAP7 AND DUP1 ISZERO PUSH3 0x1105 JUMPI JUMPDEST DUP9 DUP8 LT EQ PUSH3 0x10F1 JUMPI PUSH1 0x1F SWAP6 DUP7 DUP2 GT PUSH3 0x10A9 JUMPI JUMPDEST POP DUP8 DUP7 DUP3 GT PUSH1 0x1 EQ PUSH3 0x103E JUMPI SWAP13 DUP2 DUP7 SWAP4 SWAP3 DUP13 SWAP14 SWAP15 SWAP16 PUSH3 0x18D SWAP14 SWAP2 PUSH3 0x1032 JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE JUMPDEST DUP12 MLOAD DUP1 PUSH32 0xECE574603820D07BC9B91F2A932BAADF4628AABCB8AFBA49776529C14A6104B2 SWAP12 DUP13 SWAP4 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH32 0xDEBA1E292F8BA88238E10AB3C7F88BD4BE4FAC56CAD5194B6ECCEAF653468AF1 SWAP1 DUP2 DUP11 MSTORE DUP6 DUP8 MSTORE DUP11 DUP11 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP14 DUP4 GT PUSH3 0x101E JUMPI DUP1 SLOAD DUP9 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x1013 JUMPI JUMPDEST DUP11 DUP3 LT EQ PUSH3 0xFFF JUMPI SWAP1 DUP2 DUP9 DUP14 SWAP5 SWAP4 GT PUSH3 0xFA7 JUMPI JUMPDEST POP DUP10 SWAP4 DUP14 DUP10 DUP3 GT PUSH1 0x1 EQ PUSH3 0xF4A JUMPI PUSH3 0x228 SWAP5 SWAP6 DUP3 PUSH3 0x98F JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP11 SHL OR SWAP1 SSTORE JUMPDEST DUP13 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH32 0x2F0A68AB07768E01943A599E73362A0E17A63A72E94DD2E384D2C1D4DB932756 SWAP1 DUP2 DUP10 MSTORE DUP5 DUP7 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP13 DUP4 GT PUSH3 0xC60 JUMPI DUP1 SLOAD DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xF3F JUMPI JUMPDEST DUP10 DUP3 LT EQ PUSH3 0xC41 JUMPI SWAP1 DUP2 DUP8 DUP13 SWAP5 SWAP4 GT PUSH3 0xEEA JUMPI JUMPDEST POP DUP9 SWAP4 DUP13 DUP9 DUP3 GT PUSH1 0x1 EQ PUSH3 0xE97 JUMPI PUSH3 0x2C3 SWAP5 SWAP6 DUP3 PUSH3 0xB72 JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE JUMPDEST DUP12 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 DUP8 MLOAD PUSH1 0x2 DUP6 DUP3 ADD MSTORE DUP5 DUP2 MSTORE PUSH3 0x2DC DUP2 PUSH3 0x113A JUMP JUMPDEST PUSH32 0xE0261FA95DB2EB3B5439BD033CDA66D56B96F92F243A8228FD87550ED7BDFDB3 SWAP1 DUP2 DUP10 MSTORE DUP5 DUP7 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP13 DUP4 GT PUSH3 0xC60 JUMPI DUP1 SLOAD DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xE8C JUMPI JUMPDEST DUP10 DUP3 LT EQ PUSH3 0xC41 JUMPI SWAP1 DUP2 DUP8 DUP13 SWAP5 SWAP4 GT PUSH3 0xE37 JUMPI JUMPDEST POP DUP9 SWAP4 DUP13 DUP9 DUP3 GT PUSH1 0x1 EQ PUSH3 0xDE4 JUMPI PUSH3 0x372 SWAP5 SWAP6 DUP3 PUSH3 0xB72 JUMPI POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE DUP12 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 DUP8 MLOAD DUP8 DUP6 DUP3 ADD MSTORE DUP5 DUP2 MSTORE PUSH3 0x38A DUP2 PUSH3 0x113A JUMP JUMPDEST PUSH32 0xF675E9361AF1C1664C1868CFA3EB97672D6B1A513AA5B81DEC34C9EE330E818D SWAP1 DUP2 DUP10 MSTORE DUP5 DUP7 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP13 DUP4 GT PUSH3 0xC60 JUMPI DUP1 SLOAD DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xDD9 JUMPI JUMPDEST DUP10 DUP3 LT EQ PUSH3 0xC41 JUMPI SWAP1 DUP2 DUP8 DUP13 SWAP5 SWAP4 GT PUSH3 0xD84 JUMPI JUMPDEST POP DUP9 SWAP4 DUP13 DUP9 DUP3 GT PUSH1 0x1 EQ PUSH3 0xD31 JUMPI PUSH3 0x420 SWAP5 SWAP6 DUP3 PUSH3 0xB72 JUMPI POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE DUP12 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH8 0x16345785D8A0000 PUSH1 0xE SSTORE DUP8 MLOAD PUSH2 0x369C DUP1 DUP3 ADD SWAP1 DUP3 DUP3 LT DUP13 DUP4 GT OR PUSH3 0xA84 JUMPI SWAP1 DUP3 SWAP2 PUSH3 0x49D7 DUP4 CODECOPY SUB SWAP1 DUP9 CREATE DUP1 ISZERO PUSH3 0xD27 JUMPI DUP6 AND PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB NOT PUSH1 0x6 SLOAD AND OR PUSH1 0x6 SSTORE PUSH3 0x474 PUSH3 0x1190 JUMP JUMPDEST DUP2 DUP9 MSTORE DUP4 DUP6 MSTORE DUP9 DUP9 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP12 DUP4 GT PUSH3 0xA84 JUMPI DUP1 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xD1C JUMPI JUMPDEST DUP9 DUP3 LT EQ PUSH3 0xA65 JUMPI SWAP1 DUP2 DUP7 DUP12 SWAP5 SWAP4 GT PUSH3 0xCC7 JUMPI JUMPDEST POP DUP8 SWAP4 DUP7 DUP2 GT PUSH1 0x1 EQ PUSH3 0xC74 JUMPI DUP1 PUSH3 0x4EB SWAP5 SWAP6 DUP14 SWAP2 PUSH3 0xA98 JUMPI JUMPDEST POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP9 SHL OR SWAP1 SSTORE JUMPDEST DUP11 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 DUP7 MLOAD PUSH2 0xE90 SWAP1 DUP2 DUP6 DUP3 ADD MSTORE DUP5 DUP2 MSTORE PUSH3 0x507 DUP2 PUSH3 0x113A JUMP JUMPDEST PUSH32 0xA23EA79C706BE4641BFD97C9AFB5B71A552C5BC320930DBE09B3530ED76DEE0F SWAP1 DUP2 DUP10 MSTORE DUP5 DUP7 MSTORE DUP10 DUP10 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP13 DUP4 GT PUSH3 0xC60 JUMPI DUP1 SLOAD DUP8 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xC55 JUMPI JUMPDEST DUP10 DUP3 LT EQ PUSH3 0xC41 JUMPI SWAP1 DUP2 DUP8 DUP13 SWAP5 SWAP4 GT PUSH3 0xBEC JUMPI JUMPDEST POP DUP9 SWAP4 DUP13 DUP9 DUP3 GT PUSH1 0x1 EQ PUSH3 0xB7E JUMPI PUSH3 0x59D SWAP5 SWAP6 DUP3 PUSH3 0xB72 JUMPI POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP10 SHL OR SWAP1 SSTORE DUP12 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 DUP8 MLOAD SWAP1 DUP5 DUP3 ADD MSTORE DUP4 DUP2 MSTORE PUSH3 0x5B5 DUP2 PUSH3 0x113A JUMP JUMPDEST PUSH32 0xD28C95357CF4C94D638A4F572D5D3DF8D7E1415C8B650E747A219C559D1435C8 SWAP1 DUP2 DUP9 MSTORE DUP4 DUP6 MSTORE DUP9 DUP9 KECCAK256 SWAP1 DUP1 MLOAD SWAP2 DUP12 DUP4 GT PUSH3 0xA84 JUMPI DUP1 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xB67 JUMPI JUMPDEST DUP9 DUP3 LT EQ PUSH3 0xA65 JUMPI SWAP1 DUP2 DUP7 DUP12 SWAP5 SWAP4 GT PUSH3 0xB12 JUMPI JUMPDEST POP DUP8 SWAP4 DUP7 DUP2 GT PUSH1 0x1 EQ PUSH3 0xAA4 JUMPI DUP1 PUSH3 0x64C SWAP5 SWAP6 DUP14 SWAP2 PUSH3 0xA98 JUMPI POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP9 SHL OR SWAP1 SSTORE DUP11 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 DUP7 MLOAD SWAP4 DUP3 DUP5 DUP7 ADD MSTORE DUP4 DUP6 MSTORE PUSH3 0x665 DUP6 PUSH3 0x113A JUMP JUMPDEST PUSH32 0x6DE85EAF5D982B4E5DA00000D8C2F51C0E567ED9EC7B1F9EE90BB0B2839D168D DUP1 DUP9 MSTORE DUP4 DUP6 MSTORE DUP9 DUP9 KECCAK256 SWAP6 DUP1 MLOAD SWAP7 DUP12 DUP9 GT PUSH3 0xA84 JUMPI DUP1 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0xA79 JUMPI JUMPDEST DUP9 DUP3 LT EQ PUSH3 0xA65 JUMPI SWAP2 DUP10 SWAP2 DUP4 DUP8 DUP14 SWAP8 SWAP7 SWAP6 GT PUSH3 0xA0A JUMPI JUMPDEST POP DUP9 SWAP10 DUP8 DUP2 GT PUSH1 0x1 EQ PUSH3 0x99B JUMPI SWAP1 DUP2 PUSH3 0x702 SWAP4 SWAP3 PUSH1 0x4 SWAP13 DUP10 SWAP2 PUSH3 0x98F JUMPI POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP11 SHL OR SWAP1 SSTORE DUP13 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 PUSH1 0x6 SLOAD AND DUP9 MLOAD SWAP6 DUP7 DUP1 SWAP3 PUSH4 0x934118FB PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP4 DUP5 ISZERO PUSH3 0x985 JUMPI DUP7 SWAP1 DUP8 SWAP6 PUSH3 0x916 JUMPI JUMPDEST POP PUSH1 0x48 DUP2 DUP6 PUSH3 0x778 SWAP4 MLOAD SWAP2 ADD KECCAK256 DUP10 MLOAD SWAP7 DUP8 SWAP2 PUSH6 0x379ABE35001 PUSH1 0xC5 SHL DUP9 DUP5 ADD MSTORE PUSH1 0x28 DUP4 ADD MSTORE PUSH3 0x767 DUP2 MLOAD DUP1 SWAP3 DUP10 DUP7 DUP7 ADD SWAP2 ADD PUSH3 0x11B2 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH3 0x116C JUMP JUMPDEST PUSH32 0x9AFB95CACC9F95858EC44AA8C3B685511002E30AE54415823F406128B85B238E SWAP6 DUP7 DUP2 MSTORE DUP3 DUP5 MSTORE DUP8 DUP2 KECCAK256 SWAP4 DUP6 MLOAD SWAP10 DUP11 GT PUSH3 0x902 JUMPI DUP5 SLOAD DUP5 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x8F7 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x8E3 JUMPI DUP1 DUP5 DUP13 SWAP3 GT PUSH3 0x899 JUMPI JUMPDEST POP POP DUP1 SWAP3 DUP11 GT PUSH1 0x1 EQ PUSH3 0x82F JUMPI POP SWAP8 DUP1 SWAP3 DUP2 SWAP3 PUSH3 0x812 SWAP8 SWAP9 SWAP10 SWAP11 SWAP4 PUSH3 0x823 JUMPI JUMPDEST POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST DUP5 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH3 0x11D7 JUMP JUMPDEST SUB SWAP1 LOG2 MLOAD PUSH2 0x372F SWAP1 DUP2 PUSH3 0x12A8 DUP3 CODECOPY RETURN JUMPDEST DUP7 ADD MLOAD SWAP3 POP CODESIZE PUSH3 0x7F5 JUMP JUMPDEST SWAP9 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP10 DUP6 DUP4 MSTORE DUP1 DUP4 KECCAK256 SWAP3 SWAP1 JUMPDEST DUP12 DUP3 LT PUSH3 0x881 JUMPI POP POP DUP3 PUSH3 0x812 SWAP8 SWAP9 SWAP10 SWAP11 LT PUSH3 0x867 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x806 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH3 0x85A JUMP JUMPDEST DUP1 DUP7 DUP5 SWAP6 DUP3 SWAP5 SWAP6 DUP12 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD SWAP1 PUSH3 0x840 JUMP JUMPDEST DUP7 DUP5 MSTORE DUP5 DUP4 DUP6 KECCAK256 SWAP2 DUP5 DUP3 DUP6 ADD PUSH1 0x5 SHR DUP5 ADD SWAP5 LT PUSH3 0x8D9 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP6 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x8CD JUMPI POP DUP12 SWAP2 POP PUSH3 0x7D2 JUMP JUMPDEST DUP5 DUP2 SSTORE ADD DUP6 SWAP1 PUSH3 0x8BB JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x8B2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x7BE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST SWAP5 POP POP RETURNDATASIZE DUP1 DUP8 DUP7 RETURNDATACOPY PUSH3 0x92A DUP2 DUP7 PUSH3 0x116C JUMP JUMPDEST DUP5 ADD DUP8 DUP6 DUP3 SUB SLT PUSH3 0x981 JUMPI DUP5 MLOAD DUP10 DUP2 GT PUSH3 0x97D JUMPI DUP2 PUSH3 0x94E SWAP2 DUP8 ADD PUSH3 0x124C JUMP JUMPDEST SWAP5 DUP5 DUP2 ADD MLOAD SWAP1 DUP11 DUP3 GT PUSH3 0x979 JUMPI PUSH3 0x778 SWAP3 PUSH1 0x48 SWAP3 PUSH3 0x970 SWAP3 ADD PUSH3 0x124C JUMP JUMPDEST SWAP6 SWAP2 POP PUSH3 0x72D JUMP JUMPDEST DUP9 DUP1 REVERT JUMPDEST DUP8 DUP1 REVERT JUMPDEST DUP7 DUP1 REVERT JUMPDEST DUP8 MLOAD RETURNDATASIZE DUP9 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH3 0x209 JUMP JUMPDEST DUP2 DUP8 MSTORE DUP10 DUP8 KECCAK256 SWAP11 PUSH1 0x1F NOT DUP3 AND DUP9 JUMPDEST DUP2 DUP2 LT PUSH3 0x9EE JUMPI POP SWAP2 PUSH1 0x4 SWAP13 DUP12 SWAP3 DUP3 PUSH3 0x702 SWAP8 SWAP7 SWAP6 LT PUSH3 0x9D4 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x21C JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH3 0x9C7 JUMP JUMPDEST DUP6 DUP4 ADD MLOAD DUP15 SSTORE SWAP13 DUP12 ADD SWAP13 DUP16 SWAP10 POP DUP15 SWAP7 POP SWAP2 DUP13 ADD SWAP2 DUP13 ADD PUSH3 0x9A9 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 SWAP6 DUP2 SWAP4 POP MSTORE DUP8 DUP12 KECCAK256 DUP7 DUP1 DUP12 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP13 LT PUSH3 0xA5B JUMPI JUMPDEST DUP13 SWAP5 SWAP3 DUP15 SWAP9 SWAP8 SWAP7 SWAP5 SWAP3 DUP12 SWAP3 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xA4A JUMPI POP POP PUSH3 0x6C4 JUMP JUMPDEST SWAP8 DUP9 SSTORE DUP14 SWAP8 DUP14 SWAP6 POP DUP11 SWAP2 ADD PUSH3 0xA3A JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xA28 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x6AB JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH3 0x4CC JUMP JUMPDEST DUP2 DUP13 MSTORE DUP9 DUP13 KECCAK256 SWAP5 DUP9 SWAP2 SWAP1 PUSH1 0x1F NOT DUP3 AND DUP15 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0xAF7 JUMPI POP POP SWAP1 DUP3 PUSH3 0x64C SWAP8 SWAP9 SWAP3 LT PUSH3 0xADD JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x4DF JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH3 0xAD0 JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP15 SWAP8 POP DUP12 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xAB5 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP12 MSTORE DUP8 DUP12 KECCAK256 DUP7 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP8 LT PUSH3 0xB5D JUMPI JUMPDEST SWAP2 DUP10 SWAP2 DUP14 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xB4E JUMPI POP POP PUSH3 0x612 JUMP JUMPDEST DUP14 DUP2 SSTORE DUP13 SWAP6 POP DUP10 SWAP2 ADD PUSH3 0xB3E JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xB2F JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x5FC JUMP JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH3 0x2A4 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP11 DUP2 KECCAK256 SWAP6 DUP11 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP1 JUMPDEST DUP14 DUP3 DUP3 LT PUSH3 0xBD1 JUMPI POP POP SWAP1 DUP3 PUSH3 0x59D SWAP8 SWAP9 SWAP3 LT PUSH3 0xBB7 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x2B7 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH3 0xBAA JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP16 SWAP8 POP DUP13 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xB8F JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP13 MSTORE DUP9 DUP13 KECCAK256 DUP8 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP8 LT PUSH3 0xC37 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP15 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xC28 JUMPI POP POP PUSH3 0x564 JUMP JUMPDEST DUP15 DUP2 SSTORE DUP14 SWAP6 POP DUP11 SWAP2 ADD PUSH3 0xC18 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xC09 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP13 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP13 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x54E JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP2 DUP13 MSTORE DUP9 DUP13 KECCAK256 SWAP5 DUP9 SWAP2 SWAP1 PUSH1 0x1F NOT DUP3 AND DUP15 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0xCAC JUMPI POP POP SWAP1 DUP3 PUSH3 0x4EB SWAP8 SWAP9 SWAP3 LT PUSH3 0xADD JUMPI POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x4DF JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP15 SWAP8 POP DUP12 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xC85 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP12 MSTORE DUP8 DUP12 KECCAK256 DUP7 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP8 LT PUSH3 0xD12 JUMPI JUMPDEST SWAP2 DUP10 SWAP2 DUP14 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xD03 JUMPI POP POP PUSH3 0x4AF JUMP JUMPDEST DUP14 DUP2 SSTORE DUP13 SWAP6 POP DUP10 SWAP2 ADD PUSH3 0xCF3 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xCE4 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x499 JUMP JUMPDEST DUP9 MLOAD RETURNDATASIZE DUP10 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST DUP3 DUP2 MSTORE DUP11 DUP2 KECCAK256 SWAP6 DUP11 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP1 JUMPDEST DUP14 DUP3 DUP3 LT PUSH3 0xD69 JUMPI POP POP SWAP1 DUP3 PUSH3 0x420 SWAP8 SWAP9 SWAP3 LT PUSH3 0xBB7 JUMPI POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x2B7 JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP16 SWAP8 POP DUP13 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xD42 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP13 MSTORE DUP9 DUP13 KECCAK256 DUP8 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP8 LT PUSH3 0xDCF JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP15 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xDC0 JUMPI POP POP PUSH3 0x3E7 JUMP JUMPDEST DUP15 DUP2 SSTORE DUP14 SWAP6 POP DUP11 SWAP2 ADD PUSH3 0xDB0 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xDA1 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x3D1 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP11 DUP2 KECCAK256 SWAP6 DUP11 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP1 JUMPDEST DUP14 DUP3 DUP3 LT PUSH3 0xE1C JUMPI POP POP SWAP1 DUP3 PUSH3 0x372 SWAP8 SWAP9 SWAP3 LT PUSH3 0xBB7 JUMPI POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x2B7 JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP16 SWAP8 POP DUP13 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xDF5 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP13 MSTORE DUP9 DUP13 KECCAK256 DUP8 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP8 LT PUSH3 0xE82 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP15 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xE73 JUMPI POP POP PUSH3 0x339 JUMP JUMPDEST DUP15 DUP2 SSTORE DUP14 SWAP6 POP DUP11 SWAP2 ADD PUSH3 0xE63 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xE54 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x323 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP11 DUP2 KECCAK256 SWAP6 DUP11 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP1 JUMPDEST DUP14 DUP3 DUP3 LT PUSH3 0xECF JUMPI POP POP SWAP1 DUP3 PUSH3 0x2C3 SWAP8 SWAP9 SWAP3 LT PUSH3 0xBB7 JUMPI POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x2B7 JUMP JUMPDEST DUP8 DUP5 ADD MLOAD DUP11 SSTORE SWAP9 SWAP1 SWAP5 ADD SWAP8 DUP16 SWAP8 POP DUP13 SWAP5 SWAP3 DUP2 ADD SWAP3 ADD PUSH3 0xEA8 JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP13 MSTORE DUP9 DUP13 KECCAK256 DUP8 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP8 LT PUSH3 0xF35 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP15 SWAP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0xF26 JUMPI POP POP PUSH3 0x288 JUMP JUMPDEST DUP15 DUP2 SSTORE DUP14 SWAP6 POP DUP11 SWAP2 ADD PUSH3 0xF16 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xF07 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x272 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP12 DUP2 KECCAK256 SWAP6 DUP12 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP1 DUP15 JUMPDEST DUP3 DUP3 LT PUSH3 0xF82 JUMPI POP POP SWAP1 DUP3 PUSH3 0x228 SWAP8 SWAP9 SWAP3 LT PUSH3 0x9D4 JUMPI POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x21C JUMP JUMPDEST SWAP3 SWAP6 SWAP8 POP SWAP4 DUP7 SWAP9 DUP7 DUP5 SWAP4 SWAP6 SWAP9 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD SWAP2 DUP15 SWAP6 SWAP4 SWAP7 SWAP5 SWAP2 DUP13 SWAP4 DUP15 PUSH3 0xF5C JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP4 POP DUP14 MSTORE DUP10 DUP14 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP13 DUP8 LT PUSH3 0xFF5 JUMPI JUMPDEST DUP15 SWAP6 SWAP5 SWAP4 SWAP2 ADD PUSH1 0x5 SHR SWAP1 SWAP2 ADD SWAP1 DUP11 SWAP1 DUP16 JUMPDEST DUP4 DUP3 LT PUSH3 0xFE6 JUMPI POP POP POP PUSH3 0x1ED JUMP JUMPDEST DUP2 SSTORE DUP15 SWAP6 POP DUP12 SWAP2 ADD DUP16 PUSH3 0xFD5 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0xFC4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP14 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP14 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0x1D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP13 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP13 REVERT JUMPDEST SWAP1 POP DUP4 ADD MLOAD CODESIZE PUSH3 0x14C JUMP JUMPDEST DUP14 DUP12 MSTORE DUP9 DUP12 KECCAK256 SWAP1 PUSH1 0x1F NOT DUP4 AND DUP13 JUMPDEST DUP2 DUP2 LT PUSH3 0x1093 JUMPI POP SWAP3 PUSH3 0x18D SWAP13 SWAP14 SWAP15 SWAP16 SWAP3 DUP11 SWAP3 DUP3 DUP11 SWAP8 SWAP7 LT PUSH3 0x1079 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x15F JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH3 0x106C JUMP JUMPDEST DUP6 DUP4 ADD MLOAD DUP5 SSTORE SWAP3 DUP11 ADD SWAP3 SWAP2 DUP12 ADD SWAP2 DUP12 ADD PUSH3 0x104C JUMP JUMPDEST DUP14 DUP12 MSTORE DUP9 DUP12 KECCAK256 DUP8 DUP1 DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP6 LT PUSH3 0x10E7 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP9 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x10DB JUMPI POP POP PUSH3 0x12A JUMP JUMPDEST DUP13 DUP2 SSTORE ADD DUP9 SWAP1 PUSH3 0x10CB JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x10C2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST SWAP6 PUSH1 0x7F AND SWAP6 PUSH3 0x115 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST DUP4 MLOAD PUSH4 0x6B620DB PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH3 0x1156 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH3 0x1156 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH3 0x119F DUP3 PUSH3 0x113A JUMP JUMPDEST PUSH1 0x4 DUP3 MSTORE PUSH4 0x29365989 PUSH1 0xE2 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH3 0x11C6 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x11B5 JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH3 0x11F9 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH3 0x11B2 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP3 AND DUP2 OR DUP4 SSTORE SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP1 LOG3 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH3 0x1135 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x1156 JUMPI PUSH1 0x40 MLOAD SWAP3 PUSH3 0x1283 PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP6 PUSH3 0x116C JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH3 0x1135 JUMPI PUSH3 0x12A4 SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH3 0x11B2 JUMP JUMPDEST SWAP1 JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x33 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x26 JUMPI JUMPDEST PUSH2 0x1E CALLDATASIZE PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH2 0x2E PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x15 JUMP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x923F9E EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x17C96B8 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0xE2FEE84 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x16E023B3 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x19C9D79B EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x1D26FCE6 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x1EAD90B0 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x217B2270 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x2A3654A4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x472DFCFB EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x475A590D EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x49A6078D EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x511B6952 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x6643A686 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x66D003AC EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x7165485D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x791790C9 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x7E87632C EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x86A10DDD EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0xA3B261F2 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xA4D66DAF EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xBE9F0E6F EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xD6C1407C EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xD91A61D0 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0xDB8C9663 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xEB93406B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x207 JUMPI PUSH4 0xFC056ACC SUB PUSH2 0xE JUMPI PUSH2 0x202 PUSH2 0x1C4F JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1B9D JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x19DE JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1956 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x187C JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x17AA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1763 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1673 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1655 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x15DA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x15BB JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x14F6 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1498 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x146E JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1317 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x12C0 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1226 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x10AC JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x108E JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1041 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1006 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xFA0 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF70 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF43 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF23 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xEBB JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xDFA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xC13 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xBDC JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xABD JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xA76 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xA2B JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x961 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x71D JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x605 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x5E2 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x5B8 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x53F JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x41A JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x3ED JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0x398 JUMPI PUSH2 0x46F SWAP2 PUSH4 0x1D138B83 PUSH1 0xE1 SHL DUP2 EQ SWAP2 DUP3 ISZERO SWAP2 DUP3 PUSH2 0x473 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE POP SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 PUSH2 0x49B JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x48B JUMPI JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x45A JUMP JUMPDEST PUSH2 0x495 SWAP2 POP PUSH2 0x33A8 JUMP JUMPDEST CODESIZE PUSH2 0x482 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH4 0xA918FA6B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x4B8 JUMPI JUMPDEST POP SWAP1 CODESIZE PUSH2 0x47A JUMP JUMPDEST PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL DUP2 EQ SWAP2 POP DUP2 ISZERO PUSH2 0x4D2 JUMPI JUMPDEST POP CODESIZE PUSH2 0x4B0 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x4F6 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E6 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x51F DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x53C SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x361A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 MLOAD PUSH2 0x46F SWAP1 PUSH2 0x5A4 DUP2 PUSH2 0x59D DUP2 PUSH32 0x2A367AE1AC46D529739AA27AC74856F860E70AF05D3642D18BA60FD5D32A069A PUSH2 0xB29 JUMP JUMPDEST SUB DUP3 PUSH2 0x699 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0x5A4 PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x34EC JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x65E PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x6D9 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x6E1 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP2 PUSH2 0x700 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x699 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x398 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI PUSH2 0x763 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP2 PUSH2 0x78A PUSH2 0x770 DUP4 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x86B JUMPI JUMPDEST POP PUSH2 0x3276 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 DUP5 MLOAD SWAP2 DUP3 GT PUSH2 0x85E JUMPI JUMPDEST PUSH2 0x7B9 DUP3 PUSH2 0x7B3 DUP6 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP6 PUSH2 0x210E JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x7F3 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x7E8 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x7D1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x809 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x846 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x82D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x822 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x866 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST PUSH2 0x875 SWAP2 POP PUSH2 0x32CE JUMP JUMPDEST CODESIZE PUSH2 0x784 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x894 JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x89C PUSH2 0x624 JUMP JUMPDEST PUSH2 0x88D JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x8B8 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x8C6 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8F0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x8E2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x933 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x951 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x506 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x923 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x993 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x9AC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 DUP1 MLOAD DUP3 MLOAD SUB PUSH2 0xA19 JUMPI PUSH2 0x9C0 DUP2 MLOAD PUSH2 0x1CA5 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xA0B JUMPI DUP1 PUSH2 0x9EF PUSH2 0x9DD PUSH1 0x1 SWAP4 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x9E8 DUP4 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x34EC JUMP JUMPDEST PUSH2 0x9F9 DUP3 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0xA04 DUP2 DUP7 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x46F DUP7 DUP3 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xE8 SHL PUSH1 0x40 MLOAD SWAP1 PUSH3 0xFFFFFF PUSH1 0xE8 SHL AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xA95 PUSH1 0x4 CALLDATALOAD PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x398 JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xAE5 PUSH2 0xADC PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x23EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xB1F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xB09 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xAFE JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0xB3A DUP4 PUSH2 0xAEF JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xB9C JUMPI POP PUSH1 0x1 EQ PUSH2 0xB5C JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0xB88 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0xB56 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0xB71 JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0xB56 JUMP JUMPDEST SWAP1 PUSH2 0xBDA PUSH2 0xBD3 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST SUB DUP4 PUSH2 0x699 JUMP JUMPDEST JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x46F PUSH2 0x59D PUSH2 0x5A4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0xC30 PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0xC43 PUSH2 0xC3E PUSH1 0x7 SLOAD PUSH2 0x3049 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH2 0xD88 PUSH1 0x7 SLOAD SWAP2 PUSH2 0xC6E PUSH2 0xC61 DUP5 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 PUSH2 0xC79 NUMBER PUSH2 0x2E14 JUMP JUMPDEST BLOCKHASH PUSH1 0x40 MLOAD PUSH2 0xCA1 DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 DUP8 ADDRESS SWAP2 DUP12 DUP9 PUSH2 0x3073 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x699 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xCF1 PUSH1 0x0 DUP3 SWAP1 BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 DUP4 SWAP1 BYTE PUSH1 0xF0 SHL PUSH1 0xFF PUSH1 0xF0 SHL AND OR PUSH1 0x2 DUP4 SWAP1 BYTE PUSH1 0xE8 SHL PUSH1 0xFF PUSH1 0xE8 SHL AND OR PUSH2 0xCE0 DUP8 PUSH2 0x39D JUMP JUMPDEST SWAP1 PUSH1 0xE8 SHR PUSH3 0xFFFFFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xD0F PUSH2 0xD0A PUSH2 0xD03 DUP4 PUSH1 0x3 BYTE PUSH2 0x300E JUMP JUMPDEST PUSH1 0xFF SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x3057 JUMP JUMPDEST PUSH2 0xD18 DUP7 PUSH2 0x3AD JUMP JUMPDEST SSTORE PUSH2 0xD44 PUSH2 0xD3F PUSH2 0xD03 PUSH2 0xD35 PUSH2 0xD2E DUP10 PUSH2 0x3AD JUMP JUMPDEST SLOAD PUSH1 0x2 SHR SWAP1 JUMP JUMPDEST DUP5 PUSH1 0x4 BYTE SWAP1 PUSH2 0x3036 JUMP JUMPDEST PUSH2 0x3065 JUMP JUMPDEST PUSH2 0xD4D DUP7 PUSH2 0x3BD JUMP JUMPDEST SSTORE DUP2 BYTE MOD DUP1 PUSH2 0xD98 JUMPI POP PUSH2 0xD68 PUSH2 0xD63 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x3119 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xD74 DUP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x3136 JUMP JUMPDEST DUP3 PUSH2 0xD82 PUSH2 0x1DE9 JUMP JUMPDEST SWAP2 PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0xDB7 JUMPI POP PUSH2 0xDB2 PUSH2 0xDAD DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30FD JUMP JUMPDEST PUSH2 0xD68 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xDD1 JUMPI POP PUSH2 0xDB2 PUSH2 0xDCC DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30E2 JUMP JUMPDEST PUSH1 0x3 SUB PUSH2 0xDE9 JUMPI PUSH2 0xDB2 PUSH2 0xDE4 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30C4 JUMP JUMPDEST PUSH2 0xDB2 PUSH2 0xDF5 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30A0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE19 DUP2 PUSH2 0x2703 JUMP JUMPDEST ISZERO PUSH2 0xE7E JUMPI PUSH1 0x0 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH2 0xE32 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2F38 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 DUP4 ADD DUP2 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0xE5E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xE4F JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x398 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP2 PUSH1 0x20 PUSH2 0x53C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x6E6 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0xED5 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x398 JUMPI PUSH1 0x64 CALLDATALOAD PUSH2 0xEF4 DUP2 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x398 JUMPI PUSH2 0xF17 PUSH2 0xF21 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x2427 JUMP JUMPDEST STOP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0x5A4 PUSH1 0x4 CALLDATALOAD PUSH2 0x1C86 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xA81A6A910FED20374361B35C451A4A44F86CED46 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x398 JUMPI PUSH2 0x46F SWAP2 PUSH1 0x24 PUSH2 0xFFA SWAP3 ADD PUSH2 0x22BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x8FF JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1028 PUSH2 0xAA7 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x105C PUSH2 0x2C76 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x365A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3EA DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xAE5 PUSH2 0x10CB PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x32CE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x10E7 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x10F5 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x111F JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x398 JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x1111 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x1155 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x1163 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x118D JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 DUP1 SWAP2 DUP4 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0xE96 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x117F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x11BE DUP3 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x11CC PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 DUP1 DUP5 GT PUSH2 0x398 JUMPI DUP5 DUP4 ADD SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x11FA JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI DUP7 SWAP2 PUSH2 0x121B DUP5 DUP5 DUP1 SWAP5 DUP10 ADD ADD PUSH2 0xEA0 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x11EA JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1258 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x10D0 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1270 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1287 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x129F SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x113E JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0xF21 SWAP6 PUSH2 0x12BA SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP4 PUSH2 0x25B0 JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x12EC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x12F4 PUSH2 0x2C76 JUMP JUMPDEST CALLVALUE PUSH2 0x1305 JUMPI PUSH2 0xF21 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1331 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1354 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST SWAP1 PUSH2 0x135E DUP4 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 CALLER DUP4 SUB PUSH2 0x144F JUMPI POP DUP3 AND DUP1 ISZERO PUSH2 0x143D JUMPI DUP1 DUP3 EQ PUSH2 0x142B JUMPI PUSH2 0x13A5 PUSH2 0x13A1 DUP5 PUSH2 0x139C DUP9 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2F87 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x140B JUMPI SWAP4 DUP1 PUSH2 0x1406 SWAP3 PUSH2 0xF21 SWAP7 PUSH32 0x1B1B58AA2EC0CEC2228B2D37124556D41F5A1F7B12F089171F896CC236671215 PUSH1 0x40 MLOAD DUP1 PUSH2 0x13E2 DUP11 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x13F8 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 CALLER PUSH1 0x20 DUP6 ADD PUSH2 0x2396 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x699 JUMP JUMPDEST PUSH2 0x2AAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x14EC4D6D PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP8 DUP7 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x1427 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x2358 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x367A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 MLOAD PUSH2 0x46F SWAP1 PUSH2 0x5A4 DUP2 PUSH2 0x59D DUP2 PUSH32 0x83B322886C7B7E25779E5D38E06E005C9E7ABA1E1267CE9210CF24E31833535A PUSH2 0xB29 JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1523 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x153B SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP2 PUSH2 0x1544 PUSH2 0x2C76 JUMP JUMPDEST CALLVALUE PUSH2 0x15AC JUMPI DUP2 MLOAD DUP4 MLOAD SUB PUSH2 0x159D JUMPI DUP2 MLOAD ISZERO PUSH2 0x158E JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xF21 JUMPI DUP1 PUSH2 0x1588 PUSH2 0x1576 PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1581 DUP4 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST ADD PUSH2 0x155D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x15FD PUSH2 0xAA7 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1612 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2F38 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 DUP4 ADD DUP2 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x163E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x162F JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE90 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16A5 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16BC SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16D4 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP3 PUSH2 0x16DD PUSH2 0x2C76 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD DUP1 SWAP2 EQ SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x1757 JUMPI JUMPDEST POP PUSH2 0x1748 JUMPI DUP2 MLOAD ISZERO PUSH2 0x1739 JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xF21 JUMPI DUP1 PUSH2 0x1733 PUSH2 0x1716 PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1721 DUP4 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x172C DUP5 DUP10 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x28D3 JUMP JUMPDEST ADD PUSH2 0x16FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x80C98305 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST SWAP1 POP DUP5 MLOAD EQ ISZERO CODESIZE PUSH2 0x16ED JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1797 PUSH2 0xF21 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x179F PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x28D3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x180D PUSH1 0x4 DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x17D8 DUP2 DUP4 SLOAD AND CALLER EQ PUSH2 0x3276 JUMP JUMPDEST PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x934118FB PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x186F JUMPI JUMPDEST DUP4 SWAP1 DUP5 SWAP3 PUSH2 0x184A JUMPI JUMPDEST POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36DA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1844 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x363A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x5A4 DUP2 PUSH1 0x40 DUP8 KECCAK256 PUSH2 0x2153 JUMP JUMPDEST SUB SWAP1 LOG2 DUP1 RETURN JUMPDEST SWAP1 POP PUSH2 0x1868 SWAP2 POP RETURNDATASIZE DUP1 DUP6 DUP4 RETURNDATACOPY PUSH2 0x1860 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x341E JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x1800 JUMP JUMPDEST PUSH2 0x1877 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x17F7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1896 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x18A6 DUP4 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x18C5 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x18CE DUP4 PUSH2 0x2249 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP1 CALLER DUP3 SWAP1 SUB PUSH2 0x191F JUMPI JUMPDEST DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x143D JUMPI EQ PUSH2 0x142B JUMPI PUSH2 0x18FF DUP3 DUP3 DUP7 DUP9 DUP8 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x1905 JUMPI STOP JUMPDEST PUSH2 0xF21 SWAP4 PUSH2 0x13F8 PUSH2 0x1406 SWAP3 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH1 0x20 DUP6 ADD PUSH2 0x23C1 JUMP JUMPDEST DUP5 DUP2 AND CALLER EQ PUSH2 0x18E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x760B5ACD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1987 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x1991 DUP2 MLOAD PUSH2 0x1CA5 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x19D0 JUMPI DUP1 PUSH2 0x19B4 PUSH2 0x19AE PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1C86 JUMP JUMPDEST PUSH2 0x19BE DUP3 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0x19C9 DUP2 DUP6 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x1995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x46F DUP6 DUP3 PUSH2 0x8FF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x46F SWAP1 PUSH2 0x19FF PUSH2 0xE90 PUSH1 0x7 SLOAD LT PUSH2 0x2F9A JUMP JUMPDEST PUSH2 0x1A29 PUSH2 0x1A24 PUSH2 0x1A1C PUSH1 0xE SLOAD PUSH2 0x1A17 DUP2 CALLVALUE LT ISZERO PUSH2 0x2FD5 JUMP JUMPDEST PUSH2 0x301F JUMP JUMPDEST PUSH2 0x3E8 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x1A37 PUSH2 0xC3E PUSH1 0x7 SLOAD PUSH2 0x3049 JUMP JUMPDEST PUSH2 0xD88 PUSH1 0x7 SLOAD SWAP2 PUSH2 0x1A55 PUSH2 0xC61 DUP5 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1A60 NUMBER PUSH2 0x2E14 JUMP JUMPDEST BLOCKHASH PUSH1 0x40 MLOAD PUSH2 0x1A7B DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 ADDRESS SWAP1 CALLER SWAP1 DUP12 DUP9 PUSH2 0x3073 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x1AB8 DUP2 DUP5 BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 DUP4 SWAP1 BYTE PUSH1 0xF0 SHL PUSH1 0xFF PUSH1 0xF0 SHL AND OR PUSH1 0x2 DUP4 SWAP1 BYTE PUSH1 0xE8 SHL PUSH1 0xFF PUSH1 0xE8 SHL AND OR PUSH2 0xCE0 DUP8 PUSH2 0x39D JUMP JUMPDEST PUSH2 0x1ACA PUSH2 0xD0A PUSH2 0xD03 DUP4 PUSH1 0x3 BYTE PUSH2 0x300E JUMP JUMPDEST PUSH2 0x1AD3 DUP7 PUSH2 0x3AD JUMP JUMPDEST SSTORE PUSH2 0x1AE9 PUSH2 0xD3F PUSH2 0xD03 PUSH2 0xD35 PUSH2 0xD2E DUP10 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x1AF2 DUP7 PUSH2 0x3BD JUMP JUMPDEST SSTORE DUP2 BYTE MOD DUP1 PUSH2 0x1B4F JUMPI POP PUSH2 0x1B08 PUSH2 0xD63 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B14 PUSH2 0xD74 DUP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x1B26 PUSH2 0x1B1F PUSH2 0x1DE9 JUMP JUMPDEST DUP5 CALLER PUSH2 0x31B0 JUMP JUMPDEST DUP1 DUP1 DUP1 CALLVALUE PUSH20 0xA81A6A910FED20374361B35C451A4A44F86CED46 GAS CALL PUSH2 0x1B49 PUSH2 0x1E1A JUMP JUMPDEST POP PUSH2 0x3157 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1B69 JUMPI POP PUSH2 0x1B64 PUSH2 0xDAD DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B08 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x1B7E JUMPI POP PUSH2 0x1B64 PUSH2 0xDCC DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x3 SUB PUSH2 0x1B91 JUMPI PUSH2 0x1B64 PUSH2 0xDE4 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B64 PUSH2 0xDF5 DUP5 PUSH2 0x3CD JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1BB7 PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x1BBF PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 ISZERO PUSH2 0x1BFB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE SWAP1 SWAP3 AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x365A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x46F PUSH2 0x59D PUSH2 0x5A4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x59D PUSH2 0x53C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST SWAP1 PUSH2 0x1CAF DUP3 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x1CBC PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x699 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1CCD PUSH1 0x1F NOT SWAP2 PUSH2 0x87B JUMP JUMPDEST ADD SWAP1 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1CDE JUMPI POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 PUSH1 0x20 DUP1 SWAP4 DUP6 ADD ADD MSTORE ADD PUSH2 0x1CD2 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1D1B JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D23 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D39 JUMPI PUSH2 0x53C SWAP1 PUSH2 0x1E4A JUMP JUMPDEST PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE DUP1 PUSH1 0x24 DUP4 ADD MSTORE DUP1 PUSH1 0x0 DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST POP CALLVALUE ISZERO PUSH2 0x1D8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x30FA4A21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x34 SWAP4 SWAP2 DUP2 PUSH1 0x0 DUP3 CALLDATACOPY PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP3 ADD SWAP2 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x1E0D JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x1E15 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x1E04 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1E45 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1E2B DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP2 PUSH2 0x1E39 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x699 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND SWAP2 PUSH2 0x1E9A PUSH2 0x1E95 PUSH1 0x40 MLOAD PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD MSTORE DUP6 PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x1C86 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x14 DUP2 EQ ISZERO SWAP1 DUP2 PUSH2 0x1F46 JUMPI JUMPDEST POP PUSH2 0x1F21 JUMPI PUSH2 0x1EB6 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 SHR SWAP2 DUP3 ISZERO PUSH2 0x1EFD JUMPI POP PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1EDE DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 CALLVALUE SWAP1 CALLER SWAP1 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST MLOAD SWAP2 CALLVALUE SWAP1 GAS CALL PUSH2 0x1EEC PUSH2 0x1E1A JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x1EF5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO CODESIZE PUSH2 0x1EA8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x14 DUP2 LT PUSH2 0x1F76 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x14 SUB PUSH1 0x3 SHL DUP3 SWAP1 SHL AND AND SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD MLOAD SWAP1 PUSH1 0x20 DUP2 LT PUSH2 0x1F99 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT SWAP1 PUSH1 0x20 SUB PUSH1 0x3 SHL SHL AND SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0xF675E9361AF1C1664C1868CFA3EB97672D6B1A513AA5B81DEC34C9EE330E818D DUP3 EQ PUSH2 0x2098 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x361A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 SUB PUSH2 0x1FF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x367A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 SUB PUSH2 0x201E JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH32 0xE0261FA95DB2EB3B5439BD033CDA66D56B96F92F243A8228FD87550ED7BDFDB3 DUP3 SUB PUSH2 0x2057 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x2093 DUP2 PUSH2 0x2087 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36DA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 PUSH2 0x2082 DUP7 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2153 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B324005 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x20CB SWAP2 DUP4 SLOAD PUSH2 0x20AA JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x20DA JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x20CF JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x20F3 JUMPI POP POP JUMP JUMPDEST PUSH2 0xBDA SWAP2 PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH2 0x20CF JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x211D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0xBDA SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x2149 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x20CF JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x213C JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2222 JUMPI JUMPDEST PUSH2 0x217B DUP2 PUSH2 0x2175 DUP5 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP5 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x21B7 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x21AC JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2196 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x21CD DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x220A JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x21F1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x21E7 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x21D2 JUMP JUMPDEST PUSH2 0x222A PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xE7E JUMPI POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x22AE JUMPI JUMPDEST PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x398 JUMPI ADD DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x398 JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0x398 JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x22B6 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x2276 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x22C6 DUP2 PUSH2 0x1CA5 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP2 DUP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x22D9 JUMPI POP POP POP POP JUMP JUMPDEST DUP4 DUP1 PUSH2 0x22E6 DUP4 DUP6 DUP8 PUSH2 0x226C JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x22F8 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x1DB3 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL SWAP1 PUSH2 0x2306 PUSH2 0x1E1A JUMP JUMPDEST SWAP2 ISZERO PUSH2 0x232D JUMPI POP SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x231B DUP3 DUP10 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0x2326 DUP2 DUP9 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x22CC JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP3 SWAP2 ISZERO PUSH2 0x233F JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD REVERT JUMPDEST MLOAD PUSH4 0x234EB819 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH2 0x53C SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x53C SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x23FE DUP5 PUSH2 0x2249 JUMP JUMPDEST AND SWAP2 AND SWAP1 DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x2410 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x53C SWAP3 POP PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2DE8 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH2 0x2435 DUP2 CALLER PUSH2 0x23EC JUMP JUMPDEST ISZERO PUSH2 0x2592 JUMPI PUSH2 0x2443 DUP2 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP5 DUP3 AND SWAP2 DUP3 DUP5 SUB PUSH2 0x2575 JUMPI DUP1 DUP9 AND SWAP4 DUP5 ISZERO PUSH2 0x2563 JUMPI PUSH2 0x246D DUP7 PUSH2 0x2249 JUMP JUMPDEST SWAP2 DUP3 AND SUB PUSH2 0x2533 JUMPI POP POP SWAP3 PUSH2 0x2529 DUP4 DUP1 PUSH2 0xBDA SWAP10 SWAP8 SWAP5 PUSH2 0x13F8 SWAP10 SWAP8 PUSH2 0x2495 PUSH2 0x252E SWAP9 DUP8 PUSH2 0x27E5 JUMP JUMPDEST PUSH2 0x24A7 DUP4 PUSH2 0x24A2 DUP9 PUSH2 0x222F JUMP JUMPDEST PUSH2 0x2E6B JUMP JUMPDEST POP PUSH2 0x24BA DUP4 PUSH2 0x24B5 DUP12 PUSH2 0x222F JUMP JUMPDEST PUSH2 0x2D83 JUMP JUMPDEST POP PUSH2 0x24F2 DUP10 PUSH2 0x24D3 DUP6 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 PUSH2 0x2512 DUP11 DUP15 CALLER DUP5 PUSH2 0x2749 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP5 DUP6 SWAP3 DUP9 DUP7 CALLER PUSH1 0x20 DUP8 ADD PUSH2 0x27AB JUMP JUMPDEST PUSH2 0x2B5A JUMP JUMPDEST PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5A9C31D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP9 DUP9 DUP7 PUSH1 0x4 DUP6 ADD PUSH2 0x2358 JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x1294D2A9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP5 SWAP4 SWAP1 SWAP2 SWAP3 DUP6 MLOAD SWAP4 DUP4 MLOAD DUP6 EQ DUP1 ISZERO SWAP1 PUSH2 0x2675 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x266A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x265F JUMPI JUMPDEST PUSH2 0x264D JUMPI PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x25EA JUMPI POP POP POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x2647 PUSH2 0x260A PUSH2 0x25FD PUSH1 0x1 SWAP5 DUP13 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2617 PUSH2 0x25FD DUP5 DUP11 PUSH2 0x1D06 JUMP JUMPDEST PUSH2 0x2621 DUP5 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x2635 PUSH2 0x262F DUP7 DUP11 PUSH2 0x1D06 JUMP JUMPDEST MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x2640 DUP7 DUP12 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x2427 JUMP JUMPDEST ADD PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x93A83119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP3 MLOAD DUP6 EQ ISZERO PUSH2 0x25D2 JUMP JUMPDEST POP DUP2 MLOAD DUP6 EQ ISZERO PUSH2 0x25CB JUMP JUMPDEST POP DUP1 MLOAD DUP6 EQ ISZERO PUSH2 0x25C4 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 DUP5 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x26A7 DUP3 DUP3 AND DUP1 SWAP7 PUSH2 0x2E6B JUMP JUMPDEST ISZERO PUSH2 0x26E4 JUMPI POP SWAP1 PUSH2 0x26DF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x369A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE AND SWAP6 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 DUP10 SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP2 PUSH1 0x20 SWAP4 DUP4 DUP6 MSTORE PUSH1 0x40 SWAP2 DUP3 DUP2 KECCAK256 SWAP5 DUP6 SLOAD SWAP6 DUP3 JUMPDEST DUP8 DUP2 LT PUSH2 0x2813 JUMPI POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD ISZERO PUSH2 0x28A9 JUMPI JUMPDEST DUP2 DUP5 MSTORE DUP9 DUP5 KECCAK256 SLOAD DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH2 0x2839 DUP3 PUSH2 0x663 JUMP JUMPDEST DUP7 DUP3 MSTORE DUP10 DUP8 MSTORE DUP6 DUP13 MSTORE PUSH2 0x284E DUP4 DUP11 DUP10 KECCAK256 PUSH2 0x2E6B JUMP JUMPDEST ISZERO PUSH2 0x288E JUMPI PUSH1 0x1 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x369A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 DUP10 PUSH2 0x2885 DUP15 SWAP7 DUP15 SWAP7 DUP15 DUP9 DUP1 MLOAD SWAP7 DUP8 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE AND SWAP7 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP1 LOG4 ADD PUSH2 0x2801 JUMP JUMPDEST DUP9 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP13 DUP7 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST PUSH2 0x28B1 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x281B JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP3 MSTORE PUSH2 0xBDA DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x28DF DUP4 DUP4 PUSH2 0x28B6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP4 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x29F7 JUMPI JUMPDEST PUSH2 0x291B DUP4 PUSH2 0x2915 DUP7 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP7 PUSH2 0x210E JUMP JUMPDEST DUP1 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x2975 JUMPI POP SWAP2 DUP1 DUP1 PUSH2 0x2965 SWAP6 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35FA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP8 SWAP6 PUSH1 0x0 SWAP4 PUSH2 0x296A JUMPI JUMPDEST POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST DUP7 ADD MLOAD SWAP3 POP CODESIZE PUSH2 0x2949 JUMP JUMPDEST SWAP1 PUSH1 0x1F SWAP4 SWAP3 SWAP4 NOT DUP4 AND PUSH2 0x298D DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x29E0 JUMPI POP POP SWAP2 DUP4 SWAP2 PUSH2 0x2965 SWAP7 SWAP5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35FA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP9 SWAP7 SWAP5 LT PUSH2 0x29C7 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x2087 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x29BB JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP13 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x2992 JUMP JUMPDEST PUSH2 0x29FF PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2907 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 MLOAD PUSH2 0x2A1A DUP2 PUSH2 0x6BC JUMP JUMPDEST SWAP3 PUSH2 0x2A28 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x398 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP3 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x53C SWAP3 PUSH32 0xB084A55EBF70FD3C06FD755269DAC2212C4D3F0F4D09079780BFA50C1B2984D DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2AB8 DUP2 PUSH2 0x2CCE JUMP JUMPDEST PUSH2 0x2AC0 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B13 PUSH1 0x0 SWAP3 SWAP2 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH32 0x8A1C15A8799F71B547E08E2BCB2E85257E81B0A07EEE2CE6712549EEF1F00970 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x2B4D JUMPI JUMPDEST PUSH2 0x2B2E JUMPI POP JUMP JUMPDEST PUSH2 0x2B4A SWAP1 RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x2B42 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2A46 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2B55 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x2B63 DUP2 PUSH2 0x2CCE JUMP JUMPDEST PUSH2 0x2B6B JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B13 PUSH1 0x0 SWAP3 SWAP2 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH32 0xB23EAE7E6D1564B295B4C3E3BE402D9A2F0776C57BDF365903496F6FA481AB00 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x2BC7 DUP2 PUSH2 0x2CCE JUMP JUMPDEST ISZERO PUSH2 0x2BF2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x2B13 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x2A6B JUMP JUMPDEST POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2C01 DUP4 PUSH2 0x2CCE JUMP JUMPDEST ISZERO PUSH2 0x2C2B JUMPI POP PUSH2 0x2B13 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2A6B JUMP JUMPDEST SWAP1 POP ISZERO PUSH2 0x2C35 JUMPI POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2C59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4349776D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3173137 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2C8A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2CFE DUP2 PUSH2 0x67E JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x7530 STATICCALL PUSH1 0x0 MLOAD RETURNDATASIZE DUP3 PUSH2 0x2D1F JUMPI JUMPDEST POP DUP2 PUSH2 0x2D18 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP CODESIZE PUSH2 0x2D0E JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD DUP5 DUP2 ADD SWAP2 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2CFE DUP2 PUSH2 0x67E JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2D76 JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2D7E PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x2D67 JUMP JUMPDEST PUSH2 0x2D8D DUP3 DUP3 PUSH2 0x2DE8 JUMP JUMPDEST PUSH2 0x2DE1 JUMPI DUP1 DUP3 PUSH2 0x2DBD PUSH2 0x2DB4 PUSH1 0x1 SWAP5 SLOAD DUP6 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2DD4 JUMPI JUMPDEST DUP6 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x2D5D JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD PUSH2 0x20AA JUMP JUMPDEST SWAP1 SSTORE DUP1 SLOAD SWAP3 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x2DDC PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2DA9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH2 0xBDA PUSH2 0x2DFD JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2E55 JUMPI PUSH1 0x0 NOT SWAP2 DUP3 ADD SWAP2 PUSH2 0x2E45 DUP4 DUP4 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SWAP2 DUP1 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 DUP4 ISZERO ISZERO PUSH1 0x0 EQ PUSH2 0x2F2F JUMPI PUSH2 0x2EBD PUSH2 0x2ECC SWAP4 PUSH1 0x0 SWAP6 DUP7 NOT DUP1 DUP3 ADD DUP3 DUP2 GT PUSH2 0x2F22 JUMPI JUMPDEST DUP4 SLOAD SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x2F15 JUMPI JUMPDEST DUP1 DUP3 SUB PUSH2 0x2ED2 JUMPI JUMPDEST POP POP POP PUSH2 0x2E2B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x2EFC PUSH2 0x2EF6 SWAP2 PUSH2 0x2EE6 PUSH2 0x2F0C SWAP5 DUP8 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 DUP4 SWAP2 DUP8 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 PUSH2 0x20BF JUMP JUMPDEST DUP6 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2EB5 JUMP JUMPDEST PUSH2 0x2F1D PUSH2 0x2DFD JUMP JUMPDEST PUSH2 0x2EAD JUMP JUMPDEST PUSH2 0x2F2A PUSH2 0x2DFD JUMP JUMPDEST PUSH2 0x2EA0 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2F6D JUMPI POP POP POP PUSH2 0xBDA SWAP3 POP SUB DUP4 PUSH2 0x699 JUMP JUMPDEST DUP6 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2F57 JUMP JUMPDEST PUSH2 0x53C SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x2D83 JUMP JUMPDEST ISZERO PUSH2 0x2FA1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x444F4E45204D494E54494E47 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2FDC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x9C9EA8408A9C9EAA8E9 PUSH1 0xB3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x37 MUL SWAP2 PUSH1 0x37 DUP4 DIV SUB PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x3EA SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E23 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH1 0x23 ADD SWAP1 DUP2 PUSH1 0x23 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH1 0xB4 ADD SWAP1 DUP2 PUSH1 0xB4 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP3 SWAP2 PUSH1 0x68 SWAP5 SWAP2 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0x60 SHL SUB NOT DUP1 SWAP3 PUSH1 0x60 SHL AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 SHL AND PUSH1 0x54 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x30B3 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP3 PUSH2 0x20E6 JUMP JUMPDEST PUSH1 0xC PUSH6 0x79656C6C6F77 PUSH1 0xD0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x30D1 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xC PUSH6 0x707572706C65 PUSH1 0xD0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x30EF PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x6 PUSH3 0x1C9959 PUSH1 0xEA SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x310A PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x8 PUSH4 0x626C7565 PUSH1 0xE0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3126 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xA PUSH5 0x33B932B2B7 PUSH1 0xD9 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3143 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x12 PUSH9 0x1B1D5ADCDBDB985D5D PUSH1 0xBA SHL ADD SWAP1 SSTORE JUMP JUMPDEST ISZERO PUSH2 0x315E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x18DBDD5B19081B9BDD081CD95B99 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x31A4 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x31AC PUSH2 0x2DFD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 ISZERO PUSH2 0x2563 JUMPI PUSH2 0x31CD DUP6 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x325D JUMPI PUSH2 0x31DA DUP6 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x325D JUMPI DUP5 PUSH2 0xBDA SWAP5 SWAP6 PUSH2 0x3258 SWAP3 PUSH2 0x31FB PUSH2 0x31F6 PUSH1 0x2 SLOAD PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH2 0x3208 DUP3 PUSH2 0x24B5 DUP8 PUSH2 0x222F JUMP JUMPDEST POP PUSH2 0x3221 DUP6 PUSH2 0x24D3 DUP5 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x3241 DUP11 CALLER DUP4 PUSH2 0x2720 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x13F8 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 DUP6 CALLER PUSH1 0x20 DUP7 ADD PUSH2 0x2773 JUMP JUMPDEST PUSH2 0x2BBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x327D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1314D40E0E88139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x398 JUMPI MLOAD PUSH2 0x53C DUP2 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE PUSH4 0x3A271FFF PUSH1 0xE0 SHL PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH1 0x20 SWAP2 DUP3 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x3389 JUMPI JUMPDEST POP PUSH2 0x3318 JUMPI POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3324 JUMPI POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP2 SWAP1 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x335A JUMPI JUMPDEST POP POP PUSH2 0x53C JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x337A SWAP3 SWAP4 POP DUP1 RETURNDATASIZE LT PUSH2 0x3382 JUMPI JUMPDEST PUSH2 0x3372 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x32B9 JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x334E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3368 JUMP JUMPDEST PUSH2 0x33A1 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3382 JUMPI PUSH2 0x3372 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x330A JUMP JUMPDEST PUSH2 0x33E5 PUSH2 0x1E95 PUSH1 0x40 MLOAD PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD MSTORE PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x63B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x14 DUP2 EQ ISZERO SWAP1 DUP2 PUSH2 0x3414 JUMPI JUMPDEST POP PUSH2 0x1F21 JUMPI PUSH2 0x3401 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 DUP2 ISZERO PUSH2 0x2DE1 JUMPI PUSH2 0x53C SWAP2 PUSH2 0x2D2B JUMP JUMPDEST SWAP1 POP ISZERO ISZERO CODESIZE PUSH2 0x33F3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x398 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 SWAP1 DUP5 DUP2 GT PUSH2 0x398 JUMPI DUP2 PUSH2 0x344A SWAP2 DUP5 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP3 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP3 SWAP5 SWAP2 PUSH2 0x3481 SWAP1 PUSH2 0x53C SWAP8 SWAP6 SWAP3 DUP6 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP5 PUSH3 0xFFFFFF PUSH1 0xE8 SHL AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x506 JUMP JUMPDEST PUSH1 0x48 PUSH2 0xBDA SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 PUSH6 0x379ABE35001 PUSH1 0xC5 SHL PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x28 DUP4 ADD MSTORE PUSH2 0x34DC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x28 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x699 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x363A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 SUB PUSH2 0x35C5 JUMPI POP DUP1 PUSH1 0x0 PUSH2 0x351A PUSH2 0x3515 PUSH2 0x53C SWAP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0xBBF JUMP JUMPDEST SWAP2 PUSH2 0x352E PUSH2 0x3527 DUP3 PUSH2 0x39D JUMP JUMPDEST SLOAD PUSH1 0xE8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3538 DUP2 PUSH2 0x3AD JUMP JUMPDEST SLOAD SWAP4 PUSH2 0x3543 DUP3 PUSH2 0x3BD JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x3581 PUSH2 0x3554 PUSH2 0x3515 DUP4 PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP7 PUSH4 0xAD27274B PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 ADD PUSH2 0x3461 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x35B8 JUMPI JUMPDEST PUSH1 0x0 SWAP1 DUP2 SWAP3 PUSH2 0x35A3 JUMPI POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH2 0x1868 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x1860 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST PUSH2 0x35C0 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x358D JUMP JUMPDEST PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x35D3 SWAP2 PUSH2 0x28B6 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x59D PUSH2 0x53C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP INVALID 0xA6 0xE4 0x25 0x1F DUP6 0x5F PUSH22 0x545FE414F120DB91C76B88DEF14D120969E5BB2D3F0 0x5D 0xEB 0xBB 0xDE 0xBA 0x1E 0x29 0x2F DUP12 0xA8 DUP3 CODESIZE 0xE1 EXP 0xB3 0xC7 0xF8 DUP12 0xD4 0xBE 0x4F 0xAC JUMP 0xCA 0xD5 NOT 0x4B PUSH15 0xCCEAF653468AF19AFB95CACC9F9585 DUP15 0xC4 0x4A 0xA8 0xC3 0xB6 DUP6 MLOAD LT MUL 0xE3 EXP 0xE5 DIFFICULTY ISZERO DUP3 EXTCODEHASH BLOCKHASH PUSH2 0x28B8 JUMPDEST 0x23 DUP15 DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E02F0A68AB07768E01943A599E73362A0E17A63A PUSH19 0xE94DD2E384D2C1D4DB932756C78CD419D6136F SWAP16 SHR SHR PUSH11 0xEC1D3FAE098CFFAF8BC863 EQ 0xA8 CALLCODE PUSH9 0x5E32FE574E3CB333C8 SGT 0xA7 TIMESTAMP PUSH11 0x7A11E2B190CAD52C441194 0x21 MSIZE 0x4B SELFBALANCE 0xF6 RETURN 0x2A 0xCE PUSH14 0x8C7207B2BFECE574603820D07BC9 0xB9 0x1F 0x2A SWAP4 0x2B 0xAA 0xDF CHAINID 0x28 0xAA 0xBC 0xB8 0xAF 0xBA 0x49 PUSH24 0x6529C14A6104B2A2646970667358221220FACCA20EB8E2EF SWAP11 AND 0xA8 0x24 SWAP9 MSTORE8 0xDD 0x25 SWAP15 DUP2 0xBE 0xBA 0xC CHAINID BYTE 0x5E LOG4 0xDD LT 0xA5 PUSH25 0xC3BA1A2C64736F6C6343000811003360406080815234620011 EXTCODESIZE JUMPI PUSH3 0x15 PUSH3 0x1140 JUMP JUMPDEST SWAP1 PUSH3 0x20 PUSH3 0x1140 JUMP JUMPDEST PUSH1 0x3A DUP2 MSTORE PUSH1 0x20 SWAP1 PUSH32 0x4D2032303020323030206D202D37302030206120373020353020302031203020 DUP3 DUP3 ADD MSTORE PUSH32 0x31343020302061203730203530203020312030202D3134302030000000000000 DUP4 DUP3 ADD MSTORE DUP4 MSTORE PUSH3 0x7D PUSH3 0x1140 JUMP JUMPDEST PUSH1 0x3A DUP2 MSTORE PUSH32 0x4D2032303020323030206D202D36352030206120363520353520302031203020 DUP3 DUP3 ADD MSTORE PUSH32 0x31333020302061203635203535203020312030202D3133302030000000000000 DUP4 DUP3 ADD MSTORE DUP2 DUP5 ADD MSTORE PUSH3 0xD9 PUSH3 0x1140 JUMP JUMPDEST PUSH1 0x3A DUP2 MSTORE PUSH32 0x4D2032303020323030206D202D37352030206120373520343520302031203020 DUP3 DUP3 ADD MSTORE PUSH32 0x31353020302061203735203435203020312030202D3135302030000000000000 DUP4 DUP3 ADD MSTORE DUP3 DUP5 ADD MSTORE PUSH1 0x0 SWAP1 DUP2 SLOAD SWAP4 PUSH1 0x3 SWAP5 DUP6 DUP5 SSTORE DUP1 DUP7 LT PUSH3 0x111E JUMPI JUMPDEST POP DUP3 DUP1 MSTORE DUP2 DUP4 KECCAK256 SWAP1 DUP4 SWAP1 JUMPDEST DUP7 DUP3 LT PUSH3 0xFF6 JUMPI POP POP POP PUSH3 0x160 PUSH3 0x1140 JUMP JUMPDEST SWAP4 PUSH3 0x16B PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x71 DUP2 MSTORE PUSH32 0x4D2031373020313830206D202D31352030206120313520313520302031203020 DUP4 DUP3 ADD MSTORE PUSH32 0x333020302061203135203135203020312030202D33302030204D203233302031 DUP6 DUP3 ADD MSTORE PUSH1 0x60 PUSH32 0x3830206D202D3135203020612031352031352030203120302033302030206120 DUP2 DUP4 ADD MSTORE PUSH1 0x80 SWAP2 PUSH17 0x3135203135203020312030202D3330203 PUSH1 0x7C SHL DUP4 DUP3 ADD MSTORE DUP8 MSTORE PUSH3 0x208 PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x71 DUP2 MSTORE PUSH32 0x4D2031373020313730206D202D31322030206120313220313820302031203020 DUP6 DUP3 ADD MSTORE PUSH32 0x323420302061203132203138203020312030202D32342030204D203233302031 DUP8 DUP3 ADD MSTORE PUSH32 0x3730206D202D3132203020612031322031382030203120302032342030206120 DUP3 DUP3 ADD MSTORE PUSH17 0x3132203138203020312030202D3234203 PUSH1 0x7C SHL DUP4 DUP3 ADD MSTORE DUP5 DUP9 ADD MSTORE PUSH3 0x2A2 PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x71 DUP2 MSTORE PUSH32 0x4D2031373020313830206D202D31372030206120313720313320302031203020 DUP6 DUP3 ADD MSTORE PUSH32 0x333420302061203137203133203020312030202D33342030204D203233302031 DUP8 DUP3 ADD MSTORE PUSH32 0x3830206D202D3137203020612031372031332030203120302033342030206120 DUP3 DUP3 ADD MSTORE PUSH17 0x3137203133203020312030202D3334203 PUSH1 0x7C SHL DUP4 DUP3 ADD MSTORE DUP7 DUP9 ADD MSTORE PUSH1 0x1 SWAP7 DUP8 SLOAD DUP5 DUP10 SSTORE DUP1 DUP6 LT PUSH3 0xFD9 JUMPI JUMPDEST POP DUP8 DUP7 MSTORE DUP5 DUP7 KECCAK256 SWAP1 DUP7 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH3 0xEBB JUMPI POP POP POP PUSH3 0x363 PUSH3 0x1140 JUMP JUMPDEST PUSH3 0x36D PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x1B DUP2 MSTORE PUSH32 0x4D20313630203232302051203230302032343020323430203232300000000000 DUP7 DUP3 ADD MSTORE DUP2 MSTORE PUSH3 0x3A2 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x1B DUP2 MSTORE PUSH32 0x4D20313630203232302051203230302032353020323430203232300000000000 DUP7 DUP3 ADD MSTORE DUP6 DUP3 ADD MSTORE PUSH3 0x3D9 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x1B DUP2 MSTORE PUSH32 0x4D20313630203232352051203230302032333520323430203232350000000000 DUP7 DUP3 ADD MSTORE DUP8 DUP3 ADD MSTORE PUSH1 0x2 SLOAD DUP5 PUSH1 0x2 SSTORE DUP1 DUP6 LT PUSH3 0xE9D JUMPI JUMPDEST POP PUSH1 0x2 DUP7 MSTORE DUP5 DUP7 KECCAK256 SWAP1 DUP7 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH3 0xD7F JUMPI POP POP POP PUSH3 0x437 PUSH3 0x1140 JUMP JUMPDEST PUSH3 0x441 PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x67 DUP2 MSTORE PUSH32 0x4D2031373020313830206D202D35203020612035203520302031203020313020 DUP7 DUP3 ADD MSTORE PUSH32 0x30206120352035203020312030202D31302030204D2032333020313830206D20 DUP9 DUP3 ADD MSTORE PUSH32 0x2D35203020612035203520302031203020313020302061203520352030203120 DUP4 DUP3 ADD MSTORE PUSH7 0x30202D3130203 PUSH1 0xCC SHL DUP5 DUP3 ADD MSTORE DUP2 MSTORE PUSH3 0x4CF PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x63 DUP2 MSTORE PUSH32 0x4D2031373020313730206D202D34203020612034203620302031203020382030 DUP7 DUP3 ADD MSTORE PUSH32 0x206120342036203020312030202D382030204D2032333020313730206D202D34 DUP9 DUP3 ADD MSTORE PUSH32 0x203020612034203620302031203020382030206120342036203020312030202D DUP4 DUP3 ADD MSTORE PUSH3 0x38203 PUSH1 0xEC SHL DUP5 DUP3 ADD MSTORE DUP6 DUP3 ADD MSTORE PUSH3 0x55B PUSH3 0x11B6 JUMP JUMPDEST PUSH1 0x63 DUP2 MSTORE PUSH32 0x4D2031373020313830206D202D33203020612033203320302031203020362030 DUP7 DUP3 ADD MSTORE PUSH32 0x206120332033203020312030202D362030204D2032333020313830206D202D33 DUP9 DUP3 ADD MSTORE PUSH32 0x203020612033203320302031203020362030206120332033203020312030202D DUP4 DUP3 ADD MSTORE PUSH3 0x36203 PUSH1 0xEC SHL DUP5 DUP3 ADD MSTORE DUP8 DUP3 ADD MSTORE DUP4 SLOAD DUP5 DUP1 SSTORE DUP1 DUP6 LT PUSH3 0xD62 JUMPI JUMPDEST POP DUP4 DUP7 MSTORE DUP5 DUP7 KECCAK256 SWAP1 DUP7 SWAP1 JUMPDEST DUP6 DUP3 LT PUSH3 0xC30 JUMPI POP POP POP PUSH3 0x60B PUSH3 0x1176 JUMP JUMPDEST SWAP3 PUSH3 0x616 PUSH3 0x11D6 JUMP JUMPDEST SWAP8 PUSH1 0x4 SWAP9 DUP10 DUP2 MSTORE PUSH4 0x1A195859 PUSH1 0xE2 SHL DUP8 DUP3 ADD MSTORE DUP6 MSTORE PUSH3 0x635 PUSH3 0x11D6 JUMP JUMPDEST DUP10 DUP2 MSTORE PUSH4 0x65796573 PUSH1 0xE0 SHL DUP8 DUP3 ADD MSTORE DUP7 DUP7 ADD MSTORE PUSH3 0x652 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x707570696C73 PUSH1 0xD0 SHL DUP8 DUP3 ADD MSTORE DUP9 DUP7 ADD MSTORE PUSH3 0x672 PUSH3 0x11D6 JUMP JUMPDEST SWAP5 PUSH1 0x5 SWAP6 DUP7 DUP2 MSTORE PUSH5 0xDADEEAE8D PUSH1 0xDB SHL DUP9 DUP3 ADD MSTORE DUP5 DUP3 ADD MSTORE DUP10 SWAP1 DUP9 SWAP1 JUMPDEST DUP12 DUP3 LT PUSH3 0xAF9 JUMPI POP POP POP POP DUP6 SWAP3 PUSH1 0x8 SWAP5 SWAP3 PUSH3 0x94A DUP8 SWAP4 PUSH3 0x87F DUP12 PUSH3 0xAEB SWAP13 SWAP14 PUSH3 0x7AE PUSH3 0x6C0 PUSH3 0x1196 JUMP JUMPDEST PUSH3 0x6CA PUSH3 0x11D6 JUMP JUMPDEST SWAP12 DUP12 DUP14 MSTORE PUSH5 0x33B932B2B7 PUSH1 0xD9 SHL SWAP13 DUP14 DUP13 DUP3 ADD MSTORE DUP3 MSTORE PUSH3 0x6E9 PUSH3 0x11D6 JUMP JUMPDEST SWAP14 DUP15 MSTORE PUSH8 0x1CDD185B99185C99 PUSH1 0xC2 SHL SWAP14 DUP15 DUP13 DUP3 ADD MSTORE DUP12 DUP4 ADD MSTORE PUSH3 0x70C PUSH3 0x11F6 JUMP JUMPDEST SWAP1 DUP2 MSTORE DUP5 DUP3 ADD MSTORE PUSH3 0x71D PUSH3 0x11D6 JUMP JUMPDEST SWAP11 PUSH1 0x7 SWAP13 DUP13 DUP15 DUP1 SWAP15 MSTORE PUSH7 0x23613365363335 PUSH1 0xC8 SHL DUP14 DUP3 ADD MSTORE DUP11 DUP5 ADD MSTORE PUSH3 0x743 PUSH3 0x11D6 JUMP JUMPDEST SWAP12 DUP14 DUP14 MSTORE PUSH7 0x11B33333333333 PUSH1 0xC9 SHL SWAP13 DUP14 DUP3 DUP3 ADD MSTORE DUP13 DUP6 ADD MSTORE DUP14 PUSH3 0x767 PUSH3 0x11D6 JUMP JUMPDEST SWAP15 DUP16 MSTORE PUSH7 0x2330303030303 PUSH1 0xCC SHL SWAP15 DUP16 SWAP1 DUP2 DUP5 DUP3 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH3 0x78C PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP3 DUP3 ADD MSTORE PUSH1 0xC0 DUP6 ADD MSTORE PUSH3 0x7A2 PUSH3 0x11D6 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP3 ADD MSTORE PUSH3 0x12DC JUMP JUMPDEST DUP12 DUP14 PUSH3 0x7BA PUSH3 0x1196 JUMP JUMPDEST SWAP4 DUP14 PUSH3 0x7C6 PUSH3 0x11D6 JUMP JUMPDEST SWAP4 DUP6 DUP6 MSTORE PUSH4 0x626C7565 PUSH1 0xE0 SHL SWAP5 DUP6 DUP3 DUP3 ADD MSTORE DUP8 MSTORE PUSH3 0x7E4 PUSH3 0x11D6 JUMP JUMPDEST SWAP2 PUSH1 0x8 DUP4 MSTORE DUP2 DUP4 ADD MSTORE DUP7 ADD MSTORE PUSH3 0x7FA PUSH3 0x11F6 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP5 ADD MSTORE DUP13 PUSH7 0x1199B11C19331B PUSH1 0xC9 SHL PUSH3 0x816 PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP14 DUP4 MSTORE DUP3 ADD MSTORE DUP8 DUP5 ADD MSTORE DUP13 DUP10 PUSH3 0x82D PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP14 DUP4 MSTORE DUP3 ADD MSTORE DUP9 DUP5 ADD MSTORE DUP13 DUP11 PUSH3 0x844 PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP14 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE DUP13 DUP11 PUSH3 0x85C PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP14 DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH3 0x872 PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP13 DUP3 ADD MSTORE PUSH3 0x12DC JUMP JUMPDEST PUSH3 0x889 PUSH3 0x1196 JUMP JUMPDEST SWAP1 PUSH3 0x894 PUSH3 0x11D6 JUMP JUMPDEST DUP2 DUP2 MSTORE PUSH3 0x1C9959 PUSH1 0xEA SHL SWAP1 DUP2 DUP13 DUP3 ADD MSTORE DUP4 MSTORE PUSH3 0x8B0 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x8 DUP2 MSTORE DUP11 DUP13 DUP3 ADD MSTORE DUP12 DUP5 ADD MSTORE DUP14 PUSH3 0x8C8 PUSH3 0x11F6 JUMP JUMPDEST SWAP1 DUP14 DUP3 MSTORE DUP5 ADD MSTORE PUSH3 0x8D9 PUSH3 0x11D6 JUMP JUMPDEST DUP10 DUP2 MSTORE PUSH7 0x8D9598D0D0D0D PUSH1 0xCA SHL DUP13 DUP3 ADD MSTORE DUP6 DUP5 ADD MSTORE PUSH3 0x8F9 PUSH3 0x11D6 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP8 DUP13 DUP3 ADD MSTORE DUP7 DUP5 ADD MSTORE PUSH3 0x90F PUSH3 0x11D6 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP9 DUP13 DUP3 ADD MSTORE PUSH1 0xA0 DUP5 ADD MSTORE PUSH3 0x926 PUSH3 0x11D6 JUMP JUMPDEST DUP10 DUP2 MSTORE DUP9 DUP13 DUP3 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH3 0x93D PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP11 DUP3 ADD MSTORE PUSH3 0x12DC JUMP JUMPDEST PUSH3 0xA1D PUSH3 0x958 PUSH3 0x1196 JUMP JUMPDEST PUSH3 0x962 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x6 DUP2 MSTORE PUSH6 0x707572706C65 PUSH1 0xD0 SHL SWAP1 DUP2 DUP12 DUP3 ADD MSTORE DUP3 MSTORE PUSH3 0x982 PUSH3 0x11D6 JUMP JUMPDEST PUSH1 0x8 DUP2 MSTORE DUP10 DUP12 DUP3 ADD MSTORE DUP11 DUP4 ADD MSTORE PUSH3 0x999 PUSH3 0x11F6 JUMP JUMPDEST DUP12 DUP2 MSTORE DUP14 DUP4 ADD MSTORE PUSH3 0x9AA PUSH3 0x11D6 JUMP JUMPDEST DUP9 DUP2 MSTORE PUSH7 0x23613835356637 PUSH1 0xC8 SHL DUP12 DUP3 ADD MSTORE DUP5 DUP4 ADD MSTORE PUSH3 0x9CA PUSH3 0x11D6 JUMP JUMPDEST DUP9 DUP2 MSTORE DUP7 DUP12 DUP3 ADD MSTORE DUP6 DUP4 ADD MSTORE PUSH3 0x9E0 PUSH3 0x11D6 JUMP JUMPDEST DUP9 DUP2 MSTORE DUP8 DUP12 DUP3 ADD MSTORE PUSH1 0xA0 DUP4 ADD MSTORE PUSH3 0x9F7 PUSH3 0x11D6 JUMP JUMPDEST DUP9 DUP2 MSTORE DUP8 DUP12 DUP3 ADD MSTORE PUSH1 0xC0 DUP4 ADD MSTORE PUSH3 0xA0E PUSH3 0x11D6 JUMP JUMPDEST SWAP1 PUSH1 0x6 DUP3 MSTORE DUP11 DUP3 ADD MSTORE PUSH3 0x12DC JUMP JUMPDEST PUSH3 0xA27 PUSH3 0x1196 JUMP JUMPDEST SWAP8 PUSH3 0xA32 PUSH3 0x11D6 JUMP JUMPDEST SWAP7 PUSH1 0x6 DUP9 MSTORE PUSH6 0x79656C6C6F77 PUSH1 0xD0 SHL SWAP8 DUP9 DUP11 DUP3 ADD MSTORE DUP11 MSTORE PUSH3 0xA53 PUSH3 0x11D6 JUMP JUMPDEST SWAP1 PUSH1 0x8 DUP3 MSTORE DUP10 DUP3 ADD MSTORE DUP9 DUP11 ADD MSTORE PUSH3 0xA6A PUSH3 0x11F6 JUMP JUMPDEST SWAP1 DUP2 MSTORE DUP11 DUP10 ADD MSTORE PUSH3 0xA7B PUSH3 0x11D6 JUMP JUMPDEST SWAP1 DUP6 DUP3 MSTORE PUSH7 0x23666163633135 PUSH1 0xC8 SHL DUP9 DUP4 ADD MSTORE DUP9 ADD MSTORE PUSH3 0xA9B PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP5 DUP4 MSTORE DUP7 DUP4 ADD MSTORE DUP7 ADD MSTORE PUSH3 0xAB0 PUSH3 0x11D6 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP2 DUP6 DUP3 ADD MSTORE PUSH1 0xA0 DUP7 ADD MSTORE PUSH3 0xAC7 PUSH3 0x11D6 JUMP JUMPDEST SWAP2 DUP3 MSTORE DUP4 DUP3 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH3 0xADD PUSH3 0x11D6 JUMP JUMPDEST SWAP2 PUSH1 0x6 DUP4 MSTORE DUP3 ADD MSTORE PUSH3 0x12DC JUMP JUMPDEST MLOAD PUSH2 0x1C2A SWAP1 DUP2 PUSH3 0x1A72 DUP3 CODECOPY RETURN JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0xC1C JUMPI DUP6 SWAP2 DUP12 SWAP2 DUP14 PUSH3 0xB20 DUP9 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP1 DUP14 PUSH1 0x1F SWAP3 DUP4 DUP2 GT PUSH3 0xBE1 JUMPI JUMPDEST POP POP DUP5 SWAP2 DUP4 GT PUSH1 0x1 EQ PUSH3 0xB71 JUMPI SWAP1 DUP6 SWAP7 DUP4 PUSH3 0xB65 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP12 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP7 SSTORE JUMPDEST ADD SWAP4 ADD SWAP2 ADD SWAP1 SWAP2 PUSH3 0x68F JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xB46 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND DUP10 DUP4 MSTORE DUP6 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH3 0xBBE JUMPI POP SWAP1 DUP7 SWAP8 DUP5 DUP9 SWAP6 SWAP5 SWAP4 LT PUSH3 0xBA5 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH3 0xB58 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP14 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0xB97 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 DUP7 SWAP3 SWAP7 SWAP2 SWAP4 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP3 DUP15 SWAP5 SWAP2 DUP11 SWAP7 SWAP4 SWAP8 SWAP5 PUSH3 0xB7F JUMP JUMPDEST PUSH3 0xC0A SWAP2 DUP12 DUP5 MSTORE DUP8 DUP5 KECCAK256 SWAP1 DUP6 DUP1 DUP9 ADD DUP3 SHR DUP4 ADD SWAP4 DUP11 DUP10 LT PUSH3 0xC12 JUMPI JUMPDEST ADD SWAP1 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST DUP14 CODESIZE PUSH3 0xB2E JUMP JUMPDEST SWAP4 POP DUP3 SWAP4 PUSH3 0xBFF JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP12 MSTORE PUSH1 0x41 DUP14 MSTORE PUSH1 0x24 DUP12 REVERT JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0xD4E JUMPI DUP12 SWAP2 DUP10 SWAP2 PUSH3 0xC56 DUP8 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP5 DUP13 PUSH1 0x1F SWAP7 DUP6 DUP9 DUP3 GT PUSH3 0xD1E JUMPI JUMPDEST POP POP POP DUP13 DUP5 SWAP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0xCAC JUMPI SWAP6 DUP3 SWAP2 DUP7 SWAP8 SWAP3 PUSH3 0xCA0 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP13 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP7 SSTORE JUMPDEST ADD SWAP4 ADD SWAP2 ADD SWAP1 SWAP2 PUSH3 0x5F6 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xC81 JUMP JUMPDEST SWAP1 SWAP6 PUSH1 0x1F NOT DUP4 AND DUP10 DUP4 MSTORE DUP6 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH3 0xCFA JUMPI POP SWAP1 DUP7 SWAP8 DUP5 DUP9 SWAP6 SWAP5 SWAP4 LT PUSH3 0xCE1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH3 0xC93 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0xCD3 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 DUP7 SWAP3 SWAP7 SWAP2 SWAP4 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP3 DUP16 SWAP6 SWAP3 SWAP7 SWAP4 SWAP2 DUP14 SWAP6 SWAP3 PUSH3 0xCBB JUMP JUMPDEST DUP3 DUP12 PUSH3 0xD45 SWAP5 MSTORE KECCAK256 PUSH1 0x5 DUP10 DUP1 DUP8 ADD DUP3 SHR DUP4 ADD SWAP4 DUP10 DUP9 LT PUSH3 0xC12 JUMPI ADD SWAP1 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST DUP13 CODESIZE DUP6 PUSH3 0xC65 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP11 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP11 REVERT JUMPDEST DUP5 DUP8 MSTORE DUP6 DUP8 KECCAK256 PUSH3 0xD78 SWAP2 DUP2 ADD SWAP1 DUP7 ADD PUSH3 0x126C JUMP JUMPDEST CODESIZE PUSH3 0x5EB JUMP JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0xD4E JUMPI DUP12 SWAP2 DUP10 SWAP2 PUSH3 0xDA5 DUP8 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP5 DUP13 PUSH1 0x1F SWAP7 DUP6 DUP9 DUP3 GT PUSH3 0xE6D JUMPI JUMPDEST POP POP POP DUP13 DUP5 SWAP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0xDFB JUMPI SWAP6 DUP3 SWAP2 DUP7 SWAP8 SWAP3 PUSH3 0xDEF JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP13 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP7 SSTORE JUMPDEST ADD SWAP4 ADD SWAP2 ADD SWAP1 SWAP2 PUSH3 0x422 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xDD0 JUMP JUMPDEST SWAP1 SWAP6 PUSH1 0x1F NOT DUP4 AND DUP10 DUP4 MSTORE DUP6 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH3 0xE49 JUMPI POP SWAP1 DUP7 SWAP8 DUP5 DUP9 SWAP6 SWAP5 SWAP4 LT PUSH3 0xE30 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH3 0xDE2 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0xE22 JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 DUP7 SWAP3 SWAP7 SWAP2 SWAP4 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP3 DUP16 SWAP6 SWAP3 SWAP7 SWAP4 SWAP2 DUP14 SWAP6 SWAP3 PUSH3 0xE0A JUMP JUMPDEST DUP3 DUP12 PUSH3 0xE94 SWAP5 MSTORE KECCAK256 PUSH1 0x5 DUP10 DUP1 DUP8 ADD DUP3 SHR DUP4 ADD SWAP4 DUP10 DUP9 LT PUSH3 0xC12 JUMPI ADD SWAP1 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST DUP13 CODESIZE DUP6 PUSH3 0xDB4 JUMP JUMPDEST PUSH1 0x2 DUP8 MSTORE DUP6 DUP8 KECCAK256 PUSH3 0xEB4 SWAP2 DUP2 ADD SWAP1 DUP7 ADD PUSH3 0x126C JUMP JUMPDEST CODESIZE PUSH3 0x416 JUMP JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0xD4E JUMPI DUP12 SWAP2 DUP10 SWAP2 PUSH3 0xEE1 DUP8 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP5 DUP13 PUSH1 0x1F SWAP7 DUP6 DUP9 DUP3 GT PUSH3 0xFA9 JUMPI JUMPDEST POP POP POP DUP13 DUP5 SWAP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0xF37 JUMPI SWAP6 DUP3 SWAP2 DUP7 SWAP8 SWAP3 PUSH3 0xF2B JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP13 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP7 SSTORE JUMPDEST ADD SWAP4 ADD SWAP2 ADD SWAP1 SWAP2 PUSH3 0x34E JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xF0C JUMP JUMPDEST SWAP1 SWAP6 PUSH1 0x1F NOT DUP4 AND DUP10 DUP4 MSTORE DUP6 DUP4 KECCAK256 SWAP3 JUMPDEST DUP2 DUP2 LT PUSH3 0xF85 JUMPI POP SWAP1 DUP7 SWAP8 DUP5 DUP9 SWAP6 SWAP5 SWAP4 LT PUSH3 0xF6C JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP7 SSTORE PUSH3 0xF1E JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0xF5E JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 DUP7 SWAP3 SWAP7 SWAP2 SWAP4 DUP8 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP3 DUP16 SWAP6 SWAP3 SWAP7 SWAP4 SWAP2 DUP14 SWAP6 SWAP3 PUSH3 0xF46 JUMP JUMPDEST DUP3 DUP12 PUSH3 0xFD0 SWAP5 MSTORE KECCAK256 PUSH1 0x5 DUP10 DUP1 DUP8 ADD DUP3 SHR DUP4 ADD SWAP4 DUP10 DUP9 LT PUSH3 0xC12 JUMPI ADD SWAP1 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST DUP13 CODESIZE DUP6 PUSH3 0xEF0 JUMP JUMPDEST DUP9 DUP8 MSTORE DUP6 DUP8 KECCAK256 PUSH3 0xFEF SWAP2 DUP2 ADD SWAP1 DUP7 ADD PUSH3 0x126C JUMP JUMPDEST CODESIZE PUSH3 0x343 JUMP JUMPDEST DUP1 MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH3 0x110A JUMPI SWAP1 DUP6 SWAP2 PUSH3 0x1019 DUP7 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP1 PUSH1 0x1F SWAP2 DUP3 DUP2 GT PUSH3 0x10DA JUMPI JUMPDEST POP DUP4 SWAP2 DUP4 GT PUSH1 0x1 EQ PUSH3 0x106F JUMPI SWAP2 DUP1 PUSH1 0x1 SWAP6 SWAP3 DUP7 SWAP6 SWAP5 DUP12 SWAP3 PUSH3 0x1063 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP14 SHL SHR NOT AND SWAP1 DUP5 SHL OR DUP7 SSTORE JUMPDEST ADD SWAP4 ADD SWAP2 ADD SWAP1 SWAP2 PUSH3 0x14B JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1044 JUMP JUMPDEST DUP7 DUP10 MSTORE DUP4 DUP10 KECCAK256 SWAP2 SWAP1 PUSH1 0x1F NOT DUP5 AND DUP11 JUMPDEST DUP2 DUP2 LT PUSH3 0x10C1 JUMPI POP SWAP2 PUSH1 0x1 SWAP7 SWAP4 SWAP2 DUP6 DUP9 SWAP8 SWAP7 SWAP5 LT PUSH3 0x10A8 JUMPI JUMPDEST POP POP POP DUP4 SHL DUP4 ADD DUP7 SSTORE PUSH3 0x1056 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP15 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x1099 JUMP JUMPDEST DUP3 DUP5 ADD MLOAD DUP6 SSTORE DUP11 SWAP7 PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x107E JUMP JUMPDEST PUSH3 0x1103 SWAP1 DUP9 DUP12 MSTORE DUP6 DUP12 KECCAK256 PUSH1 0x5 DUP6 DUP1 DUP9 ADD DUP3 SHR DUP4 ADD SWAP4 DUP10 DUP10 LT PUSH3 0xC12 JUMPI ADD SWAP1 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x1026 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP8 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP8 REVERT JUMPDEST DUP4 DUP1 MSTORE DUP3 DUP5 KECCAK256 PUSH3 0x1134 SWAP2 DUP2 ADD SWAP1 DUP8 ADD PUSH3 0x126C JUMP JUMPDEST CODESIZE PUSH3 0x140 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x80 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xE0 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0xA0 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 SWAP1 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x1160 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH3 0x1248 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH3 0x1232 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH3 0x1226 JUMP JUMPDEST DUP2 DUP2 LT PUSH3 0x125F JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1253 JUMP JUMPDEST DUP2 DUP2 LT PUSH3 0x1278 JUMPI POP POP JUMP JUMPDEST DUP1 PUSH3 0x1287 PUSH1 0x1 SWAP3 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP1 PUSH3 0x1296 JUMPI JUMPDEST POP ADD PUSH3 0x126C JUMP JUMPDEST PUSH1 0x1F DUP1 DUP3 GT DUP5 EQ PUSH3 0x12B0 JUMPI POP POP PUSH1 0x0 DUP2 SSTORE JUMPDEST CODESIZE PUSH3 0x128E JUMP JUMPDEST PUSH3 0x12D0 PUSH1 0x0 SWAP3 DUP5 DUP5 MSTORE DUP6 PUSH1 0x20 SWAP4 DUP5 DUP7 KECCAK256 SWAP3 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 ADD PUSH3 0x1253 JUMP JUMPDEST DUP2 KECCAK256 DUP2 DUP4 SSTORE SSTORE PUSH3 0x12A9 JUMP JUMPDEST DUP2 MLOAD SWAP1 PUSH1 0x20 SWAP2 DUP3 DUP5 ADD MLOAD SWAP3 PUSH1 0x40 DUP6 ADD MLOAD SWAP3 PUSH1 0x60 DUP7 ADD MLOAD SWAP6 PUSH1 0x80 DUP2 ADD MLOAD SWAP1 PUSH1 0xC0 PUSH1 0xA0 DUP3 ADD MLOAD SWAP2 ADD MLOAD SWAP2 PUSH3 0x130E PUSH3 0x1176 JUMP JUMPDEST SWAP9 DUP10 MSTORE DUP5 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH3 0x1329 PUSH3 0x1176 JUMP JUMPDEST SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x60 DUP4 ADD SWAP6 DUP7 MSTORE DUP2 PUSH1 0x40 MLOAD DUP3 DUP2 SWAP4 MLOAD SWAP1 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH3 0x1A5B JUMPI POP POP DUP2 ADD PUSH1 0x9 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 SWAP2 MLOAD SWAP1 DUP2 MLOAD SWAP4 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB SWAP5 DUP6 DUP2 GT PUSH3 0x1160 JUMPI DUP1 PUSH3 0x1383 DUP7 SLOAD PUSH3 0x1216 JUMP JUMPDEST SWAP5 PUSH1 0x1F SWAP6 DUP7 DUP2 GT PUSH3 0x1A29 JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x19BF JUMPI PUSH1 0x0 SWAP3 PUSH3 0x19B3 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR DUP5 SSTORE JUMPDEST PUSH1 0x1 SWAP6 DUP7 DUP6 ADD SWAP1 MLOAD DUP1 MLOAD SWAP1 DUP8 DUP3 GT PUSH3 0x1160 JUMPI DUP2 SWAP1 PUSH3 0x13DD DUP5 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP8 DUP2 GT PUSH3 0x1981 JUMPI JUMPDEST POP DUP6 SWAP1 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH3 0x1919 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x190D JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP9 SHL OR SWAP1 SSTORE JUMPDEST MLOAD DUP1 MLOAD PUSH1 0x2 DUP6 ADD SWAP2 DUP7 DUP3 GT PUSH3 0x1160 JUMPI DUP2 SWAP1 PUSH3 0x142F DUP5 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x18DB JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x1873 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x1867 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT PUSH1 0x3 DUP4 SWAP1 SHL SHR NOT AND SWAP1 DUP8 SHL OR SWAP1 SSTORE JUMPDEST PUSH1 0x3 SWAP3 DUP4 DUP2 ADD SWAP7 MLOAD SWAP7 DUP8 MLOAD DUP1 MLOAD SWAP1 DUP8 DUP3 GT PUSH3 0x1160 JUMPI DUP2 SWAP1 PUSH3 0x1487 DUP5 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP8 DUP2 GT PUSH3 0x1835 JUMPI JUMPDEST POP DUP6 SWAP1 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH3 0x17CE JUMPI PUSH1 0x0 SWAP3 PUSH3 0x17C2 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SHR NOT AND SWAP1 DUP9 SHL OR SWAP1 SSTORE JUMPDEST PUSH1 0x4 DUP2 ADD DUP3 DUP9 ADD MLOAD DUP1 MLOAD SWAP1 DUP8 DUP3 GT PUSH3 0x1160 JUMPI DUP2 SWAP1 PUSH3 0x14DA DUP5 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP8 DUP2 GT PUSH3 0x1790 JUMPI JUMPDEST POP DUP6 SWAP1 DUP8 DUP4 GT PUSH1 0x1 EQ PUSH3 0x1729 JUMPI PUSH1 0x0 SWAP3 PUSH3 0x171D JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP9 SHL SHR NOT AND SWAP1 DUP9 SHL OR SWAP1 SSTORE JUMPDEST PUSH1 0x5 DUP2 ADD PUSH1 0x40 DUP9 ADD MLOAD DUP1 MLOAD SWAP1 DUP8 DUP3 GT PUSH3 0x1160 JUMPI PUSH3 0x152C DUP4 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP7 DUP2 GT PUSH3 0x16EB JUMPI JUMPDEST POP DUP5 SWAP1 DUP7 DUP4 GT PUSH1 0x1 EQ PUSH3 0x1679 JUMPI SWAP2 DUP1 PUSH1 0x6 SWAP5 SWAP3 PUSH1 0x60 SWAP7 SWAP5 PUSH1 0x0 SWAP3 PUSH3 0x166D JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP11 SHL SHR NOT AND SWAP1 DUP11 SHL OR SWAP1 SSTORE JUMPDEST ADD SWAP7 ADD MLOAD SWAP1 DUP2 MLOAD SWAP5 DUP6 GT PUSH3 0x1160 JUMPI PUSH3 0x1583 DUP8 SLOAD PUSH3 0x1216 JUMP JUMPDEST DUP4 DUP2 GT PUSH3 0x1630 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x15C6 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x15BA JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x15A9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x1615 JUMPI POP POP POP LT PUSH3 0x15FA JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x15EF JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15DC JUMP JUMPDEST PUSH3 0x165C SWAP1 DUP9 PUSH1 0x0 MSTORE DUP3 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP10 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP6 DUP11 LT PUSH3 0x1663 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x158C JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1650 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x1556 JUMP JUMPDEST DUP10 SWAP3 SWAP2 PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP10 DUP3 DUP3 LT PUSH3 0x16D4 JUMPI POP POP SWAP2 PUSH1 0x60 SWAP8 SWAP6 SWAP4 SWAP2 DUP6 PUSH1 0x6 SWAP9 SWAP7 SWAP5 LT PUSH3 0x16BB JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x1568 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP13 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x16AD JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP15 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x168E JUMP JUMPDEST PUSH3 0x1716 SWAP1 DUP5 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x1535 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x14FA JUMP JUMPDEST SWAP1 DUP11 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP10 DUP3 DUP3 LT PUSH3 0x1779 JUMPI POP POP DUP5 GT PUSH3 0x1760 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x150C JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x1752 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP15 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x173F JUMP JUMPDEST PUSH3 0x17BB SWAP1 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 DUP10 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x14E3 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x14A7 JUMP JUMPDEST SWAP1 DUP11 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP10 DUP3 DUP3 LT PUSH3 0x181E JUMPI POP POP DUP5 GT PUSH3 0x1805 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x14B9 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP11 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x17F7 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP15 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x17E4 JUMP JUMPDEST PUSH3 0x1860 SWAP1 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 DUP10 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x1490 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x144F JUMP JUMPDEST SWAP1 DUP10 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP9 DUP3 DUP3 LT PUSH3 0x18C4 JUMPI POP POP DUP5 GT PUSH3 0x18AA JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x1463 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x189C JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP14 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x1889 JUMP JUMPDEST PUSH3 0x1906 SWAP1 DUP6 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x1438 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x13FD JUMP JUMPDEST SWAP1 DUP11 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP10 DUP3 DUP3 LT PUSH3 0x196A JUMPI POP POP DUP5 GT PUSH3 0x1950 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x1411 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x1942 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP15 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x192F JUMP JUMPDEST PUSH3 0x19AC SWAP1 DUP6 PUSH1 0x0 MSTORE DUP8 PUSH1 0x0 KECCAK256 DUP10 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP11 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x13E6 JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0x13A7 JUMP JUMPDEST PUSH1 0x0 DUP9 DUP2 MSTORE DUP7 DUP2 KECCAK256 SWAP4 POP PUSH1 0x1F NOT DUP6 AND SWAP1 JUMPDEST DUP8 DUP3 DUP3 LT PUSH3 0x1A12 JUMPI POP POP SWAP1 DUP5 PUSH1 0x1 SWAP6 SWAP5 SWAP4 SWAP3 LT PUSH3 0x19F8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP5 SSTORE PUSH3 0x13BC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x19EA JUMP JUMPDEST PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP4 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD PUSH3 0x19D0 JUMP JUMPDEST PUSH3 0x1A54 SWAP1 DUP9 PUSH1 0x0 MSTORE DUP7 PUSH1 0x0 KECCAK256 DUP9 DUP1 DUP7 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP10 DUP8 LT PUSH3 0x1663 JUMPI ADD PUSH1 0x5 SHR ADD SWAP1 PUSH3 0x1253 JUMP JUMPDEST CODESIZE PUSH3 0x1390 JUMP JUMPDEST DUP2 DUP2 ADD DUP6 ADD MLOAD DUP7 DUP3 ADD MSTORE DUP7 SWAP5 DUP7 SWAP5 POP ADD PUSH3 0x134C JUMP INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80A6DFA0 EQ PUSH2 0x1375 JUMPI DUP1 PUSH4 0x934118FB EQ PUSH2 0xCFE JUMPI DUP1 PUSH4 0xAD27274B EQ PUSH2 0x91 JUMPI PUSH4 0xC65EB180 EQ PUSH2 0x48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH2 0x88 PUSH2 0x74 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x8C JUMPI PUSH2 0xC2 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x151A JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE8 SHL SUB NOT DUP4 AND DUP4 SUB PUSH2 0x8C JUMPI PUSH1 0xA4 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x8C JUMPI PUSH2 0xEF SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x151A JUMP JUMPDEST SWAP1 PUSH2 0xF8 PUSH2 0x1A65 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP4 PUSH2 0x105 DUP6 PUSH2 0x14A6 JUMP JUMPDEST PUSH1 0x6 DUP6 MSTORE PUSH1 0x20 CALLDATASIZE DUP2 DUP8 ADD CALLDATACOPY PUSH1 0x0 JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0xC6D JUMPI POP POP DUP2 MLOAD ISZERO SWAP1 POP PUSH2 0xC66 JUMPI JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 MLOAD PUSH2 0x13C DUP2 DUP4 DUP6 DUP9 ADD PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD PUSH1 0x9 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH1 0x60 PUSH2 0x18D PUSH1 0x3 PUSH1 0x40 MLOAD SWAP4 PUSH2 0x15A DUP6 PUSH2 0x148B JUMP JUMPDEST PUSH2 0x163 DUP2 PUSH2 0x15BE JUMP JUMPDEST DUP6 MSTORE PUSH2 0x171 PUSH1 0x1 DUP3 ADD PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x182 PUSH1 0x2 DUP3 ADD PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE ADD PUSH2 0x1664 JUMP JUMPDEST SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x21 DUP2 MSTORE PUSH2 0x1B7 DUP2 PUSH2 0x14C1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND MOD PUSH1 0x3 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0xF8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x21 DUP2 MSTORE PUSH2 0x1E4 DUP2 PUSH2 0x14C1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND MOD PUSH1 0x3 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE PUSH1 0x1 PUSH1 0xF9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x21 DUP2 MSTORE PUSH2 0x211 DUP2 PUSH2 0x14C1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND MOD PUSH1 0x3 PUSH1 0xFF PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 PUSH1 0x4 CALLDATALOAD DUP3 MSTORE DUP4 PUSH1 0xF8 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x21 DUP2 MSTORE PUSH2 0x23D DUP2 PUSH2 0x14C1 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 AND MOD SWAP3 PUSH1 0x0 SLOAD DUP2 LT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x0 DUP1 MSTORE PUSH2 0x27C SWAP1 PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD PUSH2 0x15BE JUMP JUMPDEST SWAP4 MLOAD SWAP1 DUP2 MLOAD SWAP4 PUSH1 0x60 DUP4 ADD MLOAD SWAP6 PUSH1 0x40 PUSH1 0x20 DUP6 ADD MLOAD SWAP5 ADD MLOAD SWAP5 PUSH1 0x1 SLOAD DUP2 LT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP2 PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP3 PUSH1 0x2 SLOAD DUP2 LT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x2 PUSH1 0x0 MSTORE PUSH2 0x2F9 SWAP1 PUSH32 0x405787FA12A823E0F2B7631CC41B3BA8828B3321CA811111FA75CD3AA3BB5ACE ADD PUSH2 0x15BE JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP8 PUSH1 0x20 DUP10 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1BB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 MSTORE PUSH1 0x40 DUP10 ADD PUSH32 0x30302F737667222076696577426F783D22302030203430302034303022207769 SWAP1 MSTORE PUSH23 0x323A341E911A181811103432B4B3B43A1E911A1818111F PUSH1 0x49 SHL PUSH1 0x60 DUP11 ADD MSTORE PUSH1 0x77 DUP10 ADD PUSH7 0x1E39BA3CB6329F PUSH1 0xC9 SHL SWAP1 MSTORE PUSH1 0x7E DUP10 ADD PUSH11 0x173432B0B23DB334B6361D PUSH1 0xA9 SHL SWAP1 MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x89 DUP12 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x398 SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP9 ADD SWAP2 PUSH8 0x1DB9BA3937B5B29D PUSH1 0xC1 SHL DUP1 PUSH1 0x89 DUP6 ADD MSTORE DUP3 MLOAD PUSH1 0x20 DUP5 ADD SWAP5 DUP2 PUSH1 0x91 DUP3 ADD SWAP1 PUSH2 0x3C4 SWAP2 DUP9 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP8 PUSH19 0x3B7374726F6B652D77696474683A3370783B7D PUSH1 0x68 SHL SWAP9 DUP10 PUSH1 0x91 DUP3 ADD MSTORE PUSH1 0xA4 DUP2 ADD PUSH11 0x1732BCB2B9BDB334B6361D PUSH1 0xA9 SHL SWAP1 MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0xAF DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x40F SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP1 PUSH1 0xAF DUP3 ADD MSTORE DUP3 MLOAD SWAP1 DUP2 PUSH1 0xB7 DUP3 ADD SWAP1 PUSH2 0x429 SWAP2 DUP8 PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0xB7 DUP2 ADD PUSH19 0x3B7374726F6B652D77696474683A3270783B7D PUSH1 0x68 SHL SWAP1 MSTORE PUSH1 0xCA DUP2 ADD PUSH13 0x17383AB834B639BDB334B6361D PUSH1 0x99 SHL SWAP1 MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0xD7 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x474 SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP1 PUSH1 0xD7 DUP3 ADD PUSH14 0x3B7374726F6B653A6E6F6E653B7D PUSH1 0x90 SHL SWAP1 MSTORE PUSH1 0xE5 DUP3 ADD PUSH24 0x1736B7BABA343DB334B6361D3737B7329DB9BA3937B5B29D PUSH1 0x41 SHL SWAP1 MSTORE MLOAD SWAP2 DUP3 PUSH1 0xFD DUP4 ADD PUSH2 0x4C0 SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0xFD DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH8 0x1E17B9BA3CB6329F PUSH1 0xC1 SHL PUSH2 0x110 DUP6 ADD MSTORE PUSH32 0x3C726563742077696474683D2234303022206865696768743D22343030222066 PUSH2 0x118 DUP6 ADD MSTORE PUSH15 0x34B6361E911198181818181811179F PUSH1 0x89 SHL PUSH2 0x138 DUP6 ADD MSTORE PUSH9 0x1E3830BA3410321E91 PUSH1 0xB9 SHL PUSH2 0x147 DUP6 ADD DUP2 SWAP1 MSTORE DUP2 MLOAD SWAP1 SWAP5 PUSH2 0x150 SWAP3 PUSH2 0x54A SWAP1 DUP4 SWAP1 DUP6 DUP5 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x1561 JUMP JUMPDEST ADD SWAP1 PUSH16 0x111031B630B9B99E913432B0B211179F PUSH1 0x81 SHL SWAP1 DUP3 ADD MSTORE DUP4 PUSH2 0x160 DUP3 ADD MSTORE PUSH2 0x169 ADD PUSH2 0x578 SWAP2 PUSH2 0x19E2 JUMP JUMPDEST PUSH16 0x111031B630B9B99E9132BCB2B991179F PUSH1 0x81 SHL DUP2 MSTORE DUP3 PUSH1 0x10 DUP3 ADD MSTORE PUSH1 0x19 ADD PUSH2 0x5A0 SWAP2 PUSH2 0x19E2 JUMP JUMPDEST SWAP1 PUSH18 0x111031B630B9B99E91383AB834B63991179F PUSH1 0x71 SHL DUP3 MSTORE PUSH1 0x12 DUP3 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x1B DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x5D4 SWAP3 PUSH2 0x1561 JUMP JUMPDEST PUSH17 0x111031B630B9B99E9136B7BABA3411179F PUSH1 0x79 SHL PUSH1 0x1B SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH32 0x3C7465787420783D223230302220793D223238302220666F6E742D66616D696C PUSH1 0x2C DUP3 ADD MSTORE PUSH32 0x793D22417269616C2220666F6E742D73697A653D223136222066696C6C3D2223 PUSH1 0x4C DUP3 ADD MSTORE PUSH32 0x6666666666662220746578742D616E63686F723D226D6964646C65223E000000 PUSH1 0x6C DUP3 ADD MSTORE DUP5 MLOAD SWAP1 PUSH2 0x679 DUP3 PUSH1 0x89 DUP4 ADD PUSH1 0x20 DUP10 ADD PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0x89 DUP2 ADD PUSH7 0x1E17BA32BC3A1F PUSH1 0xC9 SHL SWAP1 MSTORE PUSH1 0x90 DUP2 ADD PUSH6 0x1E17B9BB339F PUSH1 0xD1 SHL SWAP1 MSTORE SUB PUSH1 0x76 DUP2 ADD DUP3 MSTORE PUSH1 0x96 ADD PUSH2 0x6AF SWAP1 DUP3 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x6B8 SWAP1 PUSH2 0x1731 JUMP JUMPDEST SWAP2 PUSH1 0x40 MLOAD DUP1 SWAP4 PUSH1 0x20 DUP3 ADD PUSH26 0x19185D184E9A5B5859D94BDCDD99CADE1B5B0ED8985CD94D8D0B PUSH1 0x32 SHL SWAP1 MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x3A DUP5 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6F8 SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x1A DUP2 ADD DUP5 MSTORE PUSH1 0x3A ADD PUSH2 0x70E SWAP1 DUP5 PUSH2 0x14DC JUMP JUMPDEST DUP3 MLOAD PUSH1 0x20 DUP5 ADD KECCAK256 SWAP4 PUSH2 0x721 PUSH1 0x4 CALLDATALOAD PUSH2 0x18A5 JUMP JUMPDEST SWAP4 PUSH1 0x40 MLOAD DUP1 SWAP6 PUSH1 0x20 DUP3 ADD PUSH8 0x4C6F6F6769652023 PUSH1 0xC0 SHL SWAP1 MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x28 DUP5 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x74F SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x8 DUP2 ADD DUP7 MSTORE PUSH1 0x28 ADD PUSH2 0x765 SWAP1 DUP7 PUSH2 0x14DC JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP6 PUSH2 0x772 DUP8 PUSH2 0x18A5 JUMP JUMPDEST SWAP7 PUSH1 0x84 CALLDATALOAD SWAP2 PUSH2 0x780 DUP4 PUSH2 0x18A5 JUMP JUMPDEST SWAP9 PUSH1 0x40 MLOAD SWAP10 DUP11 SWAP2 PUSH1 0x20 DUP4 ADD PUSH26 0x54686973204C6F6F6769652069732074686520636F6C6F722023 PUSH1 0x30 SHL SWAP1 MSTORE DUP8 MLOAD PUSH1 0x3A DUP5 ADD DUP2 PUSH1 0x20 DUP12 ADD SWAP2 PUSH2 0x7C0 SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP4 ADD PUSH1 0x3A DUP2 ADD PUSH22 0x103BB4BA3410309031B43AB13134B732B9B99037B31 PUSH1 0x55 SHL SWAP1 MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x50 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7F8 SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0x50 DUP2 ADD PUSH21 0x1030B7321036B7BABA34103632B733BA341037B31 PUSH1 0x5D SHL SWAP1 MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x65 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x82E SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0x65 DUP2 ADD PUSH1 0x17 PUSH1 0xF9 SHL SWAP1 MSTORE SUB PUSH1 0x46 DUP2 ADD DUP11 MSTORE PUSH1 0x66 ADD PUSH2 0x84E SWAP1 DUP11 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x857 SWAP1 PUSH2 0x1AB1 JUMP JUMPDEST SWAP1 PUSH2 0x861 SWAP1 PUSH2 0x18A5 JUMP JUMPDEST SWAP2 PUSH2 0x86B SWAP1 PUSH2 0x18A5 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 PUSH27 0x3D912629A81A26B2BA30B230BA30911D103D913730B6B2911D1011 PUSH1 0x29 SHL PUSH1 0x20 DUP12 ADD MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x3B DUP13 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8AC SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP10 ADD PUSH18 0x1116113232B9B1B934B83A34B7B7111D1011 PUSH1 0x71 SHL PUSH1 0x3B DUP3 ADD MSTORE DUP2 MLOAD SWAP2 DUP3 PUSH1 0x4D DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8DF SWAP3 PUSH2 0x1561 JUMP JUMPDEST PUSH32 0x222C226C696E6B73223A205B7B227469746C65223A2257656273697465222C22 PUSH1 0x4D SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH32 0x75726C223A2268747470733A2F2F6C756B736F6C6F6F676965732E7665726365 PUSH1 0x6D DUP3 ADD MSTORE PUSH19 0x1B0B985C1C089F574B089A58DBDB888E96D74B PUSH1 0x6A SHL PUSH1 0x8D DUP3 ADD MSTORE PUSH32 0x22696D61676573223A205B5B7B227769647468223A203430302C226865696768 PUSH1 0xA0 DUP3 ADD MSTORE PUSH8 0x1D088E880D0C0C0B PUSH1 0xC2 SHL PUSH1 0xC0 DUP3 ADD MSTORE PUSH8 0x113AB936111D1011 PUSH1 0xC1 SHL PUSH1 0xC8 DUP3 ADD MSTORE DUP2 MLOAD SWAP2 PUSH2 0x9AA SWAP1 DUP4 SWAP1 PUSH1 0xD0 DUP5 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x1561 JUMP JUMPDEST ADD PUSH1 0xD0 DUP2 ADD PUSH32 0x222C22766572696669636174696F6E223A207B226D6574686F64223A20226B65 SWAP1 MSTORE PUSH25 0x31B1B0B5991A9B14313CBA32B9949116113230BA30911D1011 PUSH1 0x39 SHL PUSH1 0xF0 DUP3 ADD MSTORE DUP2 MLOAD SWAP1 PUSH2 0x109 SWAP3 DUP3 DUP5 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xA0D SWAP3 PUSH2 0x1561 JUMP JUMPDEST PUSH6 0x89F5F57574B PUSH1 0xD2 SHL SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH14 0x2261747472696275746573223A5B PUSH1 0x90 SHL PUSH2 0x10F DUP3 ADD MSTORE PUSH25 0x7B226B6579223A22636F6C6F72222C2276616C7565223A2223 PUSH1 0x38 SHL PUSH2 0x11D DUP3 ADD MSTORE DUP4 MLOAD PUSH2 0x136 SWAP5 SWAP1 SWAP2 SWAP1 PUSH2 0xA73 SWAP1 DUP4 SWAP1 DUP8 DUP5 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x1561 JUMP JUMPDEST PUSH19 0x88B089D1E5C19488E889CDD1C9A5B99C89F4B PUSH1 0x6A SHL SWAP2 ADD SWAP4 DUP5 ADD DUP2 SWAP1 MSTORE PUSH28 0x3D9135B2BC911D1131B43AB13134B732B9B99116113B30B63AB2911D PUSH1 0x21 SHL PUSH2 0x149 DUP6 ADD MSTORE DUP2 MLOAD SWAP1 SWAP4 PUSH2 0x165 SWAP3 PUSH2 0xAD2 SWAP1 DUP4 SWAP1 DUP6 DUP5 ADD SWAP1 PUSH1 0x20 ADD PUSH2 0x1561 JUMP JUMPDEST ADD PUSH18 0xB089D1E5C19488E889B9D5B58995C889F4B PUSH1 0x72 SHL DUP1 SWAP3 DUP3 ADD MSTORE PUSH2 0x177 DUP2 ADD PUSH32 0x7B226B6579223A226D6F7574684C656E677468222C2276616C7565223A000000 SWAP1 MSTORE DUP3 MLOAD SWAP1 PUSH2 0x194 SWAP4 DUP3 DUP6 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB2F SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP2 DUP3 ADD MSTORE PUSH27 0x3D9135B2BC911D113AB9B2B93730B6B29116113B30B63AB2911D11 PUSH1 0x29 SHL PUSH2 0x1A6 DUP3 ADD MSTORE DUP3 MLOAD SWAP1 PUSH2 0x1C1 SWAP4 DUP3 DUP6 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB72 SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP2 DUP3 ADD MSTORE PUSH23 0x3D9135B2BC911D113A3CB8329116113B30B63AB2911D11 PUSH1 0x49 SHL PUSH2 0x1D4 DUP3 ADD MSTORE DUP2 MLOAD SWAP1 PUSH2 0x1EB SWAP3 DUP3 DUP5 DUP4 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBB1 SWAP3 PUSH2 0x1561 JUMP JUMPDEST ADD SWAP1 PUSH18 0x222C2274797065223A22737472696E67227D PUSH1 0x70 SHL SWAP1 DUP3 ADD MSTORE PUSH2 0x1FD DUP2 ADD PUSH3 0x5D7D7D PUSH1 0xE8 SHL SWAP1 MSTORE SUB PUSH2 0x1E0 DUP2 ADD DUP3 MSTORE PUSH2 0x200 ADD PUSH2 0xBF1 SWAP1 DUP3 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0xBFA DUP2 PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 PUSH1 0x20 DUP3 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1BD5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 MSTORE DUP1 MLOAD SWAP1 DUP2 PUSH1 0x3D DUP5 ADD SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xC2A SWAP3 PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x1D DUP2 ADD DUP3 MSTORE PUSH1 0x3D ADD PUSH2 0xC40 SWAP1 DUP3 PUSH2 0x14DC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH2 0x88 SWAP2 DUP4 PUSH2 0x16D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DUP2 PUSH2 0x127 JUMP JUMPDEST DUP2 DUP2 BYTE SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP1 PUSH2 0xC8C PUSH1 0x4 DUP6 SWAP1 SHR PUSH1 0xFF AND DUP8 PUSH2 0x1A91 JUMP JUMPDEST MLOAD AND SWAP3 DUP3 PUSH1 0x1 SHL SWAP4 DUP4 DUP6 DIV PUSH1 0x2 EQ DUP5 ISZERO OR ISZERO PUSH2 0xCE8 JUMPI PUSH2 0xCBE SWAP2 PUSH1 0xF SWAP2 PUSH1 0x0 BYTE PUSH2 0xCB6 DUP8 DUP14 PUSH2 0x1A91 JUMP JUMPDEST MSTORE8 AND DUP7 PUSH2 0x1A91 JUMP JUMPDEST MLOAD AND SWAP2 PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0xCE8 JUMPI PUSH2 0xCDD PUSH2 0xCE3 SWAP4 PUSH1 0x0 BYTE SWAP2 DUP10 PUSH2 0x1A91 JUMP JUMPDEST MSTORE8 PUSH2 0x1AA2 JUMP JUMPDEST PUSH2 0x113 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x8C JUMPI PUSH1 0x40 MLOAD PUSH2 0x1A0 DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT DUP2 DUP4 LT OR PUSH2 0x135F JUMPI PUSH2 0x1340 SWAP2 PUSH1 0x40 MSTORE PUSH2 0x1350 PUSH1 0x3D PUSH2 0x164 DUP1 DUP5 MSTORE PUSH2 0x130F PUSH2 0x2D5 PUSH2 0xEFA PUSH2 0xEF4 PUSH1 0x20 SWAP5 DUP6 DUP10 ADD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1BB5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 MSTORE PUSH32 0x30302F737667222077696474683D2234303022206865696768743D2234303022 PUSH1 0x40 DUP12 ADD MSTORE PUSH32 0x2076696577426F783D223020302034303020343030223E3C7265637420776964 PUSH1 0x60 DUP12 ADD MSTORE PUSH32 0x74683D2234303022206865696768743D22343030222066696C6C3D2223303030 PUSH1 0x80 DUP12 ADD MSTORE PUSH32 0x222F3E3C7465787420783D223230302220793D223138302220666F6E742D6661 PUSH1 0xA0 DUP12 ADD MSTORE PUSH32 0x6D696C793D22417269616C2220666F6E742D73697A653D223430222066696C6C PUSH1 0xC0 DUP12 ADD MSTORE PUSH32 0x3D22236666662220746578742D616E63686F723D226D6964646C65223E4C756B PUSH1 0xE0 DUP12 ADD MSTORE PUSH32 0x736F4C6F6F676965733C2F746578743E3C7465787420783D223230302220793D PUSH2 0x100 DUP12 ADD MSTORE PUSH32 0x223233302220666F6E742D66616D696C793D22417269616C2220666F6E742D73 PUSH2 0x120 DUP12 ADD MSTORE PUSH32 0x697A653D223230222066696C6C3D22233066302220746578742D616E63686F72 PUSH2 0x140 DUP12 ADD MSTORE PUSH32 0x3D226D6964646C65223E46697865642045646974696F6E3C2F746578743E3C2F PUSH2 0x160 DUP12 ADD MSTORE PUSH4 0x39BB339F PUSH1 0xE1 SHL PUSH2 0x180 DUP12 ADD MSTORE KECCAK256 SWAP8 PUSH2 0x1731 JUMP JUMPDEST SWAP7 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH17 0x7B224C5350344D65746164617461223A7B PUSH1 0x78 SHL DUP6 DUP3 ADD MSTORE PUSH28 0x89B985B59488E88931D5ADCDBD31BDBD9DA595CC8119A5E1959088B PUSH1 0x22 SHL PUSH1 0x31 DUP3 ADD MSTORE PUSH32 0x226465736372697074696F6E223A224C756B736F4C6F6F676965732061726520 PUSH1 0x4D DUP3 ADD MSTORE PUSH32 0x4C554B534F205374616E64617264204C535038204E4654732077697468206120 PUSH1 0x6D DUP3 ADD MSTORE PUSH32 0x736D696C65203A29204F6E6C792033373238204C756B736F4C6F6F6769657320 PUSH1 0x8D DUP3 ADD MSTORE PUSH32 0x617661696C61626C65206F6E206120707269636520637572766520696E637265 PUSH1 0xAD DUP3 ADD MSTORE PUSH32 0x6173696E6720302E322520776974682065616368206E6577206D696E742E2054 PUSH1 0xCD DUP3 ADD MSTORE PUSH32 0x6869732066697865642076657273696F6E2073686F77732070726F7065722074 PUSH1 0xED DUP3 ADD MSTORE PUSH32 0x6F6B656E206174747269627574657320616E64205356472072656E646572696E PUSH2 0x10D DUP3 ADD MSTORE PUSH4 0x19CB888B PUSH1 0xE2 SHL PUSH2 0x12D DUP3 ADD MSTORE PUSH32 0x226C696E6B73223A5B7B227469746C65223A2257656273697465222C2275726C PUSH2 0x131 DUP3 ADD MSTORE PUSH32 0x223A2268747470733A2F2F6C756B736F6C6F6F676965732E76657263656C2E61 PUSH2 0x151 DUP3 ADD MSTORE PUSH32 0x7070227D2C7B227469746C65223A2254776974746572222C2275726C223A2268 PUSH2 0x171 DUP3 ADD MSTORE PUSH32 0x747470733A2F2F747769747465722E636F6D2F6C756B736F4C6F6F6769657322 PUSH2 0x191 DUP3 ADD MSTORE PUSH3 0x1F574B PUSH1 0xEA SHL PUSH2 0x1B1 DUP3 ADD MSTORE PUSH12 0x22696D61676573223A5B5B7B PUSH1 0xA0 SHL PUSH2 0x1B4 DUP3 ADD MSTORE PUSH12 0x89DDA591D1A088E8D0C0C0B PUSH1 0xA2 SHL PUSH2 0x1C0 DUP3 ADD MSTORE PUSH13 0x89A195A59DA1D088E8D0C0C0B PUSH1 0x9A SHL PUSH2 0x1CC DUP3 ADD MSTORE PUSH32 0x2275726C223A22646174613A696D6167652F7376672B786D6C3B626173653634 PUSH2 0x1D9 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0xFA SHL PUSH2 0x1F9 DUP3 ADD MSTORE DUP8 MLOAD SWAP1 SWAP8 DUP9 SWAP3 SWAP2 PUSH2 0x1FA SWAP2 PUSH2 0x118E SWAP1 DUP3 SWAP1 DUP5 DUP8 ADD SWAP1 DUP11 ADD PUSH2 0x1561 JUMP JUMPDEST DUP4 ADD SWAP1 PUSH2 0x88B PUSH1 0xF2 SHL SWAP1 DUP3 ADD MSTORE PUSH32 0x22766572696669636174696F6E223A7B226D6574686F64223A226B656363616B PUSH2 0x1FC DUP3 ADD MSTORE PUSH20 0x191A9B14313CBA32B9949116113230BA30911D11 PUSH1 0x61 SHL PUSH2 0x21C DUP3 ADD MSTORE DUP2 MLOAD SWAP1 PUSH2 0x11F6 DUP3 PUSH2 0x230 SWAP5 DUP10 DUP7 DUP6 ADD SWAP2 ADD PUSH2 0x1561 JUMP JUMPDEST PUSH2 0x227D PUSH1 0xF0 SHL SWAP2 ADD SWAP2 DUP3 ADD MSTORE PUSH4 0x1F57574B PUSH1 0xE2 SHL PUSH2 0x232 DUP3 ADD MSTORE PUSH14 0x2261747472696275746573223A5B PUSH1 0x90 SHL PUSH2 0x236 DUP3 ADD MSTORE PUSH32 0x7B226B6579223A2274797065222C2276616C7565223A22636F6C6C656374696F PUSH2 0x244 DUP3 ADD MSTORE PUSH20 0x1B888B089D1E5C19488E889CDD1C9A5B99C89F4B PUSH1 0x62 SHL PUSH2 0x264 DUP3 ADD MSTORE PUSH32 0x7B226B6579223A226C696D6974222C2276616C7565223A333732382C22747970 PUSH2 0x278 DUP3 ADD MSTORE PUSH13 0x19488E889B9D5B58995C889F4B PUSH1 0x9A SHL PUSH2 0x298 DUP3 ADD MSTORE PUSH32 0x7B226B6579223A226375727665222C2276616C7565223A3130302E322C227479 PUSH2 0x2A5 DUP3 ADD MSTORE PUSH13 0x7065223A226E756D626572227D PUSH1 0x98 SHL PUSH2 0x2C5 DUP3 ADD MSTORE PUSH1 0x5D PUSH1 0xF8 SHL PUSH2 0x2D2 DUP3 ADD MSTORE PUSH2 0x7D7D PUSH1 0xF0 SHL PUSH2 0x2D3 DUP3 ADD MSTORE SUB PUSH2 0x2B5 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x1318 DUP5 PUSH2 0x1731 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP6 DUP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1BD5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP9 SWAP5 DUP6 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x1D DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x14DC JUMP JUMPDEST PUSH2 0x88 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 DUP4 PUSH2 0x16D7 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x8C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x8C JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x8C JUMPI PUSH2 0x88 PUSH2 0x13C4 DUP3 PUSH2 0x13B1 PUSH2 0x1420 SWAP6 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x151A JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD SWAP4 DUP3 DUP6 DUP1 SWAP5 MLOAD SWAP4 DUP5 SWAP3 ADD PUSH2 0x1561 JUMP JUMPDEST DUP2 ADD PUSH1 0x9 DUP2 MSTORE SUB ADD SWAP1 KECCAK256 PUSH2 0x13D7 DUP2 PUSH2 0x15BE JUMP JUMPDEST SWAP3 PUSH1 0x60 PUSH2 0x147A PUSH2 0x1468 PUSH2 0x143B PUSH2 0x13EF PUSH1 0x1 DUP8 ADD PUSH2 0x15BE JUMP JUMPDEST SWAP6 PUSH2 0x142D PUSH2 0x140B PUSH1 0x3 PUSH2 0x1404 PUSH1 0x2 DUP6 ADD PUSH2 0x15BE JUMP JUMPDEST SWAP4 ADD PUSH2 0x1664 JUMP JUMPDEST SWAP8 PUSH1 0x40 MLOAD SWAP12 DUP13 SWAP12 PUSH1 0x80 DUP14 MSTORE PUSH1 0x80 DUP14 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST SWAP1 DUP12 DUP3 SUB DUP10 DUP14 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST SWAP1 DUP10 DUP3 SUB PUSH1 0x40 DUP12 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST SWAP4 DUP8 DUP6 SUB DUP5 DUP10 ADD MSTORE PUSH2 0x1456 DUP7 MLOAD PUSH1 0x80 DUP8 MSTORE PUSH1 0x80 DUP8 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST SWAP1 DUP1 DUP8 ADD MLOAD SWAP1 DUP7 DUP4 SUB SWAP1 DUP8 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x40 DUP7 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST SWAP3 ADD MLOAD SWAP1 PUSH1 0x60 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x135F JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x8C JUMPI DUP1 CALLDATALOAD SWAP1 PUSH2 0x1531 DUP3 PUSH2 0x14FF JUMP JUMPDEST SWAP3 PUSH2 0x153F PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x14DC JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 DUP4 DUP4 ADD ADD GT PUSH2 0x8C JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 DUP1 SWAP4 ADD DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1574 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1564 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x15B4 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x159E JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1593 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x15D2 DUP5 PUSH2 0x1584 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x1641 JUMPI POP PUSH1 0x1 EQ PUSH2 0x15FE JUMPI JUMPDEST POP POP PUSH2 0x15FC SWAP3 POP SUB DUP4 PUSH2 0x14DC JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x1629 JUMPI POP POP PUSH2 0x15FC SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x15EE JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x1611 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x15FC SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x15EE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x1671 DUP2 PUSH2 0x148B JUMP JUMPDEST PUSH1 0x60 PUSH2 0x16AD PUSH1 0x3 DUP4 SWAP6 PUSH2 0x1683 DUP2 PUSH2 0x15BE JUMP JUMPDEST DUP6 MSTORE PUSH2 0x1691 PUSH1 0x1 DUP3 ADD PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MSTORE PUSH2 0x16A2 PUSH1 0x2 DUP3 ADD PUSH2 0x15BE JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MSTORE ADD PUSH2 0x15BE JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x16CB DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x1561 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x16EE PUSH2 0x16FC SWAP4 PUSH1 0x40 DUP5 MSTORE PUSH1 0x40 DUP5 ADD SWAP1 PUSH2 0x16B2 JUMP JUMPDEST SWAP2 PUSH1 0x20 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x16B2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x1709 DUP3 PUSH2 0x14FF JUMP JUMPDEST PUSH2 0x1716 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x14DC JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1727 PUSH1 0x1F NOT SWAP2 PUSH2 0x14FF JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x1881 JUMPI PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE PUSH1 0x40 DUP3 MSTORE PUSH32 0x4142434445464748494A4B4C4D4E4F505152535455565758595A616263646566 PUSH1 0x20 DUP4 ADD MSTORE PUSH32 0x6768696A6B6C6D6E6F707172737475767778797A303132333435363738392B2F PUSH1 0x40 DUP4 ADD MSTORE DUP1 MLOAD PUSH1 0x2 SWAP2 DUP3 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xCE8 JUMPI PUSH1 0x3 SWAP2 DUP3 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xFE SHL SUB DUP2 AND DUP2 SUB PUSH2 0xCE8 JUMPI PUSH2 0x17D7 SWAP1 DUP5 SWAP6 SWAP5 SHL PUSH2 0x16FF JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP6 ADD SWAP4 DUP3 SWAP2 DUP4 MLOAD DUP5 ADD SWAP1 PUSH1 0x20 DUP3 ADD SWAP3 DUP4 MLOAD SWAP5 PUSH1 0x0 DUP6 MSTORE JUMPDEST DUP4 DUP2 LT PUSH2 0x1830 JUMPI POP POP POP POP MSTORE MLOAD MOD DUP1 PUSH1 0x1 EQ PUSH2 0x181D JUMPI PUSH1 0x2 EQ PUSH2 0x1812 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x3D SWAP1 PUSH1 0x0 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST POP PUSH1 0x3D SWAP1 DUP2 PUSH1 0x0 NOT DUP3 ADD MSTORE8 PUSH1 0x1 NOT ADD MSTORE8 SWAP1 JUMP JUMPDEST DUP8 PUSH1 0x4 SWAP2 SWAP10 SWAP3 SWAP4 SWAP5 SWAP10 ADD SWAP2 DUP3 MLOAD PUSH1 0x1 SWAP1 PUSH1 0x3F SWAP1 DUP3 DUP3 DUP3 PUSH1 0x12 SHR AND DUP9 ADD ADD MLOAD DUP5 MSTORE8 DUP3 DUP3 DUP3 PUSH1 0xC SHR AND DUP9 ADD ADD MLOAD DUP4 DUP6 ADD MSTORE8 DUP3 DUP3 DUP3 PUSH1 0x6 SHR AND DUP9 ADD ADD MLOAD DUP9 DUP6 ADD MSTORE8 AND DUP6 ADD ADD MLOAD DUP10 DUP3 ADD MSTORE8 ADD SWAP8 SWAP3 SWAP2 SWAP1 PUSH2 0x17F1 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x135F JUMPI PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP1 DUP3 LT ISZERO PUSH2 0x19D4 JUMPI JUMPDEST POP PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP1 DUP4 LT ISZERO PUSH2 0x19C5 JUMPI JUMPDEST POP PUSH7 0x2386F26FC10000 DUP1 DUP4 LT ISZERO PUSH2 0x19B6 JUMPI JUMPDEST POP PUSH4 0x5F5E100 DUP1 DUP4 LT ISZERO PUSH2 0x19A7 JUMPI JUMPDEST POP PUSH2 0x2710 DUP1 DUP4 LT ISZERO PUSH2 0x1998 JUMPI JUMPDEST POP PUSH1 0x64 DUP3 LT ISZERO PUSH2 0x1988 JUMPI JUMPDEST PUSH1 0xA DUP1 SWAP3 LT ISZERO PUSH2 0x197E JUMPI JUMPDEST PUSH1 0x1 SWAP1 DUP2 PUSH1 0x21 PUSH2 0x1936 DUP3 DUP8 ADD PUSH2 0x16FF JUMP JUMPDEST SWAP6 DUP7 ADD ADD SWAP1 JUMPDEST PUSH2 0x1948 JUMPI JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT ADD SWAP1 DUP4 SWAP1 PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP3 DUP3 MOD BYTE DUP4 MSTORE8 DIV SWAP2 DUP3 ISZERO PUSH2 0x1979 JUMPI SWAP2 SWAP1 DUP3 PUSH2 0x193C JUMP JUMPDEST PUSH2 0x1941 JUMP JUMPDEST SWAP2 PUSH1 0x1 ADD SWAP2 PUSH2 0x1925 JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x64 PUSH1 0x2 SWAP2 DIV SWAP2 ADD SWAP2 PUSH2 0x191A JUMP JUMPDEST PUSH1 0x4 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x190F JUMP JUMPDEST PUSH1 0x8 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x1902 JUMP JUMPDEST PUSH1 0x10 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x18F3 JUMP JUMPDEST PUSH1 0x20 SWAP2 SWAP4 SWAP3 DIV SWAP2 ADD SWAP2 CODESIZE PUSH2 0x18E1 JUMP JUMPDEST PUSH1 0x40 SWAP4 POP DUP2 DIV SWAP2 POP CODESIZE PUSH2 0x18C9 JUMP JUMPDEST PUSH1 0x0 SWAP3 SWAP2 DUP2 SLOAD PUSH2 0x19F1 DUP2 PUSH2 0x1584 JUMP JUMPDEST SWAP3 PUSH1 0x1 SWAP2 DUP1 DUP4 AND SWAP1 DUP2 ISZERO PUSH2 0x1A4A JUMPI POP PUSH1 0x1 EQ PUSH2 0x1A0E JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x0 SWAP2 JUMPDEST DUP6 DUP4 LT PUSH2 0x1A39 JUMPI POP POP POP POP ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0x1A08 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP5 ADD MSTORE SWAP2 DUP4 ADD SWAP2 DUP2 ADD PUSH2 0x1A23 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP5 MSTORE POP POP POP DUP2 ISZERO ISZERO SWAP1 SWAP2 MUL ADD SWAP2 POP CODESIZE DUP1 DUP1 DUP1 PUSH2 0x1A08 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH2 0x1A72 DUP3 PUSH2 0x14A6 JUMP JUMPDEST PUSH1 0x10 DUP3 MSTORE PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0x20 DUP4 ADD MSTORE JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xC50 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0xCE8 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH2 0x1AB9 PUSH2 0x1A65 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 PUSH2 0x1AC7 DUP4 PUSH2 0x148B JUMP JUMPDEST PUSH1 0x42 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 DUP5 ADD PUSH1 0x60 CALLDATASIZE DUP3 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0xC50 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP4 MLOAD SWAP3 PUSH1 0x1 SWAP4 DUP5 LT ISZERO PUSH2 0xC50 JUMPI PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1B07 JUMPI POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP3 DUP3 BYTE PUSH1 0x4 DUP3 PUSH2 0x1B25 DUP4 DUP4 SHR PUSH1 0xFF AND DUP9 PUSH2 0x1A91 JUMP JUMPDEST MLOAD AND SWAP3 DUP5 DUP10 SHL SWAP3 PUSH1 0x2 SWAP5 DUP7 DUP6 DIV DUP7 EQ DUP8 ISZERO OR ISZERO PUSH2 0x1B9F JUMPI DUP5 DUP7 ADD DUP1 SWAP7 GT PUSH2 0x1B9F JUMPI PUSH1 0xF PUSH1 0x3 SWAP4 SWAP3 DUP14 PUSH2 0x1B5E DUP10 PUSH2 0x1B66 SWAP6 PUSH1 0x0 BYTE SWAP3 PUSH2 0x1A91 JUMP JUMPDEST MSTORE8 AND DUP10 PUSH2 0x1A91 JUMP JUMPDEST MLOAD AND SWAP3 ADD DUP1 SWAP4 GT PUSH2 0x1B8A JUMPI POP SWAP1 PUSH2 0xCDD PUSH2 0x1B85 SWAP4 SWAP3 PUSH1 0x0 BYTE SWAP2 DUP10 PUSH2 0x1A91 JUMP JUMPDEST PUSH2 0x1AF8 JUMP JUMPDEST PUSH1 0x11 SWAP1 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x11 DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID EXTCODECOPY PUSH20 0x766720786D6C6E733D22687474703A2F2F777777 0x2E PUSH24 0x332E6F72672F3230646174613A6170706C69636174696F6E 0x2F PUSH11 0x736F6E3B6261736536342C STOP STOP STOP LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH23 0xEC184052EC9FE0B0C266082170BA33445633EED4EAC586 SWAP10 GAS DELEGATECALL BASEFEE 0xF 0xB1 AND CALLVALUE PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
          "sourceMap": "12886:9952:32:-:0;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;12886:9952:32;;;;955:12:19;734:10:21;955:12:19;:::i;:::-;1613:26:0;1609:100;;1745:12;;;:::i;:::-;388:66:31;;:::i;:::-;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;5646:31:0;;;;;;;:::i;:::-;;;;633:66:12;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;5646:31:0;;;;;:::i;:::-;;;;776:66:12;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;5646:31:0;;;;;:::i;:::-;;;;12886:9952:32;;214:1:31;1713:26:13;;;13684:4:32;1713:26:13;;;;;;:::i;:::-;915:66:12;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;5646:31:0;;;;;:::i;:::-;;;;12886:9952:32;;4667:30:18;;;;13684:4:32;4667:30:18;;;;;;:::i;:::-;359:66:16;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;13801:9:32;;214:1:31;12886:9952:32;;14305:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;12886:9952;;;;;;;214:1:31;14287:46:32;214:1:31;;;14287:46:32;214:1:31;388:66;;:::i;:::-;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;12886:9952:32;;13684:4;;;;;;;;;;;;;:::i;:::-;14602:66;12886:9952;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;12886:9952:32;;13684:4;;;;;;;;;;;:::i;:::-;14807:66;12886:9952;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;12886:9952:32;;13684:4;;;;;;;;;;;;:::i;:::-;15048:66;12886:9952;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;22548:39;12886:9952;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;14287:46:32;12886:9952;;;;;;;;;;;22548:39;;;;;;;;;;-1:-1:-1;;22548:39:32;;;12886:9952;;1310:66:31;12886:9952:32;;1310:66:31;12886:9952:32;;1310:66:31;;22767:22:32;12886:9952;;1310:66:31;;;;;;;;;;;;;13684:4:32;1310:66:31;12886:9952:32;;1310:66:31;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;;;;;:::i;:::-;;;;12886:9952:32;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;22548:39;12886:9952;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;22548:39;12886:9952;;;;22548:39;;;;;;;;;;;;;:::i;:::-;;;12886:9952;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1310:66:31;12886:9952:32;1310:66:31;12886:9952:32;;;;;:::i;:::-;22548:39;;;;;12886:9952;;;;;;;;;;;;22548:39;12886:9952;;214:1:31;12886:9952:32;;214:1:31;;;;12886:9952:32;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;22548:39;12886:9952;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;14305:28;12886:9952;;214:1:31;12886:9952:32;;214:1:31;;;;12886:9952:32;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;2420:31:13;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;;;5646:31:0;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;1609:100:0;12886:9952:32;;-1:-1:-1;;;1662:36:0;;;;;12886:9952:32;-1:-1:-1;12886:9952:32;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;:::o;388:66:31:-;12886:9952:32;;;;;;:::i;:::-;388:66:31;12886:9952:32;;-1:-1:-1;;;388:66:31;;;;:::o;12886:9952:32:-;;;;;;;;-1:-1:-1;;12886:9952:32;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;12886:9952:32;;;;:::o;2426:187:19:-;2518:6;12886:9952:32;;-1:-1:-1;;;;;12886:9952:32;;;-1:-1:-1;;;;;;214:1:31;;;;;;12886:9952:32;;;2566:40:19;;2518:6;2566:40;2426:187::o;12886:9952:32:-;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "abi_decode_address": {
              "entryPoint": 2727,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "abi_decode_array_address_dyn": {
              "entryPoint": 4304,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_bool_dyn": {
              "entryPoint": 4414,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_bytes32_dyn": {
              "entryPoint": 2209,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_array_bytes_dyn": {
              "entryPoint": 4518,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_available_length_string": {
              "entryPoint": 1766,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_bool_fromMemory": {
              "entryPoint": 12985,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes": {
              "entryPoint": 3744,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes_fromMemory": {
              "entryPoint": 10756,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytes_memory_ptr_fromMemory": {
              "entryPoint": 10822,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_bytest_bytes_fromMemory": {
              "entryPoint": 13342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_address": {
              "entryPoint": 2659,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_address_address_address_bytes32_bytes": {
              "entryPoint": 10155,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_address_address_address_bytes32_bytes_16306": {
              "entryPoint": 10099,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_address_address_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_address_bool_bytes": {
              "entryPoint": 10057,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_address_bool_bytes_26986": {
              "entryPoint": 10016,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_address_bytes32": {
              "entryPoint": 9083,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_address_bytes32_address": {
              "entryPoint": 9048,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_address_bytes32_bool_bytes": {
              "entryPoint": 9110,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_address_bytes32_bool_bytes_16201": {
              "entryPoint": 9153,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_array_bytes_dyn": {
              "entryPoint": 2303,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes32_address_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_bytes32_bytes": {
              "entryPoint": 10859,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes32_string_bytes3_uint256_uint256_string": {
              "entryPoint": 13409,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_bytes4": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_bytes4_16333": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_bytes4_16334": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_bytes_calldata": {
              "entryPoint": 7603,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_packed_bytes32_bytes32_address_address": {
              "entryPoint": 12403,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_packed_bytes_calldata_address_uint256": {
              "entryPoint": 7617,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_string": {
              "entryPoint": 1323,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string_memory_ptr": {
              "entryPoint": 1286,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_string_storage": {
              "entryPoint": 2857,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_and_zero_memory_array_array_bytes_dyn": {
              "entryPoint": 7333,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_memory_array_bytes": {
              "entryPoint": 7657,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_array_bytes32_dyn": {
              "entryPoint": 2171,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_allocation_size_string": {
              "entryPoint": 1724,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_string_storage": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_pop_array_bytes32_dyn_storage_ptr": {
              "entryPoint": 11819,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "bytes_concat_bytes32_bytes32": {
              "entryPoint": 10422,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "bytes_concat_stringliteral_58e2_bytes32_bytes": {
              "entryPoint": 13478,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "calldata_array_index_access_bytes_calldata_dyn_calldata": {
              "entryPoint": 8812,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 2
            },
            "checked_add_uint256": {
              "entryPoint": 12375,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_uint256_16154": {
              "entryPoint": 12361,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_add_uint256_16169": {
              "entryPoint": 12389,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_div_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_div_uint256_16163": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_div_uint256_16203": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_mul_uint256": {
              "entryPoint": 12342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_uint256_16162": {
              "entryPoint": 12302,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_mul_uint256_16202": {
              "entryPoint": 12319,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "checked_sub_uint256": {
              "entryPoint": 11796,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_bytes_storage": {
              "entryPoint": 8462,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "clean_up_bytearray_end_slots_bytes_storage_16262": {
              "entryPoint": 8422,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "cleanup_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clear_storage_range_bytes1": {
              "entryPoint": 8399,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "convert_bytes_to_fixedbytes_from_bytes_to_bytes20": {
              "entryPoint": 8016,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_bytes_to_fixedbytes_from_bytes_to_bytes32": {
              "entryPoint": 8069,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_uint160_to_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_array_from_storage_to_memory_array_bytes32_dyn": {
              "entryPoint": 12088,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_array_from_storage_to_memory_string": {
              "entryPoint": 3007,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_bytes_to_bytes": {
              "entryPoint": 8531,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_literal_to_storage_0ceb74360896f85b39388579e9f44ea71ffeef099012760c53d69361c5916c4e": {
              "entryPoint": 12484,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_literal_to_storage_27617207effe6bfd81a3e2b21d8a20c4e622b23e5422d607771b4f8b8ba006fa": {
              "entryPoint": 12448,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_literal_to_storage_84edd11dbf0dafdf7f19c50c2bb4ec78adcdead0272747b466274282a49b8e5d": {
              "entryPoint": 12598,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_literal_to_storage_8eec9d5ae546887db6b6a3889e6591fe96f3c16bc9d921551a4aac3adce52996": {
              "entryPoint": 12514,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_literal_to_storage_f99e8d094ee97e7be9a3d7269f09f9996041160cc5c134b6a863be5b0ce9b5bd": {
              "entryPoint": 12569,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_literal_to_storage_fa187c1e7b6b42ab8b2d9415ab7e6b1e71b551fcdc8151ebafe46e40a10d90ad": {
              "entryPoint": 12541,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 1251,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "external_fun_authorizeOperator": {
              "entryPoint": 4887,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_balanceOf": {
              "entryPoint": 4102,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_batchCalls": {
              "entryPoint": 4000,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_chubbiness": {
              "entryPoint": 3907,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_color": {
              "entryPoint": 2603,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_curve": {
              "entryPoint": 4238,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getData": {
              "entryPoint": 3875,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getDataBatch": {
              "entryPoint": 6486,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getDataBatchForTokenIds": {
              "entryPoint": 2401,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getDataForTokenId": {
              "entryPoint": 1506,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_getOperatorsOf": {
              "entryPoint": 3578,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_isOperatorFor": {
              "entryPoint": 2749,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_isUniversalProfile": {
              "entryPoint": 4268,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_limit": {
              "entryPoint": 5717,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_loogieType": {
              "entryPoint": 7247,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_loogiesMetadata": {
              "entryPoint": 1464,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_mintItem": {
              "entryPoint": 6622,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_mintLoogie": {
              "entryPoint": 3091,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_mouthLength": {
              "entryPoint": 1005,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_name": {
              "entryPoint": 1343,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_owner": {
              "entryPoint": 5230,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_price": {
              "entryPoint": 5563,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_recipient": {
              "entryPoint": 3952,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_renounceOwnership": {
              "entryPoint": 4161,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_revokeOperator": {
              "entryPoint": 6268,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_setData": {
              "entryPoint": 4800,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_setDataBatch": {
              "entryPoint": 5366,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_setDataBatchForTokenIds": {
              "entryPoint": 5747,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_setDataForTokenId": {
              "entryPoint": 5987,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_setUPUsername": {
              "entryPoint": 1821,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_supportsInterface": {
              "entryPoint": 1050,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_symbol": {
              "entryPoint": 5272,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_tokenExists": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_tokenIdsOf": {
              "entryPoint": 5594,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_tokenOwnerOf": {
              "entryPoint": 2678,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_totalSupply": {
              "entryPoint": 1541,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_transfer": {
              "entryPoint": 3771,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_transferBatch": {
              "entryPoint": 4646,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_transferOwnership": {
              "entryPoint": 7069,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_upUsernames": {
              "entryPoint": 3036,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "external_fun_updateCollectionMetadata": {
              "entryPoint": 6058,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 2799,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_returndata": {
              "entryPoint": 7706,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 1689,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "finalize_allocation_26978": {
              "entryPoint": 1595,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_26981": {
              "entryPoint": 1635,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "finalize_allocation_26982": {
              "entryPoint": 1662,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "fun": {
              "entryPoint": 7464,
              "id": 2135,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_2153": {
              "entryPoint": 7540,
              "id": 2153,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun__add": {
              "entryPoint": 11651,
              "id": 5282,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun__getDataForTokenId": {
              "entryPoint": 13548,
              "id": 7477,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_add": {
              "entryPoint": 12167,
              "id": 5582,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_batchCalls": {
              "entryPoint": 8891,
              "id": 2618,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_checkOwner": {
              "entryPoint": 11382,
              "id": 3664,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "fun_clearOperators": {
              "entryPoint": 10213,
              "id": 3067,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_contains": {
              "entryPoint": 11752,
              "id": 5385,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_exists": {
              "entryPoint": 9987,
              "id": 3085,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_fallbackLSP17Extendable": {
              "entryPoint": 7754,
              "id": 2208,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_getData": {
              "entryPoint": 7302,
              "id": 64,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_getDataForTokenId": {
              "entryPoint": null,
              "id": 3498,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_isOperatorOrOwner": {
              "entryPoint": 9196,
              "id": 2855,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_isUniversalProfile": {
              "entryPoint": 13006,
              "id": 7379,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_mint": {
              "entryPoint": 12720,
              "id": 3216,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_notifyTokenReceiver": {
              "entryPoint": 11254,
              "id": 3608,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_notifyTokenReceiver_26987": {
              "entryPoint": 11198,
              "id": 3608,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_notifyUniversalReceiver": {
              "entryPoint": 11098,
              "id": 519,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_notifyUniversalReceiver_16251": {
              "entryPoint": 10927,
              "id": 519,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_remove": {
              "entryPoint": 11883,
              "id": 5366,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_revokeOperator": {
              "entryPoint": 9856,
              "id": 3013,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "fun_setData": {
              "entryPoint": 8104,
              "id": 2309,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "fun_setDataForTokenId": {
              "entryPoint": 10451,
              "id": 3476,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "fun_supportsERC165InterfaceUnchecked": {
              "entryPoint": 11563,
              "id": 4245,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "fun_supportsERC165InterfaceUnchecked_16252": {
              "entryPoint": 11470,
              "id": 4245,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_supportsInterfaceInERC165Extension": {
              "entryPoint": 13224,
              "id": 655,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_tokenOwnerOf": {
              "entryPoint": 8777,
              "id": 2365,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "fun_transfer": {
              "entryPoint": 9255,
              "id": 2893,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "fun_transferBatch": {
              "entryPoint": 9648,
              "id": 2973,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "increment_uint256": {
              "entryPoint": 12692,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_address_struct_Bytes32Set_storage_of_address": {
              "entryPoint": 8751,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16156": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16161": {
              "entryPoint": 925,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16165": {
              "entryPoint": 941,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16170": {
              "entryPoint": 957,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16172": {
              "entryPoint": 973,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16177": {
              "entryPoint": 989,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16192": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16235": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mapping_index_access_mapping_bytes32_uint256_of_bytes32_16244": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "memory_array_index_access_bytes32_dyn": {
              "entryPoint": 7430,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 11773,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 7407,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 1572,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "read_from_memoryt_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "read_from_memoryt_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "read_from_storage_split_offset_bytes3": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "require_helper_stringliteral_1dd0": {
              "entryPoint": 12631,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_2ecf": {
              "entryPoint": 12186,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_a598": {
              "entryPoint": 12245,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "require_helper_stringliteral_a7b8": {
              "entryPoint": 12918,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "revert_forward": {
              "entryPoint": 10914,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "storage_array_index_access_bytes32_dyn_ptr": {
              "entryPoint": 11613,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "update_byte_slice_dynamic32": {
              "entryPoint": 8362,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "update_storage_value_offsett_address_to_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "update_storage_value_offsett_bool_to_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "update_storage_value_offsett_bytes3_to_bytes3": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "update_storage_value_offsett_uint256_to_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "update_storage_value_offsett_uint256_to_uint256_16155": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "update_storage_value_offsett_uint256_to_uint256_16303": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "update_storage_value_uint256_to_uint256": {
              "entryPoint": 8383,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "validator_revert_bool": {
              "entryPoint": 3734,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "60806040526004361015610033575b3615610026575b61001e36611d28565b602081519101f35b61002e611d74565b610015565b60003560e01c8062923f9e14610366578063017c96b81461035d57806301ffc9a71461035457806306fdde031461034b5780630e2fee841461034257806316e023b31461033957806318160ddd1461033057806319c9d79b146103275780631d26fce61461031e5780631ead90b014610315578063217b22701461030c5780632a3654a414610303578063472dfcfb146102fa578063475a590d146102f157806349a6078d146102e8578063511b6952146102df57806354f6127f146102d65780636643a686146102cd57806366d003ac146102c45780636963d438146102bb57806370a08231146102b2578063715018a6146102a95780637165485d146102a0578063791790c9146102975780637e87632c1461028e5780637f23690c1461028557806386a10ddd1461027c5780638da5cb5b1461027357806395d89b411461026a5780639790242114610261578063a035b1fe14610258578063a3b261f21461024f578063a4d66daf14610246578063be9f0e6f1461023d578063d6c1407c14610234578063d91a61d01461022b578063db8c966314610222578063dedff9c614610219578063eb93406b14610210578063f2fde38b146102075763fc056acc0361000e57610202611c4f565b61000e565b50610202611b9d565b506102026119de565b50610202611956565b5061020261187c565b506102026117aa565b50610202611763565b50610202611673565b50610202611655565b506102026115da565b506102026115bb565b506102026114f6565b50610202611498565b5061020261146e565b50610202611317565b506102026112c0565b50610202611226565b506102026110ac565b5061020261108e565b50610202611041565b50610202611006565b50610202610fa0565b50610202610f70565b50610202610f43565b50610202610f23565b50610202610ebb565b50610202610dfa565b50610202610c13565b50610202610bdc565b50610202610abd565b50610202610a76565b50610202610a2b565b50610202610961565b5061020261071d565b50610202610605565b506102026105e2565b506102026105b8565b5061020261053f565b5061020261041a565b506102026103ed565b503461039857602036600319011261039857600435600052600c602052602060ff604060002054166040519015158152f35b600080fd5b6000526008602052604060002090565b6000526009602052604060002090565b600052600a602052604060002090565b600052600b602052604060002090565b600052600d602052604060002090565b503461039857602036600319011261039857600435600052600a6020526020604060002054604051908152f35b5034610398576020366003190112610398576004356001600160e01b03198116908181036103985761046f91631d138b8360e11b81149182159182610473575b50506040519115158252509081906020820190565b0390f35b909161049b575b50811561048b575b5038808061045a565b61049591506133a8565b38610482565b90915063a918fa6b60e01b81149081156104b8575b50903861047a565b6318a6a9a560e21b8114915081156104d2575b50386104b0565b6301ffc9a760e01b149050386104cb565b60005b8381106104f65750506000910152565b81810151838201526020016104e6565b9060209161051f815180928185528580860191016104e3565b601f01601f1916010190565b90602061053c928181520190610506565b90565b50346103985760003660031901126103985760008051602061361a833981519152600052600160205260405161046f906105a48161059d817f2a367ae1ac46d529739aa27ac74856f860e70af05d3642d18ba60fd5d32a069a610b29565b0382610699565b604051918291602083526020830190610506565b5034610398576000366003190112610398576006546040516001600160a01b039091168152602090f35b50346103985760403660031901126103985761046f6105a46024356004356134ec565b5034610398576000366003190112610398576020600754604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761065657604052565b61065e610624565b604052565b602081019081106001600160401b0382111761065657604052565b606081019081106001600160401b0382111761065657604052565b601f909101601f19168101906001600160401b0382119082101761065657604052565b6020906001600160401b0381116106d9575b601f01601f19160190565b6106e1610624565b6106ce565b9291926106f2826106bc565b916107006040519384610699565b829481845281830111610398578281602093846000960137010152565b5034610398576040366003190112610398576001600160401b036004356024358281116103985736602382011215610398576107639036906024816004013591016106e6565b9161078a61077083612249565b6001600160a01b038116331490811561086b575b50613276565b6000918252602090600d82526040832091845191821161085e575b6107b9826107b38554610aef565b8561210e565b80601f83116001146107f357508394829394926107e8575b50508160011b916000199060031b1c191617905580f35b0151905038806107d1565b90601f1983169561080985600052602060002090565b9286905b8882106108465750508360019596971061082d575b505050811b01905580f35b015160001960f88460031b161c19169055388080610822565b8060018596829496860151815501950193019061080d565b610866610624565b6107a5565b61087591506132ce565b38610784565b6020906001600160401b038111610894575b60051b0190565b61089c610624565b61088d565b81601f82011215610398578035916108b88361087b565b926108c66040519485610699565b808452602092838086019260051b820101928311610398578301905b8282106108f0575050505090565b813581529083019083016108e2565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109335750505050505090565b9091929394958480610951600193603f198682030187528a51610506565b9801930193019194939290610923565b5034610398576040366003190112610398576001600160401b03600435818111610398576109939036906004016108a1565b90602435908111610398576109ac9036906004016108a1565b908051825103610a19576109c08151611ca5565b9160005b8251811015610a0b57806109ef6109dd60019386611d06565b516109e88386611d06565b51906134ec565b6109f98287611d06565b52610a048186611d06565b50016109c4565b6040518061046f86826108ff565b6040516317d38eff60e11b8152600490fd5b5034610398576020366003190112610398576004356000526008602052602060406000205460e81b6040519062ffffff60e81b168152f35b6001600160a01b03909116815260200190565b5034610398576020366003190112610398576020610a95600435612249565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361039857565b5034610398576040366003190112610398576020610ae5610adc610aa7565b602435906123ec565b6040519015158152f35b90600182811c92168015610b1f575b6020831014610b0957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610afe565b9060009291805491610b3a83610aef565b918282526001938481169081600014610b9c5750600114610b5c575b50505050565b90919394506000526020928360002092846000945b838610610b88575050505001019038808080610b56565b805485870183015294019385908201610b71565b9294505050602093945060ff191683830152151560051b01019038808080610b56565b90610bda610bd39260405193848092610b29565b0383610699565b565b503461039857602036600319011261039857600435600052600d60205261046f61059d6105a4604060002060405192838092610b29565b50346103985760203660031901126103985761046f610c30610aa7565b610c43610c3e600754613049565b600755565b610d8860075491610c6e610c6184600052600c602052604060002090565b805460ff19166001179055565b6005610c7943612e14565b40604051610ca181610c9360208201948730918b88613073565b03601f198101835282610699565b519020610cf1600082901a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b9060e81c62ffffff19825416179055565b610d0f610d0a610d038360031a61300e565b60ff900490565b613057565b610d18866103ad565b55610d44610d3f610d03610d35610d2e896103ad565b5460021c90565b8460041a90613036565b613065565b610d4d866103bd565b55811a0680610d985750610d68610d63846103cd565b613119565b610d79610d74846103dd565b613136565b82610d82611de9565b916131b0565b6040519081529081906020820190565b60018103610db75750610db2610dad846103cd565b6130fd565b610d68565b60028103610dd15750610db2610dcc846103cd565b6130e2565b600303610de957610db2610de4846103cd565b6130c4565b610db2610df5846103cd565b6130a0565b50346103985760208060031936011261039857600435610e1981612703565b15610e7e5760005260058152610e326040600020612f38565b906040519181839283018184528251809152816040850193019160005b828110610e5e57505050500390f35b83516001600160a01b031685528695509381019392810192600101610e4f565b60249060405190635747cd1b60e11b82526004820152fd5b8015150361039857565b9080601f830112156103985781602061053c933591016106e6565b50346103985760a036600319011261039857610ed5610aa7565b6024356001600160a01b038116810361039857606435610ef481610e96565b608435926001600160401b03841161039857610f17610f21943690600401610ea0565b9260443591612427565b005b50346103985760203660031901126103985761046f6105a4600435611c86565b50346103985760203660031901126103985760043560005260096020526020604060002054604051908152f35b503461039857600036600319011261039857602060405173a81a6a910fed20374361b35c451a4a44f86ced468152f35b5034610398576020366003190112610398576001600160401b036004358181116103985736602382011215610398578060040135918211610398573660248360051b830101116103985761046f916024610ffa92016122bb565b604051918291826108ff565b5034610398576020366003190112610398576001600160a01b03611028610aa7565b1660005260046020526020604060002054604051908152f35b50346103985760008060031936011261108b5761105c612c76565b80546001600160a01b03198116825581906001600160a01b031660008051602061365a8339815191528280a380f35b80fd5b50346103985760003660031901126103985760206040516103ea8152f35b5034610398576020366003190112610398576020610ae56110cb610aa7565b6132ce565b81601f82011215610398578035916110e78361087b565b926110f56040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061111f575050505090565b81356001600160a01b0381168103610398578152908301908301611111565b81601f82011215610398578035916111558361087b565b926111636040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061118d575050505090565b838091833561119b81610e96565b81520191019061117f565b9080601f83011215610398578135906111be8261087b565b926111cc6040519485610699565b828452602092838086019160051b8301019280841161039857848301915b8483106111fa5750505050505090565b82356001600160401b03811161039857869161121b84848094890101610ea0565b8152019201916111ea565b50346103985760a03660031901126103985760046001600160401b0381358181116103985761125890369084016110d0565b906024358181116103985761127090369085016110d0565b6044358281116103985761128790369086016108a1565b906064358381116103985761129f903690870161113e565b9260843590811161039857610f21956112ba913691016111a6565b936125b0565b506040366003190112610398576024356001600160401b038111610398576112ec903690600401610ea0565b6112f4612c76565b3461130557610f2190600435611fa8565b60405163f36ba73760e01b8152600490fd5b503461039857606036600319011261039857611331610aa7565b602435906044356001600160401b03811161039857611354903690600401610ea0565b9061135e83612249565b6001600160a01b038181169133830361144f57508216801561143d5780821461142b576113a56113a18461139c886000526005602052604060002090565b612f87565b1590565b61140b57938061140692610f21967f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215604051806113e28a8261052b565b0390a46113f86040519485923360208501612396565b03601f198101845283610699565b612aaf565b6040516314ec4d6d60e31b81528061142787866004840161237b565b0390fd5b6040516344fed6b160e11b8152600490fd5b604051639577b8b360e01b8152600490fd5b85611427604051928392632d938f5160e11b8452339160048501612358565b5034610398576000366003190112610398576000546040516001600160a01b039091168152602090f35b50346103985760003660031901126103985760008051602061367a833981519152600052600160205260405161046f906105a48161059d817f83b322886c7b7e25779e5d38e06e005c9e7aba1e1267ce9210cf24e31833535a610b29565b5060403660031901126103985760046001600160401b0381358181116103985761152390369084016108a1565b906024359081116103985761153b90369084016111a6565b91611544612c76565b346115ac57815183510361159d5781511561158e575060005b8151811015610f21578061158861157660019385611d06565b516115818387611d06565b5190611fa8565b0161155d565b6040516397da5f9560e01b8152fd5b604051633bcc897960e01b8152fd5b60405163f36ba73760e01b8152fd5b5034610398576000366003190112610398576020600e54604051908152f35b503461039857602080600319360112610398576001600160a01b036115fd610aa7565b16600052600481526116126040600020612f38565b906040519181839283018184528251809152816040850193019160005b82811061163e57505050500390f35b83518552869550938101939281019260010161162f565b5034610398576000366003190112610398576020604051610e908152f35b50346103985760603660031901126103985760046001600160401b038135818111610398576116a590369084016108a1565b602435828111610398576116bc90369085016108a1565b91604435908111610398576116d490369085016111a6565b926116dd612c76565b8151835180911490811591611757575b5061174857815115611739575060005b8151811015610f21578061173361171660019385611d06565b516117218387611d06565b5161172c8489611d06565b51916128d3565b016116fd565b6040516380c9830560e01b8152fd5b6040516317d38eff60e11b8152fd5b905084511415386116ed565b5034610398576060366003190112610398576044356001600160401b03811161039857611797610f21913690600401610ea0565b61179f612c76565b6024356004356128d3565b50346103985760008060031936011261108b5761180d60048260018060a01b036117d8818354163314613276565b600654166040519283809263934118fb60e01b82525afa90811561186f575b8390849261184a575b50602081519101206134a6565b6000805160206136da83398151915261184460008051602061363a8339815191529283855260016020526105a48160408720612153565b0390a280f35b905061186891503d8085833e6118608183610699565b81019061341e565b9038611800565b611877612aa2565b6117f7565b503461039857608036600319011261039857611896610aa7565b602435604435916118a683610e96565b6064356001600160401b038111610398576118c5903690600401610ea0565b6118ce83612249565b936001600160a01b03808616903382900361191f575b841690811561143d571461142b576118ff8282868887612680565b61190557005b610f21936113f861140692604051958693602085016123c1565b84811633146118e45760405163760b5acd60e01b81523360048201526001600160a01b038816602482015260448101879052606490fd5b5034610398576020366003190112610398576004356001600160401b038111610398576119879036906004016108a1565b6119918151611ca5565b9060005b81518110156119d057806119b46119ae60019385611d06565b51611c86565b6119be8286611d06565b526119c98185611d06565b5001611995565b6040518061046f85826108ff565b5060008060031936011261108b5761046f906119ff610e9060075410612f9a565b611a29611a24611a1c600e54611a1781341015612fd5565b61301f565b6103e8900490565b600e55565b611a37610c3e600754613049565b610d8860075491611a55610c6184600052600c602052604060002090565b6005611a6043612e14565b40604051611a7b81610c936020820194309033908b88613073565b519020611ab881841a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b611aca610d0a610d038360031a61300e565b611ad3866103ad565b55611ae9610d3f610d03610d35610d2e896103ad565b611af2866103bd565b55811a0680611b4f5750611b08610d63846103cd565b611b14610d74846103dd565b611b26611b1f611de9565b84336131b0565b8080803473a81a6a910fed20374361b35c451a4a44f86ced465af1611b49611e1a565b50613157565b60018103611b695750611b64610dad846103cd565b611b08565b60028103611b7e5750611b64610dcc846103cd565b600303611b9157611b64610de4846103cd565b611b64610df5846103cd565b503461039857602036600319011261039857611bb7610aa7565b611bbf612c76565b6001600160a01b039081168015611bfb57600080546001600160a01b031981168317825590921660008051602061365a8339815191528380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461039857602036600319011261039857600435600052600b60205261046f61059d6105a4604060002060405192838092610b29565b600052600160205261059d61053c604060002060405192838092610b29565b90611caf8261087b565b611cbc6040519182610699565b8281528092611ccd601f199161087b565b019060005b828110611cde57505050565b806060602080938501015201611cd2565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015611d1b575b60051b010190565b611d23611cef565b611d13565b60043610611d395761053c90611e4a565b6044604051809263e5099ee360e01b825260206004830152806024830152806000848401376000828201840152601f01601f19168101030190fd5b503415611d8d576040516330fa4a2160e11b8152600490fd5b606460405163e5099ee360e01b8152602060048201526004602482015260006044820152fd5b908092918237016000815290565b9060349391816000823760609390931b6001600160601b031916920191825260148201520190565b60405190602082016001600160401b03811183821017611e0d575b60405260008252565b611e15610624565b611e04565b3d15611e45573d90611e2b826106bc565b91611e396040519384610699565b82523d6000602084013e565b606090565b60609063ffffffff60e01b6000351691611e9a611e95604051696773c5a04a6d4300884b60b11b60208201526000602a82015285602c82015260208152611e908161063b565b611f85565b611c86565b805160148114159081611f46575b50611f2157611eb690611f50565b901c918215611efd57506000918291604051611ede81610c9360208201943490339087611dc1565b519134905af1611eec611e1a565b9015611ef55790565b602081519101fd5b60405163bb370b2b60e01b81526001600160e01b0319919091166004820152602490fd5b6040516342bfe79f60e01b815260206004820152908190611427906024830190610506565b9050151538611ea8565b80516020909101516001600160601b0319808216939290919060148110611f7657505050565b60140360031b82901b16169150565b602081519101519060208110611f99575090565b6000199060200360031b1b1690565b907ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d82146120985760008051602061361a8339815191528203611ff7576040516385c169bd60e01b8152600490fd5b60008051602061367a833981519152820361201e57604051630eceab6760e31b8152600490fd5b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3820361205757604051634ef6d7fb60e01b8152600490fd5b612093816120876000805160206136da83398151915293612082866000526001602052604060002090565b612153565b6040519182918261052b565b0390a2565b604051631b32400560e11b8152600490fd5b9060031b600019811b9283911b169119161790565b916120cb9183546120aa565b9055565b8181106120da575050565b600081556001016120cf565b90601f81116120f3575050565b610bda91600052601f6020600020910160051c8101906120cf565b9190601f811161211d57505050565b610bda926000526020600020906020601f840160051c83019310612149575b601f0160051c01906120cf565b909150819061213c565b81519192916001600160401b038111612222575b61217b816121758454610aef565b8461210e565b602080601f83116001146121b75750819293946000926121ac575b50508160011b916000199060031b1c1916179055565b015190503880612196565b90601f198316956121cd85600052602060002090565b926000905b88821061220a575050836001959697106121f1575b505050811b019055565b015160001960f88460031b161c191690553880806121e7565b806001859682949686015181550195019301906121d2565b61222a610624565b612167565b6001600160a01b0316600090815260046020526040902090565b6000818152600360205260409020546001600160a01b0316908115610e7e575090565b91908110156122ae575b60051b81013590601e19813603018212156103985701803591906001600160401b038311610398576020018236038113610398579190565b6122b6611cef565b612276565b91906122c681611ca5565b92600091825b8181106122d95750505050565b83806122e683858761226c565b604093916122f8855180938193611db3565b0390305af490612306611e1a565b911561232d57509060019161231b8289611d06565b526123268188611d06565b50016122cc565b81519192911561233f57825160208401fd5b5163234eb81960e01b8152600481019190915260249150fd5b6001600160a01b0391821681526020810192909252909116604082015260600190565b6001600160a01b039091168152602081019190915260400190565b61053c939260809260018060a01b031682526020820152600160408201528160608201520190610506565b61053c939260809260018060a01b031682526020820152600060408201528160608201520190610506565b6001600160a01b03806123fe84612249565b16911690811491821561241057505090565b61053c925060005260056020526040600020612de8565b9092939161243581336123ec565b156125925761244381612249565b6001600160a01b038181169184821691828403612575578088169384156125635761246d86612249565b91821603612533575050926125298380610bda9997946113f8999761249561252e98876127e5565b6124a7836124a28861222f565b612e6b565b506124ba836124b58b61222f565b612d83565b506124f2896124d3856000526003602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040516000805160206136ba83398151915290806125128a8e3384612749565b0390a46040519788948592888633602087016127ab565b612b5a565b612bf6565b604051635a9c31d360e01b8152600481018690526001600160a01b03928316602482015291166044820152606490fd5b6040516324ecef4d60e01b8152600490fd5b604051632d938f5160e11b81528061142788888660048501612358565b60449060405190631294d2a960e01b82526004820152336024820152fd5b949390919285519383518514801590612675575b801561266a575b801561265f575b61264d5760005b8581106125ea575050505050509050565b8061264761260a6125fd6001948c611d06565b516001600160a01b031690565b6126176125fd848a611d06565b6126218487611d06565b5161263561262f868a611d06565b51151590565b91612640868b611d06565b5193612427565b016125d9565b6040516393a8311960e01b8152600490fd5b5082518514156125d2565b5081518514156125cb565b5080518514156125c4565b91939284600052600560205260406000209260018060a01b03906126a78282168096612e6b565b156126e45750906126df60008051602061369a8339815191529392604051938493151584526040602085015216956040830190610506565b0390a4565b6040516312a8c6a360e21b81529081906114279089906004840161237b565b6000908152600360205260409020546001600160a01b0316151590565b6001600160a01b0390911681526001602082015260606040820181905261053c92910190610506565b6001600160a01b039091168152901515602082015260606040820181905261053c92910190610506565b6001600160a01b0391821681526000602082015291166040820152606081019190915260a06080820181905261053c92910190610506565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260a06080820181905261053c92910190610506565b9060009080825260059160209383855260409182812094855495825b87811061281357505050505050505050565b8154156128a9575b8184528884205486516001600160a01b039182169161283982610663565b868252898752858c5261284e838a8920612e6b565b1561288e576001939260008051602061369a8339815191528d896128858e968e968e88805196879687528601521696830190610506565b0390a401612801565b88516312a8c6a360e21b8152806114278c866004840161237b565b6128b1611cef565b61281b565b9190604051926020840152604083015260408252610bda8261067e565b90916128df83836128b6565b805160208092012060005260019081815260406000209183519160018060401b0383116129f7575b61291b836129158654610aef565b8661210e565b80601f8411600114612975575091808061296595936000805160206135fa833981519152979560009361296a575b501b916000199060031b1c19161790556040519182918261052b565b0390a3565b860151925038612949565b90601f93929319831661298d86600052602060002090565b926000905b8282106129e057505091839161296596946000805160206135fa833981519152989694106129c7575b5050811b019055612087565b85015160001960f88460031b161c1916905538806129bb565b808785968294968c01518155019501930190612992565b6129ff610624565b612907565b81601f82011215610398578051612a1a816106bc565b92612a286040519485610699565b818452602082840101116103985761053c91602080850191016104e3565b906020828203126103985781516001600160401b0381116103985761053c9201612a04565b90604061053c927f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d81528160208201520190610506565b506040513d6000823e3d90fd5b612ab881612cce565b612ac0575050565b612b13600092918392604051948580948193631aed5a8560e21b83527f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f009706004840152604060248401526044830190610506565b03926001600160a01b03165af18015612b4d575b612b2e5750565b612b4a903d806000833e612b428183610699565b810190612a46565b50565b612b55612aa2565b612b27565b612b6381612cce565b612b6b575050565b612b13600092918392604051948580948193631aed5a8560e21b83527fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab006004840152604060248401526044830190610506565b612bc781612cce565b15612bf257604051631aed5a8560e21b8152916000918391829084908290612b139060048301612a6b565b5050565b9190612c0183612cce565b15612c2b5750612b136000928392604051948580948193631aed5a8560e21b835260048301612a6b565b905015612c355750565b803b15612c5957604051634349776d60e01b81529081906114279060048301610a63565b604051630317313760e01b81529081906114279060048301610a63565b6000546001600160a01b03163303612c8a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000602091604051838101906301ffc9a760e01b8252631aed5a8560e21b602482015260248152612cfe8161067e565b5191617530fa6000513d82612d1f575b5081612d18575090565b9050151590565b60201115915038612d0e565b600090602092604051848101916301ffc9a760e01b835263ffffffff60e01b16602482015260248152612cfe8161067e565b8054821015612d76575b60005260206000200190600090565b612d7e611cef565b612d67565b612d8d8282612de8565b612de1578082612dbd612db4600194548560401b811015612dd4575b858101855584612d5d565b819391546120aa565b905580549260005201602052604060002055600190565b612ddc610624565b612da9565b5050600090565b60019160005201602052604060002054151590565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211612e2357565b610bda612dfd565b8054908115612e555760001991820191612e458383612d5d565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001810191806000528260205260406000205492831515600014612f2f57612ebd612ecc936000958619808201828111612f22575b8354918201918211612f15575b808203612ed2575b505050612e2b565b90600052602052604060002090565b55600190565b612efc612ef691612ee6612f0c9487612d5d565b90549060031b1c92839187612d5d565b906120bf565b8590600052602052604060002090565b55388080612eb5565b612f1d612dfd565b612ead565b612f2a612dfd565b612ea0565b50505050600090565b9060405191828154918282526020928383019160005283600020936000905b828210612f6d57505050610bda92500383610699565b855484526001958601958895509381019390910190612f57565b61053c916001600160a01b031690612d83565b15612fa157565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15612fdc57565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b9081603702916037830403612e2357565b906103ea91828102928184041490151715612e2357565b81810292918115918404141715612e2357565b9060018201809211612e2357565b6023019081602311612e2357565b60b401908160b411612e2357565b9291606894918452602084015260018060601b0319809260601b16604084015260601b1660548201520190565b6130b36130ad8254610aef565b826120e6565b600c6579656c6c6f7760d01b019055565b6130d16130ad8254610aef565b600c65707572706c6560d01b019055565b6130ef6130ad8254610aef565b6006621c995960ea1b019055565b61310a6130ad8254610aef565b600863626c756560e01b019055565b6131266130ad8254610aef565b600a6433b932b2b760d91b019055565b6131436130ad8254610aef565b6012681b1d5adcdbdb985d5d60ba1b019055565b1561315e57565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b60019060001981146131a4570190565b6131ac612dfd565b0190565b909291906001600160a01b0381168015612563576131cd85612703565b61325d576131da85612703565b61325d5784610bda9495613258926131fb6131f6600254613194565b600255565b613208826124b58761222f565b50613221856124d3846000526003602052604060002090565b60006000805160206136ba833981519152604051806132418a3383612720565b0390a46113f8604051948592853360208601612773565b612bbe565b6040516334c7b51160e01b815260048101869052602490fd5b1561327d57565b60405162461bcd60e51b81526020600482015260146024820152731314d40e0e88139bdd08185d5d1a1bdc9a5e995960621b6044820152606490fd5b90816020910312610398575161053c81610e96565b6040516301ffc9a760e01b808252633a271fff60e01b60048301526001600160a01b0392909216916020918281602481875afa60009181613389575b506133185750505050600090565b61332457505050600090565b604051908152631aed5a8560e21b6004820152918190839060249082905afa91829160009361335a575b505061053c5750600090565b61337a929350803d10613382575b6133728183610699565b8101906132b9565b90388061334e565b503d613368565b6133a1919250843d8611613382576133728183610699565b903861330a565b6133e5611e95604051696773c5a04a6d4300884b60b11b60208201526000602a8201526301ffc9a760e01b602c82015260208152611e908161063b565b805160148114159081613414575b50611f215761340190611f50565b60601c908115612de15761053c91612d2b565b90501515386133f3565b9190916040818403126103985780516001600160401b039390848111610398578161344a918401612a04565b9360208301519081116103985761053c9201612a04565b9294916134819061053c979592855260c0602086015260c0850190610506565b9462ffffff60e81b1660408401526060830152608082015260a0818403910152610506565b6048610bda91939293604051948591650379abe3500160c51b602084015260288301526134dc81518092602086860191016104e3565b8101036028810185520183610699565b9060008051602061363a83398151915281036135c5575080600061351a61351561053c946103dd565b610bbf565b9161352e6135278261039d565b5460e81b90565b90613538816103ad565b5493613543826103bd565b5491613581613554613515836103cd565b6006549093906001600160a01b0316946040519889978896879663ad27274b60e01b885260048801613461565b03915afa9081156135b8575b60009081926135a35750602081519101206134a6565b9061186892503d8091833e6118608183610699565b6135c0612aa2565b61358d565b61053c91906135d3916128b6565b60208151910120600052600160205261059d61053c604060002060405192838092610b2956fea6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbbdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af19afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e02f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3cb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bfece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2a2646970667358221220facca20eb8e2ef9a16a8249853dd259e81beba0c461a5ea4dd10a578c3ba1a2c64736f6c63430008110033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x33 JUMPI JUMPDEST CALLDATASIZE ISZERO PUSH2 0x26 JUMPI JUMPDEST PUSH2 0x1E CALLDATASIZE PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD RETURN JUMPDEST PUSH2 0x2E PUSH2 0x1D74 JUMP JUMPDEST PUSH2 0x15 JUMP JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0x923F9E EQ PUSH2 0x366 JUMPI DUP1 PUSH4 0x17C96B8 EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x354 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x34B JUMPI DUP1 PUSH4 0xE2FEE84 EQ PUSH2 0x342 JUMPI DUP1 PUSH4 0x16E023B3 EQ PUSH2 0x339 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x19C9D79B EQ PUSH2 0x327 JUMPI DUP1 PUSH4 0x1D26FCE6 EQ PUSH2 0x31E JUMPI DUP1 PUSH4 0x1EAD90B0 EQ PUSH2 0x315 JUMPI DUP1 PUSH4 0x217B2270 EQ PUSH2 0x30C JUMPI DUP1 PUSH4 0x2A3654A4 EQ PUSH2 0x303 JUMPI DUP1 PUSH4 0x472DFCFB EQ PUSH2 0x2FA JUMPI DUP1 PUSH4 0x475A590D EQ PUSH2 0x2F1 JUMPI DUP1 PUSH4 0x49A6078D EQ PUSH2 0x2E8 JUMPI DUP1 PUSH4 0x511B6952 EQ PUSH2 0x2DF JUMPI DUP1 PUSH4 0x54F6127F EQ PUSH2 0x2D6 JUMPI DUP1 PUSH4 0x6643A686 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x66D003AC EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x6963D438 EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2B2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2A9 JUMPI DUP1 PUSH4 0x7165485D EQ PUSH2 0x2A0 JUMPI DUP1 PUSH4 0x791790C9 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x7E87632C EQ PUSH2 0x28E JUMPI DUP1 PUSH4 0x7F23690C EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x86A10DDD EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0x97902421 EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0xA3B261F2 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xA4D66DAF EQ PUSH2 0x246 JUMPI DUP1 PUSH4 0xBE9F0E6F EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0xD6C1407C EQ PUSH2 0x234 JUMPI DUP1 PUSH4 0xD91A61D0 EQ PUSH2 0x22B JUMPI DUP1 PUSH4 0xDB8C9663 EQ PUSH2 0x222 JUMPI DUP1 PUSH4 0xDEDFF9C6 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xEB93406B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x207 JUMPI PUSH4 0xFC056ACC SUB PUSH2 0xE JUMPI PUSH2 0x202 PUSH2 0x1C4F JUMP JUMPDEST PUSH2 0xE JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1B9D JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x19DE JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1956 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x187C JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x17AA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1763 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1673 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1655 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x15DA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x15BB JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x14F6 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1498 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x146E JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1317 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x12C0 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1226 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x10AC JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x108E JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1041 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x1006 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xFA0 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF70 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF43 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xF23 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xEBB JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xDFA JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xC13 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xBDC JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xABD JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xA76 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0xA2B JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x961 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x71D JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x605 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x5E2 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x5B8 JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x53F JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x41A JUMP JUMPDEST POP PUSH2 0x202 PUSH2 0x3ED JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND SWAP1 DUP2 DUP2 SUB PUSH2 0x398 JUMPI PUSH2 0x46F SWAP2 PUSH4 0x1D138B83 PUSH1 0xE1 SHL DUP2 EQ SWAP2 DUP3 ISZERO SWAP2 DUP3 PUSH2 0x473 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE POP SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST SWAP1 SWAP2 PUSH2 0x49B JUMPI JUMPDEST POP DUP2 ISZERO PUSH2 0x48B JUMPI JUMPDEST POP CODESIZE DUP1 DUP1 PUSH2 0x45A JUMP JUMPDEST PUSH2 0x495 SWAP2 POP PUSH2 0x33A8 JUMP JUMPDEST CODESIZE PUSH2 0x482 JUMP JUMPDEST SWAP1 SWAP2 POP PUSH4 0xA918FA6B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x4B8 JUMPI JUMPDEST POP SWAP1 CODESIZE PUSH2 0x47A JUMP JUMPDEST PUSH4 0x18A6A9A5 PUSH1 0xE2 SHL DUP2 EQ SWAP2 POP DUP2 ISZERO PUSH2 0x4D2 JUMPI JUMPDEST POP CODESIZE PUSH2 0x4B0 JUMP JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP CODESIZE PUSH2 0x4CB JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x4F6 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x4E6 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x51F DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH2 0x53C SWAP3 DUP2 DUP2 MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x361A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 MLOAD PUSH2 0x46F SWAP1 PUSH2 0x5A4 DUP2 PUSH2 0x59D DUP2 PUSH32 0x2A367AE1AC46D529739AA27AC74856F860E70AF05D3642D18BA60FD5D32A069A PUSH2 0xB29 JUMP JUMPDEST SUB DUP3 PUSH2 0x699 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x6 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0x5A4 PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x34EC JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x65E PUSH2 0x624 JUMP JUMPDEST PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x60 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND DUP2 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT SWAP1 DUP3 LT OR PUSH2 0x656 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x6D9 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH2 0x6E1 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST SWAP3 SWAP2 SWAP3 PUSH2 0x6F2 DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP2 PUSH2 0x700 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x699 JUMP JUMPDEST DUP3 SWAP5 DUP2 DUP5 MSTORE DUP2 DUP4 ADD GT PUSH2 0x398 JUMPI DUP3 DUP2 PUSH1 0x20 SWAP4 DUP5 PUSH1 0x0 SWAP7 ADD CALLDATACOPY ADD ADD MSTORE JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI PUSH2 0x763 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x24 DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 ADD PUSH2 0x6E6 JUMP JUMPDEST SWAP2 PUSH2 0x78A PUSH2 0x770 DUP4 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ SWAP1 DUP2 ISZERO PUSH2 0x86B JUMPI JUMPDEST POP PUSH2 0x3276 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xD DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 DUP5 MLOAD SWAP2 DUP3 GT PUSH2 0x85E JUMPI JUMPDEST PUSH2 0x7B9 DUP3 PUSH2 0x7B3 DUP6 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP6 PUSH2 0x210E JUMP JUMPDEST DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x7F3 JUMPI POP DUP4 SWAP5 DUP3 SWAP4 SWAP5 SWAP3 PUSH2 0x7E8 JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x7D1 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x809 DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 DUP7 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x846 JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x82D JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE DUP1 RETURN JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x822 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST PUSH2 0x866 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST PUSH2 0x875 SWAP2 POP PUSH2 0x32CE JUMP JUMPDEST CODESIZE PUSH2 0x784 JUMP JUMPDEST PUSH1 0x20 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x894 JUMPI JUMPDEST PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST PUSH2 0x89C PUSH2 0x624 JUMP JUMPDEST PUSH2 0x88D JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x8B8 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x8C6 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8F0 JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x8E2 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 SWAP3 MSTORE PUSH1 0x40 DUP4 ADD SWAP3 DUP2 PUSH1 0x40 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD SWAP6 ADD SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x933 JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 DUP5 DUP1 PUSH2 0x951 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP7 DUP3 SUB ADD DUP8 MSTORE DUP11 MLOAD PUSH2 0x506 JUMP JUMPDEST SWAP9 ADD SWAP4 ADD SWAP4 ADD SWAP2 SWAP5 SWAP4 SWAP3 SWAP1 PUSH2 0x923 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x993 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x9AC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 DUP1 MLOAD DUP3 MLOAD SUB PUSH2 0xA19 JUMPI PUSH2 0x9C0 DUP2 MLOAD PUSH2 0x1CA5 JUMP JUMPDEST SWAP2 PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xA0B JUMPI DUP1 PUSH2 0x9EF PUSH2 0x9DD PUSH1 0x1 SWAP4 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x9E8 DUP4 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x34EC JUMP JUMPDEST PUSH2 0x9F9 DUP3 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0xA04 DUP2 DUP7 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x9C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x46F DUP7 DUP3 PUSH2 0x8FF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0xE8 SHL PUSH1 0x40 MLOAD SWAP1 PUSH3 0xFFFFFF PUSH1 0xE8 SHL AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xA95 PUSH1 0x4 CALLDATALOAD PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE RETURN JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x398 JUMPI JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xAE5 PUSH2 0xADC PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x23EC JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0xB1F JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0xB09 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xAFE JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP3 SWAP2 DUP1 SLOAD SWAP2 PUSH2 0xB3A DUP4 PUSH2 0xAEF JUMP JUMPDEST SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 SWAP4 DUP5 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0xB9C JUMPI POP PUSH1 0x1 EQ PUSH2 0xB5C JUMPI JUMPDEST POP POP POP POP JUMP JUMPDEST SWAP1 SWAP2 SWAP4 SWAP5 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP3 DUP4 PUSH1 0x0 KECCAK256 SWAP3 DUP5 PUSH1 0x0 SWAP5 JUMPDEST DUP4 DUP7 LT PUSH2 0xB88 JUMPI POP POP POP POP ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0xB56 JUMP JUMPDEST DUP1 SLOAD DUP6 DUP8 ADD DUP4 ADD MSTORE SWAP5 ADD SWAP4 DUP6 SWAP1 DUP3 ADD PUSH2 0xB71 JUMP JUMPDEST SWAP3 SWAP5 POP POP POP PUSH1 0x20 SWAP4 SWAP5 POP PUSH1 0xFF NOT AND DUP4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL ADD ADD SWAP1 CODESIZE DUP1 DUP1 DUP1 PUSH2 0xB56 JUMP JUMPDEST SWAP1 PUSH2 0xBDA PUSH2 0xBD3 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST SUB DUP4 PUSH2 0x699 JUMP JUMPDEST JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH2 0x46F PUSH2 0x59D PUSH2 0x5A4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0xC30 PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0xC43 PUSH2 0xC3E PUSH1 0x7 SLOAD PUSH2 0x3049 JUMP JUMPDEST PUSH1 0x7 SSTORE JUMP JUMPDEST PUSH2 0xD88 PUSH1 0x7 SLOAD SWAP2 PUSH2 0xC6E PUSH2 0xC61 DUP5 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x5 PUSH2 0xC79 NUMBER PUSH2 0x2E14 JUMP JUMPDEST BLOCKHASH PUSH1 0x40 MLOAD PUSH2 0xCA1 DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 DUP8 ADDRESS SWAP2 DUP12 DUP9 PUSH2 0x3073 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP4 MSTORE DUP3 PUSH2 0x699 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0xCF1 PUSH1 0x0 DUP3 SWAP1 BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 DUP4 SWAP1 BYTE PUSH1 0xF0 SHL PUSH1 0xFF PUSH1 0xF0 SHL AND OR PUSH1 0x2 DUP4 SWAP1 BYTE PUSH1 0xE8 SHL PUSH1 0xFF PUSH1 0xE8 SHL AND OR PUSH2 0xCE0 DUP8 PUSH2 0x39D JUMP JUMPDEST SWAP1 PUSH1 0xE8 SHR PUSH3 0xFFFFFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xD0F PUSH2 0xD0A PUSH2 0xD03 DUP4 PUSH1 0x3 BYTE PUSH2 0x300E JUMP JUMPDEST PUSH1 0xFF SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH2 0x3057 JUMP JUMPDEST PUSH2 0xD18 DUP7 PUSH2 0x3AD JUMP JUMPDEST SSTORE PUSH2 0xD44 PUSH2 0xD3F PUSH2 0xD03 PUSH2 0xD35 PUSH2 0xD2E DUP10 PUSH2 0x3AD JUMP JUMPDEST SLOAD PUSH1 0x2 SHR SWAP1 JUMP JUMPDEST DUP5 PUSH1 0x4 BYTE SWAP1 PUSH2 0x3036 JUMP JUMPDEST PUSH2 0x3065 JUMP JUMPDEST PUSH2 0xD4D DUP7 PUSH2 0x3BD JUMP JUMPDEST SSTORE DUP2 BYTE MOD DUP1 PUSH2 0xD98 JUMPI POP PUSH2 0xD68 PUSH2 0xD63 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x3119 JUMP JUMPDEST PUSH2 0xD79 PUSH2 0xD74 DUP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x3136 JUMP JUMPDEST DUP3 PUSH2 0xD82 PUSH2 0x1DE9 JUMP JUMPDEST SWAP2 PUSH2 0x31B0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH1 0x20 DUP3 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0xDB7 JUMPI POP PUSH2 0xDB2 PUSH2 0xDAD DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30FD JUMP JUMPDEST PUSH2 0xD68 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xDD1 JUMPI POP PUSH2 0xDB2 PUSH2 0xDCC DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30E2 JUMP JUMPDEST PUSH1 0x3 SUB PUSH2 0xDE9 JUMPI PUSH2 0xDB2 PUSH2 0xDE4 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30C4 JUMP JUMPDEST PUSH2 0xDB2 PUSH2 0xDF5 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x30A0 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xE19 DUP2 PUSH2 0x2703 JUMP JUMPDEST ISZERO PUSH2 0xE7E JUMPI PUSH1 0x0 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH2 0xE32 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2F38 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 DUP4 ADD DUP2 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0xE5E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0xE4F JUMP JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x5747CD1B PUSH1 0xE1 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 ISZERO ISZERO SUB PUSH2 0x398 JUMPI JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP2 PUSH1 0x20 PUSH2 0x53C SWAP4 CALLDATALOAD SWAP2 ADD PUSH2 0x6E6 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0xED5 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x398 JUMPI PUSH1 0x64 CALLDATALOAD PUSH2 0xEF4 DUP2 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x84 CALLDATALOAD SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT PUSH2 0x398 JUMPI PUSH2 0xF17 PUSH2 0xF21 SWAP5 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST SWAP3 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x2427 JUMP JUMPDEST STOP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x46F PUSH2 0x5A4 PUSH1 0x4 CALLDATALOAD PUSH2 0x1C86 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH20 0xA81A6A910FED20374361B35C451A4A44F86CED46 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD SWAP2 DUP3 GT PUSH2 0x398 JUMPI CALLDATASIZE PUSH1 0x24 DUP4 PUSH1 0x5 SHL DUP4 ADD ADD GT PUSH2 0x398 JUMPI PUSH2 0x46F SWAP2 PUSH1 0x24 PUSH2 0xFFA SWAP3 ADD PUSH2 0x22BB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x8FF JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1028 PUSH2 0xAA7 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x105C PUSH2 0x2C76 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP3 SSTORE DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x365A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 DUP1 LOG3 DUP1 RETURN JUMPDEST DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3EA DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH2 0xAE5 PUSH2 0x10CB PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x32CE JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x10E7 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x10F5 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x111F JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x398 JUMPI DUP2 MSTORE SWAP1 DUP4 ADD SWAP1 DUP4 ADD PUSH2 0x1111 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 CALLDATALOAD SWAP2 PUSH2 0x1155 DUP4 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x1163 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP3 PUSH1 0x5 SHL DUP3 ADD ADD SWAP3 DUP4 GT PUSH2 0x398 JUMPI DUP4 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x118D JUMPI POP POP POP POP SWAP1 JUMP JUMPDEST DUP4 DUP1 SWAP2 DUP4 CALLDATALOAD PUSH2 0x119B DUP2 PUSH2 0xE96 JUMP JUMPDEST DUP2 MSTORE ADD SWAP2 ADD SWAP1 PUSH2 0x117F JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x1F DUP4 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP2 CALLDATALOAD SWAP1 PUSH2 0x11BE DUP3 PUSH2 0x87B JUMP JUMPDEST SWAP3 PUSH2 0x11CC PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP3 DUP5 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP1 DUP7 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP3 DUP1 DUP5 GT PUSH2 0x398 JUMPI DUP5 DUP4 ADD SWAP2 JUMPDEST DUP5 DUP4 LT PUSH2 0x11FA JUMPI POP POP POP POP POP POP SWAP1 JUMP JUMPDEST DUP3 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI DUP7 SWAP2 PUSH2 0x121B DUP5 DUP5 DUP1 SWAP5 DUP10 ADD ADD PUSH2 0xEA0 JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP2 PUSH2 0x11EA JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1258 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x10D0 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1270 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1287 SWAP1 CALLDATASIZE SWAP1 DUP7 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x64 CALLDATALOAD DUP4 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x129F SWAP1 CALLDATASIZE SWAP1 DUP8 ADD PUSH2 0x113E JUMP JUMPDEST SWAP3 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0xF21 SWAP6 PUSH2 0x12BA SWAP2 CALLDATASIZE SWAP2 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP4 PUSH2 0x25B0 JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x12EC SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x12F4 PUSH2 0x2C76 JUMP JUMPDEST CALLVALUE PUSH2 0x1305 JUMPI PUSH2 0xF21 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x1FA8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1331 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1354 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST SWAP1 PUSH2 0x135E DUP4 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 CALLER DUP4 SUB PUSH2 0x144F JUMPI POP DUP3 AND DUP1 ISZERO PUSH2 0x143D JUMPI DUP1 DUP3 EQ PUSH2 0x142B JUMPI PUSH2 0x13A5 PUSH2 0x13A1 DUP5 PUSH2 0x139C DUP9 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2F87 JUMP JUMPDEST ISZERO SWAP1 JUMP JUMPDEST PUSH2 0x140B JUMPI SWAP4 DUP1 PUSH2 0x1406 SWAP3 PUSH2 0xF21 SWAP7 PUSH32 0x1B1B58AA2EC0CEC2228B2D37124556D41F5A1F7B12F089171F896CC236671215 PUSH1 0x40 MLOAD DUP1 PUSH2 0x13E2 DUP11 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x13F8 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 CALLER PUSH1 0x20 DUP6 ADD PUSH2 0x2396 JUMP JUMPDEST SUB PUSH1 0x1F NOT DUP2 ADD DUP5 MSTORE DUP4 PUSH2 0x699 JUMP JUMPDEST PUSH2 0x2AAF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x14EC4D6D PUSH1 0xE3 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP8 DUP7 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x44FED6B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9577B8B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST DUP6 PUSH2 0x1427 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP5 MSTORE CALLER SWAP2 PUSH1 0x4 DUP6 ADD PUSH2 0x2358 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x367A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 MLOAD PUSH2 0x46F SWAP1 PUSH2 0x5A4 DUP2 PUSH2 0x59D DUP2 PUSH32 0x83B322886C7B7E25779E5D38E06E005C9E7ABA1E1267CE9210CF24E31833535A PUSH2 0xB29 JUMP JUMPDEST POP PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1523 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x153B SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP2 PUSH2 0x1544 PUSH2 0x2C76 JUMP JUMPDEST CALLVALUE PUSH2 0x15AC JUMPI DUP2 MLOAD DUP4 MLOAD SUB PUSH2 0x159D JUMPI DUP2 MLOAD ISZERO PUSH2 0x158E JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xF21 JUMPI DUP1 PUSH2 0x1588 PUSH2 0x1576 PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1581 DUP4 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1FA8 JUMP JUMPDEST ADD PUSH2 0x155D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x97DA5F95 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3BCC8979 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF36BA737 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x398 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x15FD PUSH2 0xAA7 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 DUP2 MSTORE PUSH2 0x1612 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2F38 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP2 DUP4 SWAP3 DUP4 ADD DUP2 DUP5 MSTORE DUP3 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH1 0x40 DUP6 ADD SWAP4 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x163E JUMPI POP POP POP POP SUB SWAP1 RETURN JUMPDEST DUP4 MLOAD DUP6 MSTORE DUP7 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 PUSH1 0x1 ADD PUSH2 0x162F JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE90 DUP2 MSTORE RETURN JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16A5 SWAP1 CALLDATASIZE SWAP1 DUP5 ADD PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD DUP3 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16BC SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x8A1 JUMP JUMPDEST SWAP2 PUSH1 0x44 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x16D4 SWAP1 CALLDATASIZE SWAP1 DUP6 ADD PUSH2 0x11A6 JUMP JUMPDEST SWAP3 PUSH2 0x16DD PUSH2 0x2C76 JUMP JUMPDEST DUP2 MLOAD DUP4 MLOAD DUP1 SWAP2 EQ SWAP1 DUP2 ISZERO SWAP2 PUSH2 0x1757 JUMPI JUMPDEST POP PUSH2 0x1748 JUMPI DUP2 MLOAD ISZERO PUSH2 0x1739 JUMPI POP PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0xF21 JUMPI DUP1 PUSH2 0x1733 PUSH2 0x1716 PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1721 DUP4 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x172C DUP5 DUP10 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x28D3 JUMP JUMPDEST ADD PUSH2 0x16FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x80C98305 PUSH1 0xE0 SHL DUP2 MSTORE REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x17D38EFF PUSH1 0xE1 SHL DUP2 MSTORE REVERT JUMPDEST SWAP1 POP DUP5 MLOAD EQ ISZERO CODESIZE PUSH2 0x16ED JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1797 PUSH2 0xF21 SWAP2 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x179F PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x28D3 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x180D PUSH1 0x4 DUP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x17D8 DUP2 DUP4 SLOAD AND CALLER EQ PUSH2 0x3276 JUMP JUMPDEST PUSH1 0x6 SLOAD AND PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x934118FB PUSH1 0xE0 SHL DUP3 MSTORE GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x186F JUMPI JUMPDEST DUP4 SWAP1 DUP5 SWAP3 PUSH2 0x184A JUMPI JUMPDEST POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x34A6 JUMP JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36DA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x1844 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x363A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP4 DUP6 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x5A4 DUP2 PUSH1 0x40 DUP8 KECCAK256 PUSH2 0x2153 JUMP JUMPDEST SUB SWAP1 LOG2 DUP1 RETURN JUMPDEST SWAP1 POP PUSH2 0x1868 SWAP2 POP RETURNDATASIZE DUP1 DUP6 DUP4 RETURNDATACOPY PUSH2 0x1860 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x341E JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x1800 JUMP JUMPDEST PUSH2 0x1877 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x17F7 JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1896 PUSH2 0xAA7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD SWAP2 PUSH2 0x18A6 DUP4 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x18C5 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0xEA0 JUMP JUMPDEST PUSH2 0x18CE DUP4 PUSH2 0x2249 JUMP JUMPDEST SWAP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND SWAP1 CALLER DUP3 SWAP1 SUB PUSH2 0x191F JUMPI JUMPDEST DUP5 AND SWAP1 DUP2 ISZERO PUSH2 0x143D JUMPI EQ PUSH2 0x142B JUMPI PUSH2 0x18FF DUP3 DUP3 DUP7 DUP9 DUP8 PUSH2 0x2680 JUMP JUMPDEST PUSH2 0x1905 JUMPI STOP JUMPDEST PUSH2 0xF21 SWAP4 PUSH2 0x13F8 PUSH2 0x1406 SWAP3 PUSH1 0x40 MLOAD SWAP6 DUP7 SWAP4 PUSH1 0x20 DUP6 ADD PUSH2 0x23C1 JUMP JUMPDEST DUP5 DUP2 AND CALLER EQ PUSH2 0x18E4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x760B5ACD PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x1987 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x1991 DUP2 MLOAD PUSH2 0x1CA5 JUMP JUMPDEST SWAP1 PUSH1 0x0 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x19D0 JUMPI DUP1 PUSH2 0x19B4 PUSH2 0x19AE PUSH1 0x1 SWAP4 DUP6 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x1C86 JUMP JUMPDEST PUSH2 0x19BE DUP3 DUP7 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0x19C9 DUP2 DUP6 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x1995 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH2 0x46F DUP6 DUP3 PUSH2 0x8FF JUMP JUMPDEST POP PUSH1 0x0 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x108B JUMPI PUSH2 0x46F SWAP1 PUSH2 0x19FF PUSH2 0xE90 PUSH1 0x7 SLOAD LT PUSH2 0x2F9A JUMP JUMPDEST PUSH2 0x1A29 PUSH2 0x1A24 PUSH2 0x1A1C PUSH1 0xE SLOAD PUSH2 0x1A17 DUP2 CALLVALUE LT ISZERO PUSH2 0x2FD5 JUMP JUMPDEST PUSH2 0x301F JUMP JUMPDEST PUSH2 0x3E8 SWAP1 DIV SWAP1 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH2 0x1A37 PUSH2 0xC3E PUSH1 0x7 SLOAD PUSH2 0x3049 JUMP JUMPDEST PUSH2 0xD88 PUSH1 0x7 SLOAD SWAP2 PUSH2 0x1A55 PUSH2 0xC61 DUP5 PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH2 0x1A60 NUMBER PUSH2 0x2E14 JUMP JUMPDEST BLOCKHASH PUSH1 0x40 MLOAD PUSH2 0x1A7B DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 ADDRESS SWAP1 CALLER SWAP1 DUP12 DUP9 PUSH2 0x3073 JUMP JUMPDEST MLOAD SWAP1 KECCAK256 PUSH2 0x1AB8 DUP2 DUP5 BYTE PUSH1 0xF8 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND PUSH1 0x1 DUP4 SWAP1 BYTE PUSH1 0xF0 SHL PUSH1 0xFF PUSH1 0xF0 SHL AND OR PUSH1 0x2 DUP4 SWAP1 BYTE PUSH1 0xE8 SHL PUSH1 0xFF PUSH1 0xE8 SHL AND OR PUSH2 0xCE0 DUP8 PUSH2 0x39D JUMP JUMPDEST PUSH2 0x1ACA PUSH2 0xD0A PUSH2 0xD03 DUP4 PUSH1 0x3 BYTE PUSH2 0x300E JUMP JUMPDEST PUSH2 0x1AD3 DUP7 PUSH2 0x3AD JUMP JUMPDEST SSTORE PUSH2 0x1AE9 PUSH2 0xD3F PUSH2 0xD03 PUSH2 0xD35 PUSH2 0xD2E DUP10 PUSH2 0x3AD JUMP JUMPDEST PUSH2 0x1AF2 DUP7 PUSH2 0x3BD JUMP JUMPDEST SSTORE DUP2 BYTE MOD DUP1 PUSH2 0x1B4F JUMPI POP PUSH2 0x1B08 PUSH2 0xD63 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B14 PUSH2 0xD74 DUP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0x1B26 PUSH2 0x1B1F PUSH2 0x1DE9 JUMP JUMPDEST DUP5 CALLER PUSH2 0x31B0 JUMP JUMPDEST DUP1 DUP1 DUP1 CALLVALUE PUSH20 0xA81A6A910FED20374361B35C451A4A44F86CED46 GAS CALL PUSH2 0x1B49 PUSH2 0x1E1A JUMP JUMPDEST POP PUSH2 0x3157 JUMP JUMPDEST PUSH1 0x1 DUP2 SUB PUSH2 0x1B69 JUMPI POP PUSH2 0x1B64 PUSH2 0xDAD DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B08 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0x1B7E JUMPI POP PUSH2 0x1B64 PUSH2 0xDCC DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x3 SUB PUSH2 0x1B91 JUMPI PUSH2 0x1B64 PUSH2 0xDE4 DUP5 PUSH2 0x3CD JUMP JUMPDEST PUSH2 0x1B64 PUSH2 0xDF5 DUP5 PUSH2 0x3CD JUMP JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH2 0x1BB7 PUSH2 0xAA7 JUMP JUMPDEST PUSH2 0x1BBF PUSH2 0x2C76 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP1 ISZERO PUSH2 0x1BFB JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR DUP3 SSTORE SWAP1 SWAP3 AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x365A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 DUP1 LOG3 DUP1 RETURN JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0x398 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x398 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH2 0x46F PUSH2 0x59D PUSH2 0x5A4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x59D PUSH2 0x53C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP JUMPDEST SWAP1 PUSH2 0x1CAF DUP3 PUSH2 0x87B JUMP JUMPDEST PUSH2 0x1CBC PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x699 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x1CCD PUSH1 0x1F NOT SWAP2 PUSH2 0x87B JUMP JUMPDEST ADD SWAP1 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x1CDE JUMPI POP POP POP JUMP JUMPDEST DUP1 PUSH1 0x60 PUSH1 0x20 DUP1 SWAP4 DUP6 ADD ADD MSTORE ADD PUSH2 0x1CD2 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP2 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1D1B JUMPI JUMPDEST PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH2 0x1D23 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x1D13 JUMP JUMPDEST PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D39 JUMPI PUSH2 0x53C SWAP1 PUSH2 0x1E4A JUMP JUMPDEST PUSH1 0x44 PUSH1 0x40 MLOAD DUP1 SWAP3 PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x20 PUSH1 0x4 DUP4 ADD MSTORE DUP1 PUSH1 0x24 DUP4 ADD MSTORE DUP1 PUSH1 0x0 DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 REVERT JUMPDEST POP CALLVALUE ISZERO PUSH2 0x1D8D JUMPI PUSH1 0x40 MLOAD PUSH4 0x30FA4A21 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH4 0xE5099EE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 DUP1 SWAP3 SWAP2 DUP3 CALLDATACOPY ADD PUSH1 0x0 DUP2 MSTORE SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x34 SWAP4 SWAP2 DUP2 PUSH1 0x0 DUP3 CALLDATACOPY PUSH1 0x60 SWAP4 SWAP1 SWAP4 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND SWAP3 ADD SWAP2 DUP3 MSTORE PUSH1 0x14 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x20 DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH2 0x1E0D JUMPI JUMPDEST PUSH1 0x40 MSTORE PUSH1 0x0 DUP3 MSTORE JUMP JUMPDEST PUSH2 0x1E15 PUSH2 0x624 JUMP JUMPDEST PUSH2 0x1E04 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0x1E45 JUMPI RETURNDATASIZE SWAP1 PUSH2 0x1E2B DUP3 PUSH2 0x6BC JUMP JUMPDEST SWAP2 PUSH2 0x1E39 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x699 JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST PUSH1 0x60 SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL PUSH1 0x0 CALLDATALOAD AND SWAP2 PUSH2 0x1E9A PUSH2 0x1E95 PUSH1 0x40 MLOAD PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD MSTORE DUP6 PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x63B JUMP JUMPDEST PUSH2 0x1F85 JUMP JUMPDEST PUSH2 0x1C86 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x14 DUP2 EQ ISZERO SWAP1 DUP2 PUSH2 0x1F46 JUMPI JUMPDEST POP PUSH2 0x1F21 JUMPI PUSH2 0x1EB6 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 SHR SWAP2 DUP3 ISZERO PUSH2 0x1EFD JUMPI POP PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x40 MLOAD PUSH2 0x1EDE DUP2 PUSH2 0xC93 PUSH1 0x20 DUP3 ADD SWAP5 CALLVALUE SWAP1 CALLER SWAP1 DUP8 PUSH2 0x1DC1 JUMP JUMPDEST MLOAD SWAP2 CALLVALUE SWAP1 GAS CALL PUSH2 0x1EEC PUSH2 0x1E1A JUMP JUMPDEST SWAP1 ISZERO PUSH2 0x1EF5 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xBB370B2B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x42BFE79F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO CODESIZE PUSH2 0x1EA8 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT DUP1 DUP3 AND SWAP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 0x14 DUP2 LT PUSH2 0x1F76 JUMPI POP POP POP JUMP JUMPDEST PUSH1 0x14 SUB PUSH1 0x3 SHL DUP3 SWAP1 SHL AND AND SWAP2 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD MLOAD SWAP1 PUSH1 0x20 DUP2 LT PUSH2 0x1F99 JUMPI POP SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT SWAP1 PUSH1 0x20 SUB PUSH1 0x3 SHL SHL AND SWAP1 JUMP JUMPDEST SWAP1 PUSH32 0xF675E9361AF1C1664C1868CFA3EB97672D6B1A513AA5B81DEC34C9EE330E818D DUP3 EQ PUSH2 0x2098 JUMPI PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x361A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 SUB PUSH2 0x1FF7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x85C169BD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x367A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP3 SUB PUSH2 0x201E JUMPI PUSH1 0x40 MLOAD PUSH4 0xECEAB67 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH32 0xE0261FA95DB2EB3B5439BD033CDA66D56B96F92F243A8228FD87550ED7BDFDB3 DUP3 SUB PUSH2 0x2057 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4EF6D7FB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x2093 DUP2 PUSH2 0x2087 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36DA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 PUSH2 0x2082 DUP7 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH2 0x2153 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B324005 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 PUSH1 0x3 SHL PUSH1 0x0 NOT DUP2 SHL SWAP3 DUP4 SWAP2 SHL AND SWAP2 NOT AND OR SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x20CB SWAP2 DUP4 SLOAD PUSH2 0x20AA JUMP JUMPDEST SWAP1 SSTORE JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x20DA JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x20CF JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x20F3 JUMPI POP POP JUMP JUMPDEST PUSH2 0xBDA SWAP2 PUSH1 0x0 MSTORE PUSH1 0x1F PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 ADD PUSH1 0x5 SHR DUP2 ADD SWAP1 PUSH2 0x20CF JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x1F DUP2 GT PUSH2 0x211D JUMPI POP POP POP JUMP JUMPDEST PUSH2 0xBDA SWAP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x20 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP4 ADD SWAP4 LT PUSH2 0x2149 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x20CF JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x213C JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x2222 JUMPI JUMPDEST PUSH2 0x217B DUP2 PUSH2 0x2175 DUP5 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP5 PUSH2 0x210E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x21B7 JUMPI POP DUP2 SWAP3 SWAP4 SWAP5 PUSH1 0x0 SWAP3 PUSH2 0x21AC JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH2 0x2196 JUMP JUMPDEST SWAP1 PUSH1 0x1F NOT DUP4 AND SWAP6 PUSH2 0x21CD DUP6 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP9 DUP3 LT PUSH2 0x220A JUMPI POP POP DUP4 PUSH1 0x1 SWAP6 SWAP7 SWAP8 LT PUSH2 0x21F1 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP1 SSTORE JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH2 0x21E7 JUMP JUMPDEST DUP1 PUSH1 0x1 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP7 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x21D2 JUMP JUMPDEST PUSH2 0x222A PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2167 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xE7E JUMPI POP SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x22AE JUMPI JUMPDEST PUSH1 0x5 SHL DUP2 ADD CALLDATALOAD SWAP1 PUSH1 0x1E NOT DUP2 CALLDATASIZE SUB ADD DUP3 SLT ISZERO PUSH2 0x398 JUMPI ADD DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x398 JUMPI PUSH1 0x20 ADD DUP3 CALLDATASIZE SUB DUP2 SGT PUSH2 0x398 JUMPI SWAP2 SWAP1 JUMP JUMPDEST PUSH2 0x22B6 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x2276 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x22C6 DUP2 PUSH2 0x1CA5 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP2 DUP3 JUMPDEST DUP2 DUP2 LT PUSH2 0x22D9 JUMPI POP POP POP POP JUMP JUMPDEST DUP4 DUP1 PUSH2 0x22E6 DUP4 DUP6 DUP8 PUSH2 0x226C JUMP JUMPDEST PUSH1 0x40 SWAP4 SWAP2 PUSH2 0x22F8 DUP6 MLOAD DUP1 SWAP4 DUP2 SWAP4 PUSH2 0x1DB3 JUMP JUMPDEST SUB SWAP1 ADDRESS GAS DELEGATECALL SWAP1 PUSH2 0x2306 PUSH2 0x1E1A JUMP JUMPDEST SWAP2 ISZERO PUSH2 0x232D JUMPI POP SWAP1 PUSH1 0x1 SWAP2 PUSH2 0x231B DUP3 DUP10 PUSH2 0x1D06 JUMP JUMPDEST MSTORE PUSH2 0x2326 DUP2 DUP9 PUSH2 0x1D06 JUMP JUMPDEST POP ADD PUSH2 0x22CC JUMP JUMPDEST DUP2 MLOAD SWAP2 SWAP3 SWAP2 ISZERO PUSH2 0x233F JUMPI DUP3 MLOAD PUSH1 0x20 DUP5 ADD REVERT JUMPDEST MLOAD PUSH4 0x234EB819 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 SWAP2 POP REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH2 0x53C SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x53C SWAP4 SWAP3 PUSH1 0x80 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x23FE DUP5 PUSH2 0x2249 JUMP JUMPDEST AND SWAP2 AND SWAP1 DUP2 EQ SWAP2 DUP3 ISZERO PUSH2 0x2410 JUMPI POP POP SWAP1 JUMP JUMPDEST PUSH2 0x53C SWAP3 POP PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2DE8 JUMP JUMPDEST SWAP1 SWAP3 SWAP4 SWAP2 PUSH2 0x2435 DUP2 CALLER PUSH2 0x23EC JUMP JUMPDEST ISZERO PUSH2 0x2592 JUMPI PUSH2 0x2443 DUP2 PUSH2 0x2249 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP2 DUP5 DUP3 AND SWAP2 DUP3 DUP5 SUB PUSH2 0x2575 JUMPI DUP1 DUP9 AND SWAP4 DUP5 ISZERO PUSH2 0x2563 JUMPI PUSH2 0x246D DUP7 PUSH2 0x2249 JUMP JUMPDEST SWAP2 DUP3 AND SUB PUSH2 0x2533 JUMPI POP POP SWAP3 PUSH2 0x2529 DUP4 DUP1 PUSH2 0xBDA SWAP10 SWAP8 SWAP5 PUSH2 0x13F8 SWAP10 SWAP8 PUSH2 0x2495 PUSH2 0x252E SWAP9 DUP8 PUSH2 0x27E5 JUMP JUMPDEST PUSH2 0x24A7 DUP4 PUSH2 0x24A2 DUP9 PUSH2 0x222F JUMP JUMPDEST PUSH2 0x2E6B JUMP JUMPDEST POP PUSH2 0x24BA DUP4 PUSH2 0x24B5 DUP12 PUSH2 0x222F JUMP JUMPDEST PUSH2 0x2D83 JUMP JUMPDEST POP PUSH2 0x24F2 DUP10 PUSH2 0x24D3 DUP6 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP1 PUSH2 0x2512 DUP11 DUP15 CALLER DUP5 PUSH2 0x2749 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP8 DUP9 SWAP5 DUP6 SWAP3 DUP9 DUP7 CALLER PUSH1 0x20 DUP8 ADD PUSH2 0x27AB JUMP JUMPDEST PUSH2 0x2B5A JUMP JUMPDEST PUSH2 0x2BF6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5A9C31D3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x24ECEF4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2D938F51 PUSH1 0xE1 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP9 DUP9 DUP7 PUSH1 0x4 DUP6 ADD PUSH2 0x2358 JUMP JUMPDEST PUSH1 0x44 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x1294D2A9 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST SWAP5 SWAP4 SWAP1 SWAP2 SWAP3 DUP6 MLOAD SWAP4 DUP4 MLOAD DUP6 EQ DUP1 ISZERO SWAP1 PUSH2 0x2675 JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x266A JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x265F JUMPI JUMPDEST PUSH2 0x264D JUMPI PUSH1 0x0 JUMPDEST DUP6 DUP2 LT PUSH2 0x25EA JUMPI POP POP POP POP POP POP SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x2647 PUSH2 0x260A PUSH2 0x25FD PUSH1 0x1 SWAP5 DUP13 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH2 0x2617 PUSH2 0x25FD DUP5 DUP11 PUSH2 0x1D06 JUMP JUMPDEST PUSH2 0x2621 DUP5 DUP8 PUSH2 0x1D06 JUMP JUMPDEST MLOAD PUSH2 0x2635 PUSH2 0x262F DUP7 DUP11 PUSH2 0x1D06 JUMP JUMPDEST MLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST SWAP2 PUSH2 0x2640 DUP7 DUP12 PUSH2 0x1D06 JUMP JUMPDEST MLOAD SWAP4 PUSH2 0x2427 JUMP JUMPDEST ADD PUSH2 0x25D9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x93A83119 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP3 MLOAD DUP6 EQ ISZERO PUSH2 0x25D2 JUMP JUMPDEST POP DUP2 MLOAD DUP6 EQ ISZERO PUSH2 0x25CB JUMP JUMPDEST POP DUP1 MLOAD DUP6 EQ ISZERO PUSH2 0x25C4 JUMP JUMPDEST SWAP2 SWAP4 SWAP3 DUP5 PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP1 PUSH2 0x26A7 DUP3 DUP3 AND DUP1 SWAP7 PUSH2 0x2E6B JUMP JUMPDEST ISZERO PUSH2 0x26E4 JUMPI POP SWAP1 PUSH2 0x26DF PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x369A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 SWAP3 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 ISZERO ISZERO DUP5 MSTORE PUSH1 0x40 PUSH1 0x20 DUP6 ADD MSTORE AND SWAP6 PUSH1 0x40 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP1 LOG4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 DUP10 SWAP1 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP2 MSTORE SWAP2 DUP2 AND PUSH1 0x20 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xA0 PUSH1 0x80 DUP3 ADD DUP2 SWAP1 MSTORE PUSH2 0x53C SWAP3 SWAP2 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x5 SWAP2 PUSH1 0x20 SWAP4 DUP4 DUP6 MSTORE PUSH1 0x40 SWAP2 DUP3 DUP2 KECCAK256 SWAP5 DUP6 SLOAD SWAP6 DUP3 JUMPDEST DUP8 DUP2 LT PUSH2 0x2813 JUMPI POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD ISZERO PUSH2 0x28A9 JUMPI JUMPDEST DUP2 DUP5 MSTORE DUP9 DUP5 KECCAK256 SLOAD DUP7 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 PUSH2 0x2839 DUP3 PUSH2 0x663 JUMP JUMPDEST DUP7 DUP3 MSTORE DUP10 DUP8 MSTORE DUP6 DUP13 MSTORE PUSH2 0x284E DUP4 DUP11 DUP10 KECCAK256 PUSH2 0x2E6B JUMP JUMPDEST ISZERO PUSH2 0x288E JUMPI PUSH1 0x1 SWAP4 SWAP3 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x369A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP14 DUP10 PUSH2 0x2885 DUP15 SWAP7 DUP15 SWAP7 DUP15 DUP9 DUP1 MLOAD SWAP7 DUP8 SWAP7 DUP8 MSTORE DUP7 ADD MSTORE AND SWAP7 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP1 LOG4 ADD PUSH2 0x2801 JUMP JUMPDEST DUP9 MLOAD PUSH4 0x12A8C6A3 PUSH1 0xE2 SHL DUP2 MSTORE DUP1 PUSH2 0x1427 DUP13 DUP7 PUSH1 0x4 DUP5 ADD PUSH2 0x237B JUMP JUMPDEST PUSH2 0x28B1 PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x281B JUMP JUMPDEST SWAP2 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x40 DUP3 MSTORE PUSH2 0xBDA DUP3 PUSH2 0x67E JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0x28DF DUP4 DUP4 PUSH2 0x28B6 JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 SWAP3 ADD KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x1 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP4 MLOAD SWAP2 PUSH1 0x1 DUP1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x29F7 JUMPI JUMPDEST PUSH2 0x291B DUP4 PUSH2 0x2915 DUP7 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP7 PUSH2 0x210E JUMP JUMPDEST DUP1 PUSH1 0x1F DUP5 GT PUSH1 0x1 EQ PUSH2 0x2975 JUMPI POP SWAP2 DUP1 DUP1 PUSH2 0x2965 SWAP6 SWAP4 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35FA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP8 SWAP6 PUSH1 0x0 SWAP4 PUSH2 0x296A JUMPI JUMPDEST POP SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0x52B JUMP JUMPDEST SUB SWAP1 LOG3 JUMP JUMPDEST DUP7 ADD MLOAD SWAP3 POP CODESIZE PUSH2 0x2949 JUMP JUMPDEST SWAP1 PUSH1 0x1F SWAP4 SWAP3 SWAP4 NOT DUP4 AND PUSH2 0x298D DUP7 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SWAP3 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x29E0 JUMPI POP POP SWAP2 DUP4 SWAP2 PUSH2 0x2965 SWAP7 SWAP5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x35FA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP9 SWAP7 SWAP5 LT PUSH2 0x29C7 JUMPI JUMPDEST POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH2 0x2087 JUMP JUMPDEST DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 PUSH2 0x29BB JUMP JUMPDEST DUP1 DUP8 DUP6 SWAP7 DUP3 SWAP5 SWAP7 DUP13 ADD MLOAD DUP2 SSTORE ADD SWAP6 ADD SWAP4 ADD SWAP1 PUSH2 0x2992 JUMP JUMPDEST PUSH2 0x29FF PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2907 JUMP JUMPDEST DUP2 PUSH1 0x1F DUP3 ADD SLT ISZERO PUSH2 0x398 JUMPI DUP1 MLOAD PUSH2 0x2A1A DUP2 PUSH2 0x6BC JUMP JUMPDEST SWAP3 PUSH2 0x2A28 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x699 JUMP JUMPDEST DUP2 DUP5 MSTORE PUSH1 0x20 DUP3 DUP5 ADD ADD GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP2 PUSH1 0x20 DUP1 DUP6 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST SWAP1 PUSH1 0x20 DUP3 DUP3 SUB SLT PUSH2 0x398 JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP3 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH2 0x53C SWAP3 PUSH32 0xB084A55EBF70FD3C06FD755269DAC2212C4D3F0F4D09079780BFA50C1B2984D DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH2 0x2AB8 DUP2 PUSH2 0x2CCE JUMP JUMPDEST PUSH2 0x2AC0 JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B13 PUSH1 0x0 SWAP3 SWAP2 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH32 0x8A1C15A8799F71B547E08E2BCB2E85257E81B0A07EEE2CE6712549EEF1F00970 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SUB SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x2B4D JUMPI JUMPDEST PUSH2 0x2B2E JUMPI POP JUMP JUMPDEST PUSH2 0x2B4A SWAP1 RETURNDATASIZE DUP1 PUSH1 0x0 DUP4 RETURNDATACOPY PUSH2 0x2B42 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x2A46 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x2B55 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x2B27 JUMP JUMPDEST PUSH2 0x2B63 DUP2 PUSH2 0x2CCE JUMP JUMPDEST PUSH2 0x2B6B JUMPI POP POP JUMP JUMPDEST PUSH2 0x2B13 PUSH1 0x0 SWAP3 SWAP2 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH32 0xB23EAE7E6D1564B295B4C3E3BE402D9A2F0776C57BDF365903496F6FA481AB00 PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x40 PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST PUSH2 0x2BC7 DUP2 PUSH2 0x2CCE JUMP JUMPDEST ISZERO PUSH2 0x2BF2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 PUSH1 0x0 SWAP2 DUP4 SWAP2 DUP3 SWAP1 DUP5 SWAP1 DUP3 SWAP1 PUSH2 0x2B13 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x2A6B JUMP JUMPDEST POP POP JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x2C01 DUP4 PUSH2 0x2CCE JUMP JUMPDEST ISZERO PUSH2 0x2C2B JUMPI POP PUSH2 0x2B13 PUSH1 0x0 SWAP3 DUP4 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1AED5A85 PUSH1 0xE2 SHL DUP4 MSTORE PUSH1 0x4 DUP4 ADD PUSH2 0x2A6B JUMP JUMPDEST SWAP1 POP ISZERO PUSH2 0x2C35 JUMPI POP JUMP JUMPDEST DUP1 EXTCODESIZE ISZERO PUSH2 0x2C59 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4349776D PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3173137 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x1427 SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0xA63 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x2C8A JUMPI JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP2 PUSH1 0x40 MLOAD DUP4 DUP2 ADD SWAP1 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP3 MSTORE PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2CFE DUP2 PUSH2 0x67E JUMP JUMPDEST MLOAD SWAP2 PUSH2 0x7530 STATICCALL PUSH1 0x0 MLOAD RETURNDATASIZE DUP3 PUSH2 0x2D1F JUMPI JUMPDEST POP DUP2 PUSH2 0x2D18 JUMPI POP SWAP1 JUMP JUMPDEST SWAP1 POP ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x20 GT ISZERO SWAP2 POP CODESIZE PUSH2 0x2D0E JUMP JUMPDEST PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP3 PUSH1 0x40 MLOAD DUP5 DUP2 ADD SWAP2 PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP4 MSTORE PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x24 DUP2 MSTORE PUSH2 0x2CFE DUP2 PUSH2 0x67E JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2D76 JUMPI JUMPDEST PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2D7E PUSH2 0x1CEF JUMP JUMPDEST PUSH2 0x2D67 JUMP JUMPDEST PUSH2 0x2D8D DUP3 DUP3 PUSH2 0x2DE8 JUMP JUMPDEST PUSH2 0x2DE1 JUMPI DUP1 DUP3 PUSH2 0x2DBD PUSH2 0x2DB4 PUSH1 0x1 SWAP5 SLOAD DUP6 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2DD4 JUMPI JUMPDEST DUP6 DUP2 ADD DUP6 SSTORE DUP5 PUSH2 0x2D5D JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD PUSH2 0x20AA JUMP JUMPDEST SWAP1 SSTORE DUP1 SLOAD SWAP3 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x2DDC PUSH2 0x624 JUMP JUMPDEST PUSH2 0x2DA9 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x1 SWAP2 PUSH1 0x0 MSTORE ADD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST POP PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 NOT DUP2 ADD SWAP2 SWAP1 DUP3 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH2 0xBDA PUSH2 0x2DFD JUMP JUMPDEST DUP1 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x2E55 JUMPI PUSH1 0x0 NOT SWAP2 DUP3 ADD SWAP2 PUSH2 0x2E45 DUP4 DUP4 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x3 SHL SHL NOT AND SWAP1 SSTORE SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 ADD SWAP2 DUP1 PUSH1 0x0 MSTORE DUP3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 DUP4 ISZERO ISZERO PUSH1 0x0 EQ PUSH2 0x2F2F JUMPI PUSH2 0x2EBD PUSH2 0x2ECC SWAP4 PUSH1 0x0 SWAP6 DUP7 NOT DUP1 DUP3 ADD DUP3 DUP2 GT PUSH2 0x2F22 JUMPI JUMPDEST DUP4 SLOAD SWAP2 DUP3 ADD SWAP2 DUP3 GT PUSH2 0x2F15 JUMPI JUMPDEST DUP1 DUP3 SUB PUSH2 0x2ED2 JUMPI JUMPDEST POP POP POP PUSH2 0x2E2B JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH2 0x2EFC PUSH2 0x2EF6 SWAP2 PUSH2 0x2EE6 PUSH2 0x2F0C SWAP5 DUP8 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 SLOAD SWAP1 PUSH1 0x3 SHL SHR SWAP3 DUP4 SWAP2 DUP8 PUSH2 0x2D5D JUMP JUMPDEST SWAP1 PUSH2 0x20BF JUMP JUMPDEST DUP6 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST SSTORE CODESIZE DUP1 DUP1 PUSH2 0x2EB5 JUMP JUMPDEST PUSH2 0x2F1D PUSH2 0x2DFD JUMP JUMPDEST PUSH2 0x2EAD JUMP JUMPDEST PUSH2 0x2F2A PUSH2 0x2DFD JUMP JUMPDEST PUSH2 0x2EA0 JUMP JUMPDEST POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 DUP4 ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2F6D JUMPI POP POP POP PUSH2 0xBDA SWAP3 POP SUB DUP4 PUSH2 0x699 JUMP JUMPDEST DUP6 SLOAD DUP5 MSTORE PUSH1 0x1 SWAP6 DUP7 ADD SWAP6 DUP9 SWAP6 POP SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP2 ADD SWAP1 PUSH2 0x2F57 JUMP JUMPDEST PUSH2 0x53C SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH2 0x2D83 JUMP JUMPDEST ISZERO PUSH2 0x2FA1 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x444F4E45204D494E54494E47 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x2FDC JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xA PUSH1 0x24 DUP3 ADD MSTORE PUSH10 0x9C9EA8408A9C9EAA8E9 PUSH1 0xB3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x37 MUL SWAP2 PUSH1 0x37 DUP4 DIV SUB PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP1 PUSH2 0x3EA SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E23 JUMPI JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH1 0x23 ADD SWAP1 DUP2 PUSH1 0x23 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST PUSH1 0xB4 ADD SWAP1 DUP2 PUSH1 0xB4 GT PUSH2 0x2E23 JUMPI JUMP JUMPDEST SWAP3 SWAP2 PUSH1 0x68 SWAP5 SWAP2 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0x60 SHL SUB NOT DUP1 SWAP3 PUSH1 0x60 SHL AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 SHL AND PUSH1 0x54 DUP3 ADD MSTORE ADD SWAP1 JUMP JUMPDEST PUSH2 0x30B3 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST DUP3 PUSH2 0x20E6 JUMP JUMPDEST PUSH1 0xC PUSH6 0x79656C6C6F77 PUSH1 0xD0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x30D1 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xC PUSH6 0x707572706C65 PUSH1 0xD0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x30EF PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x6 PUSH3 0x1C9959 PUSH1 0xEA SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x310A PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x8 PUSH4 0x626C7565 PUSH1 0xE0 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3126 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0xA PUSH5 0x33B932B2B7 PUSH1 0xD9 SHL ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x3143 PUSH2 0x30AD DUP3 SLOAD PUSH2 0xAEF JUMP JUMPDEST PUSH1 0x12 PUSH9 0x1B1D5ADCDBDB985D5D PUSH1 0xBA SHL ADD SWAP1 SSTORE JUMP JUMPDEST ISZERO PUSH2 0x315E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x18DBDD5B19081B9BDD081CD95B99 PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x0 NOT DUP2 EQ PUSH2 0x31A4 JUMPI ADD SWAP1 JUMP JUMPDEST PUSH2 0x31AC PUSH2 0x2DFD JUMP JUMPDEST ADD SWAP1 JUMP JUMPDEST SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP1 ISZERO PUSH2 0x2563 JUMPI PUSH2 0x31CD DUP6 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x325D JUMPI PUSH2 0x31DA DUP6 PUSH2 0x2703 JUMP JUMPDEST PUSH2 0x325D JUMPI DUP5 PUSH2 0xBDA SWAP5 SWAP6 PUSH2 0x3258 SWAP3 PUSH2 0x31FB PUSH2 0x31F6 PUSH1 0x2 SLOAD PUSH2 0x3194 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMP JUMPDEST PUSH2 0x3208 DUP3 PUSH2 0x24B5 DUP8 PUSH2 0x222F JUMP JUMPDEST POP PUSH2 0x3221 DUP6 PUSH2 0x24D3 DUP5 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x36BA DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x40 MLOAD DUP1 PUSH2 0x3241 DUP11 CALLER DUP4 PUSH2 0x2720 JUMP JUMPDEST SUB SWAP1 LOG4 PUSH2 0x13F8 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP3 DUP6 CALLER PUSH1 0x20 DUP7 ADD PUSH2 0x2773 JUMP JUMPDEST PUSH2 0x2BBE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x34C7B511 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x327D JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x1314D40E0E88139BDD08185D5D1A1BDC9A5E9959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP1 DUP2 PUSH1 0x20 SWAP2 SUB SLT PUSH2 0x398 JUMPI MLOAD PUSH2 0x53C DUP2 PUSH2 0xE96 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL DUP1 DUP3 MSTORE PUSH4 0x3A271FFF PUSH1 0xE0 SHL PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 PUSH1 0x20 SWAP2 DUP3 DUP2 PUSH1 0x24 DUP2 DUP8 GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x3389 JUMPI JUMPDEST POP PUSH2 0x3318 JUMPI POP POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x3324 JUMPI POP POP POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH4 0x1AED5A85 PUSH1 0xE2 SHL PUSH1 0x4 DUP3 ADD MSTORE SWAP2 DUP2 SWAP1 DUP4 SWAP1 PUSH1 0x24 SWAP1 DUP3 SWAP1 GAS STATICCALL SWAP2 DUP3 SWAP2 PUSH1 0x0 SWAP4 PUSH2 0x335A JUMPI JUMPDEST POP POP PUSH2 0x53C JUMPI POP PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x337A SWAP3 SWAP4 POP DUP1 RETURNDATASIZE LT PUSH2 0x3382 JUMPI JUMPDEST PUSH2 0x3372 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x32B9 JUMP JUMPDEST SWAP1 CODESIZE DUP1 PUSH2 0x334E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x3368 JUMP JUMPDEST PUSH2 0x33A1 SWAP2 SWAP3 POP DUP5 RETURNDATASIZE DUP7 GT PUSH2 0x3382 JUMPI PUSH2 0x3372 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST SWAP1 CODESIZE PUSH2 0x330A JUMP JUMPDEST PUSH2 0x33E5 PUSH2 0x1E95 PUSH1 0x40 MLOAD PUSH10 0x6773C5A04A6D4300884B PUSH1 0xB1 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x2A DUP3 ADD MSTORE PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x2C DUP3 ADD MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x1E90 DUP2 PUSH2 0x63B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x14 DUP2 EQ ISZERO SWAP1 DUP2 PUSH2 0x3414 JUMPI JUMPDEST POP PUSH2 0x1F21 JUMPI PUSH2 0x3401 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x60 SHR SWAP1 DUP2 ISZERO PUSH2 0x2DE1 JUMPI PUSH2 0x53C SWAP2 PUSH2 0x2D2B JUMP JUMPDEST SWAP1 POP ISZERO ISZERO CODESIZE PUSH2 0x33F3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH1 0x40 DUP2 DUP5 SUB SLT PUSH2 0x398 JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP4 SWAP1 DUP5 DUP2 GT PUSH2 0x398 JUMPI DUP2 PUSH2 0x344A SWAP2 DUP5 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP4 PUSH1 0x20 DUP4 ADD MLOAD SWAP1 DUP2 GT PUSH2 0x398 JUMPI PUSH2 0x53C SWAP3 ADD PUSH2 0x2A04 JUMP JUMPDEST SWAP3 SWAP5 SWAP2 PUSH2 0x3481 SWAP1 PUSH2 0x53C SWAP8 SWAP6 SWAP3 DUP6 MSTORE PUSH1 0xC0 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0xC0 DUP6 ADD SWAP1 PUSH2 0x506 JUMP JUMPDEST SWAP5 PUSH3 0xFFFFFF PUSH1 0xE8 SHL AND PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 DUP2 DUP5 SUB SWAP2 ADD MSTORE PUSH2 0x506 JUMP JUMPDEST PUSH1 0x48 PUSH2 0xBDA SWAP2 SWAP4 SWAP3 SWAP4 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP2 PUSH6 0x379ABE35001 PUSH1 0xC5 SHL PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x28 DUP4 ADD MSTORE PUSH2 0x34DC DUP2 MLOAD DUP1 SWAP3 PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x4E3 JUMP JUMPDEST DUP2 ADD SUB PUSH1 0x28 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x699 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x363A DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 SUB PUSH2 0x35C5 JUMPI POP DUP1 PUSH1 0x0 PUSH2 0x351A PUSH2 0x3515 PUSH2 0x53C SWAP5 PUSH2 0x3DD JUMP JUMPDEST PUSH2 0xBBF JUMP JUMPDEST SWAP2 PUSH2 0x352E PUSH2 0x3527 DUP3 PUSH2 0x39D JUMP JUMPDEST SLOAD PUSH1 0xE8 SHL SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x3538 DUP2 PUSH2 0x3AD JUMP JUMPDEST SLOAD SWAP4 PUSH2 0x3543 DUP3 PUSH2 0x3BD JUMP JUMPDEST SLOAD SWAP2 PUSH2 0x3581 PUSH2 0x3554 PUSH2 0x3515 DUP4 PUSH2 0x3CD JUMP JUMPDEST PUSH1 0x6 SLOAD SWAP1 SWAP4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP5 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP8 DUP9 SWAP7 DUP8 SWAP7 PUSH4 0xAD27274B PUSH1 0xE0 SHL DUP9 MSTORE PUSH1 0x4 DUP9 ADD PUSH2 0x3461 JUMP JUMPDEST SUB SWAP2 GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x35B8 JUMPI JUMPDEST PUSH1 0x0 SWAP1 DUP2 SWAP3 PUSH2 0x35A3 JUMPI POP PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x34A6 JUMP JUMPDEST SWAP1 PUSH2 0x1868 SWAP3 POP RETURNDATASIZE DUP1 SWAP2 DUP4 RETURNDATACOPY PUSH2 0x1860 DUP2 DUP4 PUSH2 0x699 JUMP JUMPDEST PUSH2 0x35C0 PUSH2 0x2AA2 JUMP JUMPDEST PUSH2 0x358D JUMP JUMPDEST PUSH2 0x53C SWAP2 SWAP1 PUSH2 0x35D3 SWAP2 PUSH2 0x28B6 JUMP JUMPDEST PUSH1 0x20 DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x59D PUSH2 0x53C PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH2 0xB29 JUMP INVALID 0xA6 0xE4 0x25 0x1F DUP6 0x5F PUSH22 0x545FE414F120DB91C76B88DEF14D120969E5BB2D3F0 0x5D 0xEB 0xBB 0xDE 0xBA 0x1E 0x29 0x2F DUP12 0xA8 DUP3 CODESIZE 0xE1 EXP 0xB3 0xC7 0xF8 DUP12 0xD4 0xBE 0x4F 0xAC JUMP 0xCA 0xD5 NOT 0x4B PUSH15 0xCCEAF653468AF19AFB95CACC9F9585 DUP15 0xC4 0x4A 0xA8 0xC3 0xB6 DUP6 MLOAD LT MUL 0xE3 EXP 0xE5 DIFFICULTY ISZERO DUP3 EXTCODEHASH BLOCKHASH PUSH2 0x28B8 JUMPDEST 0x23 DUP15 DUP12 0xE0 SMOD SWAP13 MSTORE8 AND MSIZE EQ SGT DIFFICULTY 0xCD 0x1F 0xD0 LOG4 CALLCODE DUP5 NOT 0x49 PUSH32 0x9722A3DAAFE3B4186F6B6457E02F0A68AB07768E01943A599E73362A0E17A63A PUSH19 0xE94DD2E384D2C1D4DB932756C78CD419D6136F SWAP16 SHR SHR PUSH11 0xEC1D3FAE098CFFAF8BC863 EQ 0xA8 CALLCODE PUSH9 0x5E32FE574E3CB333C8 SGT 0xA7 TIMESTAMP PUSH11 0x7A11E2B190CAD52C441194 0x21 MSIZE 0x4B SELFBALANCE 0xF6 RETURN 0x2A 0xCE PUSH14 0x8C7207B2BFECE574603820D07BC9 0xB9 0x1F 0x2A SWAP4 0x2B 0xAA 0xDF CHAINID 0x28 0xAA 0xBC 0xB8 0xAF 0xBA 0x49 PUSH24 0x6529C14A6104B2A2646970667358221220FACCA20EB8E2EF SWAP11 AND 0xA8 0x24 SWAP9 MSTORE8 0xDD 0x25 SWAP15 DUP2 0xBE 0xBA 0xC CHAINID BYTE 0x5E LOG4 0xDD LT 0xA5 PUSH25 0xC3BA1A2C64736F6C6343000811003300000000000000000000 ",
          "sourceMap": "12886:9952:32:-:0;;;;;;;;;-1:-1:-1;12886:9952:32;;;;-1:-1:-1;12886:9952:32;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;19672:14;12886:9952;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;18306:1;12886:9952;;;;;;:::o;:::-;;;18369:10;12886:9952;;;;;;:::o;:::-;;;18469:11;12886:9952;;;;;;:::o;:::-;;;18965:10;12886:9952;;;;;;:::o;:::-;;;19053:11;12886:9952;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;13194:46;12886:9952;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;;;;;;12886:9952:32;;;;;;;;;;-1:-1:-1;;;20633:32:32;;;:109;;;;;;12886:9952;-1:-1:-1;;12886:9952:32;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;20633:109;10393:84:18;;;;20633:109:32;10393:164:18;;;;;20633:109:32;;;;;;;10393:164:18;10493:64;;;;:::i;:::-;10393:164;;;:84;12886:9952:32;;-1:-1:-1;;;;1132:44:10;;;:96;;;;10393:84:18;;;;;;1132:96:10;-1:-1:-1;;;7097:35:0;;;-1:-1:-1;7097:87:0;;;;1132:96:10;;;;;7097:87:0;-1:-1:-1;;;937:40:23;;-1:-1:-1;7097:87:0;;;12886:9952:32;;;;;;;;-1:-1:-1;;12886:9952:32;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;12886:9952:32;;;;:::o;:::-;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;;;;;;;12886:9952:32;;4920:6:0;12886:9952:32;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;13011:45;12886:9952;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;12409:36:18;12886:9952:32;;;;12409:36:18;:::i;12886:9952:32:-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;15833:9;12886:9952;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;:::o;:::-;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19351:21;19382:91;19351:21;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;19404:10;19390:24;;:58;;;;12886:9952;19382:91;;:::i;:::-;-1:-1:-1;12886:9952:32;;;;;19483:11;12886:9952;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;915:66:12;;;;;;;;;;;12886:9952:32;915:66:12;;;12886:9952:32;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;915:66:12;;;;12886:9952:32;915:66:12;;12886:9952:32;915:66:12;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;19390:58;19418:30;;;;:::i;:::-;19390:58;;;12886:9952;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;12711:34:18;12707:104;;12834:28;12886:9952:32;;12834:28:18;:::i;:::-;12878:9;-1:-1:-1;12878:9:18;12886:9952:32;;12889:19:18;;;;;12961:11;12942:44;12961:11;12886:9952:32;12961:11:18;;;:::i;:::-;12886:9952:32;12974:11:18;;;;:::i;:::-;12886:9952:32;12942:44:18;;:::i;:::-;12926:60;;;;:::i;:::-;;;;;;:::i;:::-;;12886:9952:32;12878:9:18;;12889:19;12886:9952:32;;;;12889:19:18;12886:9952:32;;:::i;12707:104:18:-;12886:9952:32;;-1:-1:-1;;;12768:32:18;;12886:9952:32;;12768:32:18;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;13098:39;12886:9952;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;18159:37:18;12886:9952:32;;:::i;:::-;;;18159:37:18;;:::i;:::-;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;-1:-1:-1;12886:9952:32;;;;-1:-1:-1;12886:9952:32;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;13452:45;12886:9952;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;:::i;:::-;17794:14;;;12886:9952;17794:14;:::i;:::-;;12886:9952;;17794:14;19124:28;17794:14;12886:9952;17873:25;:32;:25;;12886:9952;;17873:14;12886:9952;;;;;;;17873:25;12886:9952;;-1:-1:-1;;12886:9952:32;17807:1;12886:9952;;;;17873:32;18693:1;18036:16;:12;:16;:::i;:::-;18026:27;12886:9952;;17967:151;;;12886:9952;17967:151;;18099:4;;;17967:151;;;;:::i;:::-;;12886:9952;;17967:151;;;;;;:::i;:::-;12886:9952;17944:184;;18201:158;-1:-1:-1;18237:20:32;;;12886:9952;;-1:-1:-1;;;;;;12886:9952:32;17807:1;18281:20;;;12886:9952;;-1:-1:-1;;;12886:9952:32;;18349:1;18331:20;;;12886:9952;;-1:-1:-1;;;12886:9952:32;18230:129;18201:14;;;:::i;:::-;12886:9952;;;;;;;;;;;;18201:158;18403:56;18409:49;18410:41;18429:20;12886:9952;18429:20;18410:41;:::i;:::-;12886:9952;;;;;18409:49;18403:56;:::i;:::-;18369:19;;;:::i;:::-;12886:9952;18504:87;18511:79;18512:71;18520:23;:19;;;:::i;:::-;12886:9952;;;;;18520:23;18561:20;12886:9952;18561:20;18512:71;;:::i;18511:79::-;18504:87;:::i;:::-;18469:20;;;:::i;:::-;12886:9952;18675:20;;12886:9952;18715:14;;;18731:19;12886:9952;18731:19;;;:::i;:::-;12886:9952;:::i;:::-;;19053:20;;;:::i;:::-;12886:9952;:::i;:::-;;;;:::i;:::-;19124:28;;:::i;:::-;12886:9952;;;;;;;;;;;;;18711:284;17807:1;18779:14;;17807:1;;18795:19;12886:9952;18795:19;;;:::i;:::-;12886:9952;:::i;:::-;18711:284;;18775:220;18349:1;18842:14;;18349:1;;18858:19;12886:9952;18858:19;;;:::i;:::-;12886:9952;:::i;18838:157::-;12886:9952;18904:14;18447:1;;12886:9952;18920:19;;;:::i;:::-;12886:9952;:::i;18900:95::-;12886:9952;18965:19;;;:::i;:::-;12886:9952;:::i;:::-;;;;;;;;;;;;;;;;22471:16:18;;;:::i;:::-;22470:17;22466:86;;-1:-1:-1;12886:9952:32;18436:10:18;12886:9952:32;;;;-1:-1:-1;12886:9952:32;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;22466:86:18;12886:9952:32;;;;22510:31:18;;;;;;12886:9952:32;22510:31:18;;12886:9952:32;22510:31:18;12886:9952:32;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;:::i;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;13143:45;12886:9952;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;13602:42;12886:9952;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;12886:9952:32;;:::i;:::-;;-1:-1:-1;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;1063:62:19;;:::i;:::-;12886:9952:32;;-1:-1:-1;;;;;;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;-1:-1:-1;;;;;;;;;;;12886:9952:32;;2566:40:19;12886:9952:32;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;13726:4;12886:9952;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;12886:9952:32;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;:::i;:::-;1063:62:19;;:::i;:::-;3212:9:0;3208:55;;3291:9;12886:9952:32;;;3291:9:0;:::i;3208:55::-;12886:9952:32;;-1:-1:-1;;;3235:28:0;;12886:9952:32;;3235:28:0;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;:::i;:::-;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;:::i;:::-;15841:21:18;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;;15891:10:18;15877:24;;15873:112;;12886:9952:32;;;15999:22:18;;15995:96;;16105:22;;;16101:92;;16265:8;16218:33;:19;;;12886:9952:32;;16218:10:18;12886:9952:32;;;;;;;16218:19:18;:33;:::i;:::-;16265:8;;12886:9952:32;16265:8:18;16261:69;;12886:9952:32;;16524:135:18;12886:9952:32;33400:8:18;12886:9952:32;16346:143:18;12886:9952:32;;16346:143:18;;;;;:::i;:::-;;;;16524:135;12886:9952:32;;15891:10:18;;;;12886:9952:32;16524:135:18;;;:::i;:::-;;12886:9952:32;;16524:135:18;;;;;;:::i;:::-;33400:8;:::i;16261:69::-;12886:9952:32;;-1:-1:-1;;;16282:48:18;;12886:9952:32;16282:48:18;12886:9952:32;;;16282:48:18;;;:::i;:::-;;;;16101:92;12886:9952:32;;-1:-1:-1;;;16150:32:18;;12886:9952:32;;16150:32:18;15995:96;12886:9952:32;;-1:-1:-1;;;16044:36:18;;12886:9952:32;;16044:36:18;15873:112;12886:9952:32;15924:50:18;12886:9952:32;;15924:50:18;;;;;;;;15891:10;15924:50;12886:9952:32;15924:50:18;;;:::i;12886:9952:32:-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;-1:-1:-1;;;;;;;;;;;12886:9952:32;;4920:6:0;12886:9952:32;;;;;;;;;;;;:::i;:::-;-1:-1:-1;12886:9952:32;;-1:-1:-1;;12886:9952:32;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;1063:62:19;;;:::i;:::-;4201:9:0;4197:55;;12886:9952:32;;;;6456:36:0;6452:112;;12886:9952:32;;6578:20:0;6574:92;;6681:13;-1:-1:-1;6681:13:0;12886:9952:32;;6696:19:0;;;;;6742:11;6755:13;6742:11;12886:9952:32;6742:11:0;;;:::i;:::-;12886:9952:32;6755:13:0;;;;:::i;:::-;;;;:::i;:::-;12886:9952:32;6681:13:0;;6574:92;12886:9952:32;;-1:-1:-1;;;6621:34:0;;;6452:112;12886:9952:32;;-1:-1:-1;;;6515:38:0;;;4197:55;12886:9952:32;;-1:-1:-1;;;4224:28:0;;;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;;;13778:32;12886:9952;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;:::i;:::-;;-1:-1:-1;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;13684:4;12886:9952;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;1063:62:19;;;:::i;:::-;12886:9952:32;;;;13720:34:18;;;;;;:86;;;12886:9952:32;13703:178:18;;;12886:9952:32;;13895:20:18;13891:86;;13992:9;-1:-1:-1;13992:9:18;12886:9952:32;;14003:19:18;;;;;14059:11;14085:13;14059:11;12886:9952:32;14059:11:18;;;:::i;:::-;12886:9952:32;14072:11:18;;;;:::i;:::-;12886:9952:32;14085:13:18;;;;:::i;:::-;;;;:::i;:::-;12886:9952:32;13992:9:18;;13891:86;12886:9952:32;;-1:-1:-1;;;13938:28:18;;;13703:178;12886:9952:32;;-1:-1:-1;;;13838:32:18;;;13720:86;12886:9952:32;;;;13770:36:18;;13720:86;;;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;13427:9:18;12886:9952:32;;;;;;:::i;:::-;1063:62:19;;:::i;:::-;12886:9952:32;;;;13427:9:18;:::i;12886:9952:32:-;;;;;;;;;;;;;;22706:122;12886:9952;;;;;;;22194:54;12886:9952;;;;22202:10;:21;22194:54;:::i;:::-;22548:15;1310:66:31;12886:9952:32;;;;;;;;;;22548:39;;;;;;;;;12886:9952;22548:39;12886:9952;;22548:39;;;12886:9952;;;;;;;22767:22;22706:122;:::i;:::-;-1:-1:-1;;;;;;;;;;;12886:9952:32;-1:-1:-1;;;;;;;;;;;12886:9952:32;;;;;;;915:66:12;12886:9952:32;;;;915:66:12;:::i;12886:9952:32:-;2420:31:13;;;12886:9952:32;;22548:39;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;12886:9952;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;:::i;:::-;16992:21:18;;;:::i;:::-;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;;17028:10:18;:24;;;17024:264;;12886:9952:32;;;17302:22:18;;;17298:96;;17408:22;17404:92;;17622:24;;;;;;;:::i;:::-;17667:274;;12886:9952:32;17667:274:18;33400:8;12886:9952:32;17717:158:18;;12886:9952:32;;;17717:158:18;;;12886:9952:32;17717:158:18;;;:::i;17024:264::-;12886:9952:32;;;17028:10:18;17068:210;17024:264;17068:210;12886:9952:32;;-1:-1:-1;;;17121:142:18;;17028:10;12886:9952:32;17121:142:18;;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;16282:48:18;12886:9952:32;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;:::i;:::-;2167:28:0;12886:9952:32;;2167:28:0;:::i;:::-;2211:13;-1:-1:-1;2211:13:0;12886:9952:32;;2226:19:0;;;;;2288:11;2279:21;2288:11;12886:9952:32;2288:11:0;;;:::i;:::-;12886:9952:32;2279:21:0;:::i;:::-;2263:37;;;;:::i;:::-;;;;;;:::i;:::-;;12886:9952:32;2211:13:0;;2226:19;12886:9952:32;;;;2226:19:0;12886:9952:32;;:::i;:::-;;;;;;;;;;;;;15918:42;13684:4;15926:9;12886:9952;15926:17;15918:42;:::i;:::-;16022:30;16030:22;16031:13;15991:5;12886:9952;15970:41;15978:9;;:18;;15970:41;:::i;:::-;16031:13;:::i;:::-;16048:4;12886:9952;;;;16030:22;15991:5;12886:9952;;16022:30;16063:14;;15926:9;12886:9952;16063:14;:::i;:::-;17588:34;15926:9;12886:9952;16215:25;:32;:25;;12886:9952;;17873:14;12886:9952;;;;;;;16215:32;17043:1;16378:16;:12;:16;:::i;:::-;16368:27;12886:9952;;16309:159;;;;;;16449:4;;16413:10;;16309:159;;;;:::i;:::-;12886:9952;16286:192;;16551:158;16587:20;;;12886:9952;;-1:-1:-1;;;;;;12886:9952:32;16076:1;16631:20;;;12886:9952;;-1:-1:-1;;;12886:9952:32;;16699:1;16681:20;;;12886:9952;;-1:-1:-1;;;12886:9952:32;16580:129;16551:14;;;:::i;:158::-;16753:56;16759:49;16760:41;16779:20;12886:9952;16779:20;16760:41;:::i;16753:56::-;16719:19;;;:::i;:::-;12886:9952;16854:87;16861:79;16862:71;16870:23;:19;;;:::i;16854:87::-;16819:20;;;:::i;:::-;12886:9952;17025:20;;12886:9952;17065:14;;;17081:19;12886:9952;17081:19;;;:::i;12886:9952::-;;17403:20;;;:::i;12886:9952::-;17474:36;12886:9952;;:::i;:::-;16413:10;;17474:36;:::i;:::-;15978:9;;;;13602:42;17540:38;;;;:::i;:::-;;17588:34;:::i;17061:284::-;16076:1;17129:14;;16076:1;;17145:19;12886:9952;17145:19;;;:::i;12886:9952::-;17061:284;;17125:220;16699:1;17192:14;;16699:1;;17208:19;12886:9952;17208:19;;;:::i;17188:157::-;12886:9952;17254:14;16797:1;;12886:9952;17270:19;;;:::i;17250:95::-;12886:9952;17315:19;;;:::i;12886:9952::-;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;:::i;:::-;1063:62:19;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;2162:22:19;;12886:9952:32;;2518:6:19;12886:9952:32;;-1:-1:-1;;;;;;12886:9952:32;;;;;;2518:6:19;;12886:9952:32;-1:-1:-1;;;;;;;;;;;2518:6:19;;2566:40;12886:9952:32;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;-1:-1:-1;12886:9952:32;13246:44;12886:9952;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;:::i;1815:151:0:-;-1:-1:-1;12886:9952:32;4920:6:0;12886:9952:32;;;;;-1:-1:-1;12886:9952:32;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;12886:9952:32;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;6452:253:18;6580:1;6562:8;:19;6558:90;;6664:34;;;:::i;6558:90::-;12886:9952:32;;;6604:33:18;;;;;;;12886:9952:32;6580:1:18;6604:33;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;6604:33:18;;;;6924:240;;7020:9;:14;7016:90;;12886:9952:32;;-1:-1:-1;;;7123:34:18;;;;;7016:90;12886:9952:32;;;6604:33:18;;;7057:38;;12886:9952:32;7057:38:18;;;12886:9952:32;7057:38:18;12886:9952:32;;;;7033:1:18;12886:9952:32;;;;7057:38:18;12886:9952:32;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;;;;;;12886:9952:32;;;;;;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;-1:-1:-1;12886:9952:32;;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;-1:-1:-1;12886:9952:32;;;;:::o;:::-;;;:::o;8159:1031:18:-;12886:9952:32;;;;;;8387:7:18;;12886:9952:32;9940:32:18;5469:21:11;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5469:21:11;:::i;:::-;9940:32:18;:::i;:::-;12886:9952:32;;10013:2:18;9986:29;;;:61;;;;8159:1031;9982:127;;;10136:25;;;:::i;:::-;433:22:8;;8455:23:18;;;8451:92;;12886:9952:32;;;;;;;8638:49:18;;;12886:9952:32;8638:49:18;;8614:9;;8665:10;;8638:49;;;:::i;:::-;8592:105;8614:9;;8592:105;;;;;:::i;:::-;8708:476;;;;8735:13;:::o;8708:476::-;12886:9952:32;9040:134:18;;;;;8451:92;12886:9952:32;;-1:-1:-1;;;8499:44:18;;-1:-1:-1;;;;;;12886:9952:32;;;;8499:44:18;;;12886:9952:32;;;16282:48:18;9982:127;12886:9952:32;;-1:-1:-1;;;10068:41:18;;12886:9952:32;10068:41:18;;;12886:9952:32;;;;;;;;;;;:::i;9986:61:18:-;10019:28;;;;9986:61;;;433:22:8;12886:9952:32;;;;;;433:22:8;-1:-1:-1;;;;;;433:22:8;;;;;12886:9952:32;;433:22:8;;;;;;;;;:::o;:::-;;;;;;;;;;;-1:-1:-1;433:22:8:o;12886:9952:32:-;;;;;;;;;;;;;;;:::o;:::-;915:66:12;;12886:9952:32;;;;;433:22:8;12886:9952:32;;:::o;10779:289:18:-;;359:66:16;10900:35:18;;10896:103;;-1:-1:-1;;;;;;;;;;;2056:31:13;;633:66:12;;12886:9952:32;;-1:-1:-1;;;2110:26:13;;;;;2052:410;-1:-1:-1;;;;;;;;;;;2157:33:13;;776:66:12;;12886:9952:32;;-1:-1:-1;;;2213:28:13;;;;;2153:309;915:66:12;2262:31:13;;915:66:12;;12886:9952:32;;-1:-1:-1;;;2316:26:13;;;;;2258:204;2420:31;2373:15;915:66:12;-1:-1:-1;;;;;;;;;;;2373:15:13;;;12886:9952:32;;2373:6:13;12886:9952:32;;;;;;;2373:15:13;915:66:12;:::i;:::-;12886:9952:32;;2420:31:13;;;;;:::i;:::-;;;;10779:289:18:o;10896:103::-;12886:9952:32;;-1:-1:-1;;;10958:30:18;;;;;915:66:12;;;;;;433:22:8;;;;;;915:66:12;;;;;;:::o;:::-;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;-1:-1:-1;915:66:12;;;;;;;;;;;;;;;:::o;:::-;;12886:9952:32;-1:-1:-1;12886:9952:32;915:66:12;12886:9952:32;-1:-1:-1;12886:9952:32;915:66:12;;;;;;;;:::i;:::-;;;;;;;;;;;:::o;:::-;;12886:9952:32;-1:-1:-1;12886:9952:32;;-1:-1:-1;12886:9952:32;915:66:12;12886:9952:32;915:66:12;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;915:66:12;;;;;12886:9952:32;;915:66:12;;;-1:-1:-1;;;;;915:66:12;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12886:9952:32;915:66:12;;;;;:::o;:::-;;;;-1:-1:-1;915:66:12;;;;;12886:9952:32;;;915:66:12;;;;;12886:9952:32;;;;;;;915:66:12;;;;;;;;;;;;;12886:9952:32;915:66:12;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;12886:9952:32;915:66:12;;;;;;;;;;;12886:9952:32;915:66:12;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;;;29313:12:18;12886:9952:32;;;;;;:::o;11605:290:18:-;-1:-1:-1;12886:9952:32;;;11736:12:18;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;;11772:24:18;;11768:93;;11871:17;11605:290;:::o;12886:9952:32:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;:::o;:::-;;;:::i;:::-;;;14468:1081:18;;;14602:24;;;:::i;:::-;14641:9;-1:-1:-1;14641:9:18;;14652:15;;;;;;14468:1081;;;;:::o;14641:9::-;14767:7;;;;;;;:::i;:::-;12886:9952:32;;;;;;;;;;;:::i;:::-;14723:65:18;14731:4;;14723:65;;;;;:::i;:::-;14807:8;;14803:636;;15453:19;;12886:9952:32;15453:19:18;;;;;:::i;:::-;;;;;;:::i;:::-;;12886:9952:32;14641:9:18;;14803:636;12886:9952:32;;;;;14909:18:18;:13;;15160:158;;;;;;14905:520;12886:9952:32;-1:-1:-1;;;15371:35:18;;;;;12886:9952:32;;;;;;-1:-1:-1;16282:48:18;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;17322:1:18;12886:9952:32;;;;;;;;;;;;:::i;18629:229:18:-;-1:-1:-1;;;;;12886:9952:32;18777:21:18;;;:::i;:::-;12886:9952:32;;;18767:31:18;;;:83;;;;;18759:92;;18629:229;:::o;18767:83::-;8963:55:28;12886:9952:32;;-1:-1:-1;12886:9952:32;18814:10:18;12886:9952:32;;;-1:-1:-1;12886:9952:32;8963:55:28;:::i;18964:349:18:-;;;;;19141:39;19160:10;;19141:39;:::i;:::-;19140:40;19136:119;;28619:21;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;28654:18:18;;;28650:100;;12886:9952:32;;;28764:16:18;;;28760:83;;29039:21;;;:::i;:::-;12886:9952:32;;;29074:31:18;29070:192;;29294:7;;;29587:47;29294:7;;29721:8;29294:7;;;29587:47;29294:7;;;34240:8;29294:7;;;:::i;:::-;6306:26:28;29313:18:18;;;;:::i;:::-;6306:26:28;:::i;:::-;;6012:23;29357:16:18;;;;:::i;:::-;6012:23:28;:::i;:::-;;29396:26:18;:21;;;12886:9952:32;;29396:12:18;12886:9952:32;;;;;;;29396:21:18;12886:9952:32;;-1:-1:-1;;;;;;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;29396:26:18;12886:9952:32;;-1:-1:-1;;;;;;;;;;;29438:52:18;12886:9952:32;29438:52:18;12886:9952:32;;19160:10:18;12886:9952:32;29438:52:18;:::i;:::-;;;;12886:9952:32;;19160:10:18;;;;;;;;29587:47;;;;:::i;:::-;34240:8;:::i;:::-;29721;:::i;29070:192::-;12886:9952:32;;-1:-1:-1;;;29128:123:18;;;;;12886:9952:32;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;16282:48:18;28760:83;12886:9952:32;;-1:-1:-1;;;28803:29:18;;;;;28650:100;12886:9952:32;;-1:-1:-1;;;28695:44:18;;12886:9952:32;28695:44:18;12886:9952:32;;;28695:44:18;;;;:::i;19136:119::-;12886:9952:32;;;;19203:41:18;;;;;;;;;12886:9952:32;19160:10:18;12886:9952:32;;;;19203:41:18;19384:683;;;;;;12886:9952:32;;;;;19658:23:18;;;;:67;;;19384:683;19658:109;;;;19384:683;19658:150;;;;19384:683;19641:236;;-1:-1:-1;19903:14:18;;;;;;19384:683;;;;;;;;:::o;19892:9::-;19944:7;19982;19944;;12886:9952:32;19944:7:18;;;:::i;:::-;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;;;19944:7:18;19953:5;;;;;:::i;:::-;19960:10;;;;:::i;:::-;12886:9952:32;19972:8:18;;;;;:::i;:::-;12886:9952:32;;;;;19972:8:18;19982:7;;;;;:::i;:::-;;;;:::i;:::-;12886:9952:32;19892:9:18;;19641:236;12886:9952:32;;-1:-1:-1;;;19840:26:18;;;;;19658:150;12886:9952:32;;;19783:25:18;;;19658:150;;:109;12886:9952:32;;;19741:26:18;;;19658:109;;:67;12886:9952:32;;;19697:28:18;;;19658:67;;20165:510;;;;12886:9952:32;-1:-1:-1;12886:9952:32;20389:10:18;12886:9952:32;;;-1:-1:-1;12886:9952:32;;;;;;;;8719:53:28;12886:9952:32;;;8719:53:28;;;:::i;:::-;20439:10:18;20435:65;;12886:9952:32;;;-1:-1:-1;;;;;;;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20516:152:18;;;20165:510::o;20435:65::-;12886:9952:32;;-1:-1:-1;;;20458:42:18;;12886:9952:32;;;20458:42:18;;12886:9952:32;;20458:42:18;;;;:::i;22172:130::-;-1:-1:-1;12886:9952:32;;;22260:12:18;12886:9952:32;;;;;;-1:-1:-1;;;;;12886:9952:32;22260:35:18;;;22172:130::o;12886:9952:32:-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;20956:1030:18:-;;-1:-1:-1;12886:9952:32;;;;21533:10:18;12886:9952:32;;;;;;;;;;;;;;21683:9:18;;21694:22;;;;;;20956:1030;;;;;;;;;:::o;21683:9::-;12886:9952:32;;;;;21683:9:18;12886:9952:32;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;:::i;:::-;;;;;;;;;;8719:53:28;12886:9952:32;;;;8719:53:28;:::i;:::-;20439:10:18;20435:65;;12886:9952:32;;;-1:-1:-1;;;;;;;;;;;12886:9952:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;20516:152:18;;;12886:9952:32;21683:9:18;;20435:65;12886:9952:32;;-1:-1:-1;;;20458:42:18;;12886:9952:32;20458:42:18;12886:9952:32;;20458:42:18;;;;:::i;12886:9952:32:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;30150:273:18:-;;;30310:30;;;;:::i;:::-;12886:9952:32;;;;;;30300:41:18;-1:-1:-1;12886:9952:32;30293:6:18;12886:9952:32;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;915:66:12;;;;30150:273:18;915:66:12;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;30369:47:18;915:66:12;;-1:-1:-1;;;;;;;;;;;915:66:12;;-1:-1:-1;915:66:12;;;;;;;;;;;;12886:9952:32;915:66:12;;;;;12886:9952:32;;30369:47:18;;;;;:::i;:::-;;;;30150:273::o;915:66:12:-;;;;;-1:-1:-1;915:66:12;;;;12886:9952:32;;;;;;915:66:12;;;;12886:9952:32;;;;;;;915:66:12;;-1:-1:-1;915:66:12;;;;;;;;;;;;30369:47:18;915:66:12;;-1:-1:-1;;;;;;;;;;;915:66:12;;;;;;;;;;;;;;;;;;;;;;;;;;;12886:9952:32;915:66:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;128:10:6;;;;;;;;;;;;;;:::i;:::-;12886:9952:32;;;;;;;:::i;:::-;128:10:6;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;128:10:6;;;;;;;;:::i;:::-;;;;;1015:66:16;12886:9952:32;;128:10:6;;;;;;;;:::i;:::-;;12886:9952:32;;128:10:6;;;;;;;1351:361:7;1513:100;;;:::i;:::-;1496:210;;1351:361;;:::o;1496:210::-;128:10:6;1638:57:7;12886:9952:32;;;;;;;;;;;;;;;1638:57:7;;1178:66:16;1638:57:7;;;12886:9952:32;;128:10:6;;;;;;;;;:::i;:::-;1638:57:7;;-1:-1:-1;;;;;12886:9952:32;1638:57:7;;;;;;1496:210;1638:57;;1351:361;:::o;1638:57::-;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;1351:361::o;1638:57::-;;;:::i;:::-;;;1351:361;1513:100;;;:::i;:::-;1496:210;;1351:361;;:::o;1496:210::-;128:10:6;1638:57:7;12886:9952:32;;;;;;;;;;;;;;;1638:57:7;;849:66:16;1638:57:7;;;12886:9952:32;;128:10:6;;;;;;;;;:::i;35155:615:18:-;35306:115;;;:::i;:::-;;;;12886:9952:32;;-1:-1:-1;;;35446:67:18;;12886:9952:32;35446:67:18;;12886:9952:32;;;;35446:67:18;;12886:9952:32;;35446:67:18;;;;;;:::i;35289:475::-;;;35155:615::o;:::-;;;35306:115;;;:::i;:::-;;;;12886:9952:32;35446:67:18;;12886:9952:32;;;;;;;;;;;;;;35446:67:18;;;;;;:::i;35289:475::-;35534:6;;;35530:234;;35289:475;35155:615::o;35530:234::-;35560:14;;:19;:14;;12886:9952:32;;-1:-1:-1;;;35606:55:18;;12886:9952:32;;;35606:55:18;;;;;;:::i;35556:198::-;12886:9952:32;;-1:-1:-1;;;35707:32:18;;12886:9952:32;;;35707:32:18;;;;;;:::i;1359:130:19:-;1273:6;12886:9952:32;-1:-1:-1;;;;;12886:9952:32;734:10:21;1422:23:19;12886:9952:32;;1359:130:19:o;12886:9952:32:-;;;;;;;;;;;;;;;;;;;;;;;;;4421:647:24;-1:-1:-1;4592:71:24;4421:647;12886:9952:32;;4592:71:24;;;952:25:23;;;;4592:71:24;;12886:9952:32;;;4592:71:24;;;12886:9952:32;4592:71:24;;;;;;:::i;:::-;4784:212;;;;-1:-1:-1;4784:212:24;;5013:29;;;4421:647;5013:48;;;;5006:55;4421:647;:::o;5013:48::-;5046:15;;;;4421:647;:::o;5013:29::-;4592:71;-1:-1:-1;5024:18:24;;-1:-1:-1;5013:29:24;;;4421:647;-1:-1:-1;4421:647:24;4592:71;4421:647;12886:9952:32;;4592:71:24;;;952:25:23;;;;4592:71:24;;12886:9952:32;;;;4592:71:24;;;12886:9952:32;4592:71:24;;;;;;:::i;12886:9952:32:-;;;;;;;;;-1:-1:-1;12886:9952:32;;-1:-1:-1;12886:9952:32;;;-1:-1:-1;12886:9952:32;:::o;:::-;;;:::i;:::-;;;2214:404:28;2298:21;;;;:::i;:::-;;;12886:9952:32;;915:66:12;12886:9952:32;;;;;;;;;;;;2293:319:28;12886:9952:32;;;;;;;:::i;:::-;915:66:12;;;;;:::i;:::-;;;12886:9952:32;;;-1:-1:-1;12886:9952:32;2493:12:28;12886:9952:32;;;-1:-1:-1;12886:9952:32;;;2547:11:28;:::o;12886:9952:32:-;;;:::i;:::-;;;2293:319:28;2589:12;;-1:-1:-1;2589:12:28;:::o;4255:127::-;4351:12;4255:127;-1:-1:-1;12886:9952:32;4351:12:28;12886:9952:32;;;-1:-1:-1;12886:9952:32;;4351:24:28;;4255:127;:::o;12886:9952:32:-;;;;;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;;;:::i;:::-;915:66:12;;;;;;;433:22:8;915:66:12;;;;12886:9952:32;:::o;:::-;;;;;;;;;;;;2786:1388:28;2989:12;;;12886:9952:32;;-1:-1:-1;12886:9952:32;;;;;-1:-1:-1;12886:9952:32;;3023:15:28;;;;3019:1149;3023:15;;;3977;4069:19;915:66:12;-1:-1:-1;915:66:12;;;12886:9952:32;;;;;;;;3019:1149:28;12886:9952:32;;;;;;;;;;3019:1149:28;3505:26;;;3501:398;;3019:1149;3977:15;;;;:::i;:::-;12886:9952:32;;;;;;;;;;4069:19:28;915:66:12;2989:12:28;4103:11;:::o;3501:398::-;3693:38;:26;3571:22;;3805:23;3571:22;;;:::i;:::-;12886:9952:32;;;;;;3693:26:28;;;;;:::i;:::-;:38;;:::i;:::-;3805:23;12886:9952:32;;;;;;;;;;3805:23:28;12886:9952:32;3501:398:28;;;;;12886:9952:32;;;:::i;:::-;;;;;;:::i;:::-;;;3019:1149:28;4145:12;;;;-1:-1:-1;4145:12:28;:::o;12886:9952:32:-;;;;;;;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;-1:-1:-1;12886:9952:32;;-1:-1:-1;12886:9952:32;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;-1:-1:-1;12886:9952:32;;;;;;;;;;8305:150:28;8398:50;;-1:-1:-1;;;;;12886:9952:32;;8398:50:28;:::i;12886:9952:32:-;;;;:::o;:::-;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;18410:2;12886:9952;;18410:2;12886:9952;;;;;:::o;:::-;;13726:4;12886:9952;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;:::-;;17807:1;12886:9952;;;;;;;:::o;:::-;18403:2;12886:9952;;;18403:2;12886:9952;;;:::o;:::-;18504:3;12886:9952;;;18504:3;12886:9952;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;;;:::i;:::-;-1:-1:-1;;;;;12886:9952:32;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;-1:-1:-1;;12886:9952:32;;;;;;:::o;:::-;;;:::i;:::-;;;:::o;23582:1117:18:-;;;;;-1:-1:-1;;;;;12886:9952:32;;23726:16:18;;23722:83;;23873:16;;;:::i;:::-;23869:87;;24125:16;;;:::i;:::-;24121:87;;12886:9952:32;24683:8:18;12886:9952:32;;24518:123:18;12886:9952:32;24248:17:18;;;12886:9952:32;24248:17:18;:::i;:::-;;12886:9952:32;;24248:17:18;6012:23:28;24276:16:18;;;;:::i;6012:23:28:-;;24315:26:18;:21;;;12886:9952:32;;29396:12:18;12886:9952:32;;;;;;;24315:26:18;23740:1;-1:-1:-1;;;;;;;;;;;12886:9952:32;;24366:10:18;24357:58;24366:10;;24357:58;;:::i;:::-;;;;24518:123;12886:9952:32;;24366:10:18;;;;;24518:123;;;;:::i;:::-;24683:8;:::i;24121:87::-;12886:9952:32;;-1:-1:-1;;;24164:33:18;;;;;12886:9952:32;;;;;16282:48:18;12886:9952:32;;;;:::o;:::-;;;-1:-1:-1;;;12886:9952:32;;;;;;;;;;;;-1:-1:-1;;;12886:9952:32;;;;;;;13942:10;;;;;;;;;;;;;:::i;19764:664::-;12886:9952;;-1:-1:-1;;;19935:53:32;;;-1:-1:-1;;;19935:53:32;;;12886:9952;-1:-1:-1;;;;;12886:9952:32;;;;;19935:53;;;12886:9952;;;;19935:53;;-1:-1:-1;;19935:53:32;;;19764:664;-1:-1:-1;19931:491:32;;20399:12;;;;-1:-1:-1;20399:12:32;:::o;19931:491::-;20031:311;;20355:12;;;-1:-1:-1;20355:12:32;:::o;20031:311::-;12886:9952;;20071:53;;;-1:-1:-1;;;19935:53:32;20071;;12886:9952;;;;;;;;;;20071:53;;;;;-1:-1:-1;20071:53:32;;;20031:311;-1:-1:-1;;20067:261:32;;20297:12;-1:-1:-1;20297:12:32;:::o;20071:53::-;;;;;;;-1:-1:-1;20071:53:32;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;19935;;;;;;;;;;;;;;;:::i;:::-;;;;;1658:457:10;9940:32:18;5469:21:11;12886:9952:32;;;;;;;;;-1:-1:-1;12886:9952:32;;;;952:25:23;;;12886:9952:32;;;;;;;;;;:::i;9940:32:18:-;12886:9952:32;;10013:2:18;9986:29;;;:61;;;;1658:457:10;9982:127:18;;;10136:25;;;:::i;:::-;433:22:8;;1913:29:10;;;1909:47;;1986:122;;;:::i;9986:61:18:-;10019:28;;;;9986:61;;;1310:66:31;;;;;;;;;;;;;-1:-1:-1;;;;;12886:9952:32;;1310:66:31;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;12886:9952:32;;1310:66:31;;;;;;;;;;:::i;:::-;12886:9952:32;;;;;1310:66:31;;;12886:9952:32;1310:66:31;;;12886:9952:32;1310:66:31;;;12886:9952:32;1310:66:31;;;;;;;;:::i;:::-;;;;;;;12886:9952:32;;1310:66:31;;;;;;;;;;;;;12886:9952:32;1310:66:31;12886:9952:32;;1310:66:31;;;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;20839:1234:32:-;;-1:-1:-1;;;;;;;;;;;21049:29:32;;21045:109;;21229:20;;-1:-1:-1;1310:66:31;21229:20:32;21905:122;21229:20;;:::i;:::-;1310:66:31;:::i;:::-;21279:14:32;;;;;:::i;:::-;1310:66:31;12886:9952:32;;1310:66:31;;21279:14:32;21329:19;;;;:::i;:::-;12886:9952;21385:20;;;;:::i;:::-;12886:9952;21447:19;21609:198;1310:66:31;21447:19:32;;;:::i;1310:66:31:-;21609:15:32;1310:66:31;;;;-1:-1:-1;;;;;12886:9952:32;;;;;;;;;;;;;;21609:198;;;;;;:::i;:::-;;;;;;;;;;20839:1234;-1:-1:-1;;;21609:198:32;;;12886:9952;;;;;;21966:22;21905:122;:::i;21609:198::-;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;21045:109;21101:42;;30825:213:18;30999:30;30825:213;30999:30;:::i;:::-;12886:9952:32;;;;;30989:41:18;-1:-1:-1;12886:9952:32;30982:6:18;12886:9952:32;;;;;-1:-1:-1;12886:9952:32;;;;;;;;:::i"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2825400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "": "infinite",
            "authorizeOperator(address,bytes32,bytes)": "infinite",
            "balanceOf(address)": "2860",
            "batchCalls(bytes[])": "infinite",
            "chubbiness(bytes32)": "2709",
            "color(bytes32)": "2551",
            "curve()": "650",
            "getData(bytes32)": "infinite",
            "getDataBatch(bytes32[])": "infinite",
            "getDataBatchForTokenIds(bytes32[],bytes32[])": "infinite",
            "getDataForTokenId(bytes32,bytes32)": "infinite",
            "getOperatorsOf(bytes32)": "infinite",
            "isOperatorFor(address,bytes32)": "5093",
            "isUniversalProfile(address)": "infinite",
            "limit()": "870",
            "loogieType(bytes32)": "infinite",
            "loogiesMetadata()": "2381",
            "mintItem()": "infinite",
            "mintLoogie(address)": "infinite",
            "mouthLength(bytes32)": "2357",
            "name()": "infinite",
            "owner()": "2887",
            "price()": "2929",
            "recipient()": "562",
            "renounceOwnership()": "28569",
            "revokeOperator(address,bytes32,bool,bytes)": "infinite",
            "setData(bytes32,bytes)": "infinite",
            "setDataBatch(bytes32[],bytes[])": "infinite",
            "setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": "infinite",
            "setDataForTokenId(bytes32,bytes32,bytes)": "infinite",
            "setUPUsername(bytes32,string)": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "symbol()": "infinite",
            "tokenExists(uint256)": "2330",
            "tokenIdsOf(address)": "infinite",
            "tokenOwnerOf(bytes32)": "2651",
            "totalSupply()": "2401",
            "transfer(address,address,bytes32,bool,bytes)": "infinite",
            "transferBatch(address[],address[],bytes32[],bool[],bytes[])": "infinite",
            "transferOwnership(address)": "29072",
            "upUsernames(bytes32)": "infinite",
            "updateCollectionMetadata()": "infinite"
          },
          "internal": {
            "_getDataForTokenId(bytes32,bytes32)": "infinite",
            "_updateCollectionMetadata()": "infinite"
          }
        },
        "methodIdentifiers": {
          "authorizeOperator(address,bytes32,bytes)": "86a10ddd",
          "balanceOf(address)": "70a08231",
          "batchCalls(bytes[])": "6963d438",
          "chubbiness(bytes32)": "6643a686",
          "color(bytes32)": "1ead90b0",
          "curve()": "7165485d",
          "getData(bytes32)": "54f6127f",
          "getDataBatch(bytes32[])": "dedff9c6",
          "getDataBatchForTokenIds(bytes32[],bytes32[])": "1d26fce6",
          "getDataForTokenId(bytes32,bytes32)": "16e023b3",
          "getOperatorsOf(bytes32)": "49a6078d",
          "isOperatorFor(address,bytes32)": "2a3654a4",
          "isUniversalProfile(address)": "791790c9",
          "limit()": "a4d66daf",
          "loogieType(bytes32)": "fc056acc",
          "loogiesMetadata()": "0e2fee84",
          "mintItem()": "eb93406b",
          "mintLoogie(address)": "475a590d",
          "mouthLength(bytes32)": "017c96b8",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "price()": "a035b1fe",
          "recipient()": "66d003ac",
          "renounceOwnership()": "715018a6",
          "revokeOperator(address,bytes32,bool,bytes)": "db8c9663",
          "setData(bytes32,bytes)": "7f23690c",
          "setDataBatch(bytes32[],bytes[])": "97902421",
          "setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": "be9f0e6f",
          "setDataForTokenId(bytes32,bytes32,bytes)": "d6c1407c",
          "setUPUsername(bytes32,string)": "19c9d79b",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenExists(uint256)": "00923f9e",
          "tokenIdsOf(address)": "a3b261f2",
          "tokenOwnerOf(bytes32)": "217b2270",
          "totalSupply()": "18160ddd",
          "transfer(address,address,bytes32,bool,bytes)": "511b6952",
          "transferBatch(address[],address[],bytes32[],bool[],bytes[])": "7e87632c",
          "transferOwnership(address)": "f2fde38b",
          "upUsernames(bytes32)": "472dfcfb",
          "updateCollectionMetadata()": "d91a61d0"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_DataKeysValuesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC725Y_MsgValueDisallowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"storedData\",\"type\":\"bytes\"}],\"name\":\"InvalidExtensionAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"InvalidFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenNameNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenSymbolNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP4TokenTypeNotEditable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callIndex\",\"type\":\"uint256\"}],\"name\":\"LSP8BatchCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotSendToAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8CannotUseAddressZeroAsOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8InvalidTransferBatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistentTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8NonExistingOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"LSP8NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverContractMissingLSP1Interface\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenReceiver\",\"type\":\"address\"}],\"name\":\"LSP8NotifyTokenReceiverIsEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8OperatorAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8RevokeOperatorNotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenContractCannotHoldValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"LSP8TokenIdAlreadyMinted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdFormatNotEditable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenIdsDataLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LSP8TokenOwnerCannotBeOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LSP8TokenOwnerChanged\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"functionSelector\",\"type\":\"bytes4\"}],\"name\":\"NoExtensionFoundForFunctionSelector\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnableCannotSetZeroAddressAsOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"DataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorAuthorizationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"notified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"OperatorRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"TokenIdDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"batchCalls\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"chubbiness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"color\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"\",\"type\":\"bytes3\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatch\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"}],\"name\":\"getDataBatchForTokenIds\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"}],\"name\":\"getDataForTokenId\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"getOperatorsOf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isUniversalProfile\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"loogieType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loogiesMetadata\",\"outputs\":[{\"internalType\":\"contract OnChainLoogiesMetadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mintLoogie\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"mouthLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"notify\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"operatorNotificationData\",\"type\":\"bytes\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"tokenIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"dataKeys\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"dataValues\",\"type\":\"bytes[]\"}],\"name\":\"setDataBatchForTokenIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"dataValue\",\"type\":\"bytes\"}],\"name\":\"setDataForTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"}],\"name\":\"setUPUsername\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"tokenIdsOf\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"tokenOwnerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"tokenId\",\"type\":\"bytes32[]\"},{\"internalType\":\"bool[]\",\"name\":\"force\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"transferBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"upUsernames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCollectionMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC725Y_DataKeysValuesEmptyArray()\":[{\"details\":\"Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\"}],\"ERC725Y_DataKeysValuesLengthMismatch()\":[{\"details\":\"Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function.\"}],\"ERC725Y_MsgValueDisallowed()\":[{\"details\":\"Reverts when sending value to the {setData} or {setDataBatch} function.\"}],\"InvalidExtensionAddress(bytes)\":[{\"details\":\"reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\"}],\"InvalidFunctionSelector(bytes)\":[{\"details\":\"reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\"}],\"LSP4TokenNameNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized. The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenSymbolNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized. The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP4TokenTypeNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized. The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract. It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\"}],\"LSP8BatchCallFailed(uint256)\":[{\"details\":\"Reverts when a batch call failed.\"}],\"LSP8CannotSendToAddressZero()\":[{\"details\":\"Reverts when trying to send token to the zero address.\"}],\"LSP8CannotUseAddressZeroAsOperator()\":[{\"details\":\"Reverts when trying to set the zero address as an operator.\"}],\"LSP8InvalidTransferBatch()\":[{\"details\":\"Reverts when the parameters used for `transferBatch` have different lengths.\"}],\"LSP8NonExistentTokenId(bytes32)\":[{\"details\":\"Reverts when `tokenId` has not been minted.\"}],\"LSP8NonExistingOperator(address,bytes32)\":[{\"details\":\"Reverts when `operator` is not an operator for the `tokenId`.\"}],\"LSP8NotTokenOperator(bytes32,address)\":[{\"details\":\"Reverts when `caller` is not an allowed operator for `tokenId`.\"}],\"LSP8NotTokenOwner(address,bytes32,address)\":[{\"details\":\"Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\"}],\"LSP8NotifyTokenReceiverContractMissingLSP1Interface(address)\":[{\"details\":\"Reverts if the `tokenReceiver` does not implement LSP1 when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8NotifyTokenReceiverIsEOA(address)\":[{\"details\":\"Reverts if the `tokenReceiver` is an EOA when minting or transferring tokens with `bool force` set as `false`.\"}],\"LSP8OperatorAlreadyAuthorized(address,bytes32)\":[{\"details\":\"Reverts when `operator` is already authorized for the `tokenId`.\"}],\"LSP8RevokeOperatorNotAuthorized(address,address,bytes32)\":[{\"details\":\"Reverts when the call to revoke operator is not authorized.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"details\":\"Error occurs when sending native tokens to the LSP8 contract without sending any data. E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\"}],\"LSP8TokenIdAlreadyMinted(bytes32)\":[{\"details\":\"Reverts when `tokenId` has already been minted.\"}],\"LSP8TokenIdFormatNotEditable()\":[{\"details\":\"Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed. The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract. It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\"}],\"LSP8TokenIdsDataEmptyArray()\":[{\"details\":\"Reverts when empty arrays is passed to the function\"}],\"LSP8TokenIdsDataLengthMismatch()\":[{\"details\":\"Reverts when the length of the token IDs data arrays is not equal\"}],\"LSP8TokenOwnerCannotBeOperator()\":[{\"details\":\"Reverts when trying to authorize or revoke the token's owner as an operator.\"}],\"LSP8TokenOwnerChanged(bytes32,address,address)\":[{\"details\":\"Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\"}],\"NoExtensionFoundForFunctionSelector(bytes4)\":[{\"details\":\"reverts when there is no extension for the function selector being called with\"}],\"OwnableCannotSetZeroAddressAsOwner()\":[{\"details\":\"Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it.\"}]},\"kind\":\"dev\",\"methods\":{\"authorizeOperator(address,bytes32,bytes)\":{\"details\":\"Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}. Notify the operator based on the LSP1-UniversalReceiver standard\",\"params\":{\"operator\":\"The address to authorize as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The token ID operator has access to.\"}},\"balanceOf(address)\":{\"details\":\"Get the number of token IDs owned by `tokenOwner`.\",\"params\":{\"tokenOwner\":\"The address to query     *\"},\"returns\":{\"_0\":\"The total number of token IDs that `tokenOwner` owns.\"}},\"batchCalls(bytes[])\":{\"custom:info\":\"It's not possible to send value along the functions call due to the use of `delegatecall`.\",\"details\":\"Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\",\"params\":{\"data\":\"An array of ABI encoded function calls to be called on the contract.\"},\"returns\":{\"results\":\"An array of abi-encoded data returned by the functions executed.\"}},\"getData(bytes32)\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\",\"params\":{\"dataKey\":\"The data key for which to retrieve the value.\"},\"returns\":{\"dataValue\":\"The bytes value stored under the specified data key.\"}},\"getDataBatch(bytes32[])\":{\"details\":\"Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\",\"params\":{\"dataKeys\":\"The array of keys which values to retrieve\"},\"returns\":{\"dataValues\":\"The array of data stored at multiple keys\"}},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"tokenIds\":\"An array of token IDs.\"},\"returns\":{\"dataValues\":\"An array of data values for each pair of `tokenId` and `dataKey`.\"}},\"getDataForTokenId(bytes32,bytes32)\":{\"params\":{\"dataKey\":\"The key for the data to retrieve.\",\"tokenId\":\"The unique identifier for a token.\"},\"returns\":{\"dataValue\":\"The data value associated with the given `tokenId` and `dataKey`.\"}},\"getOperatorsOf(bytes32)\":{\"details\":\"Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\",\"params\":{\"tokenId\":\"The token ID to get the operators for.\"},\"returns\":{\"_0\":\"An array of operators allowed to transfer or burn a specific `tokenId`. Requirements - `tokenId` must exist.\"}},\"isOperatorFor(address,bytes32)\":{\"details\":\"Returns whether `operator` address is an operator for a given `tokenId`.\",\"params\":{\"operator\":\"The address to query operator status for.\",\"tokenId\":\"The token ID to check if `operator` is allowed to operate on.\"},\"returns\":{\"_0\":\"`true` if `operator` is an operator for `tokenId`, `false` otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeOperator(address,bytes32,bool,bytes)\":{\"details\":\"Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner. See also {isOperatorFor}.\",\"params\":{\"notify\":\"Boolean indicating whether to notify the operator or not\",\"operator\":\"The address to revoke as an operator.\",\"operatorNotificationData\":\"The data to notify the operator about via LSP1.\",\"tokenId\":\"The tokenId `operator` is revoked from operating on.\"}},\"setData(bytes32,bytes)\":{\"custom:events\":\"{DataChanged} event.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner}.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\",\"details\":\"Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.\",\"params\":{\"dataKey\":\"The data key for which to set a new value.\",\"dataValue\":\"The new bytes value to set.\"}},\"setDataBatch(bytes32[],bytes[])\":{\"custom:events\":\"{DataChanged} event **for each data key/value pair set**.\",\"custom:requirements\":\"- SHOULD only be callable by the {owner} of the contract.\",\"custom:warning\":\"**Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**. If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\",\"details\":\"Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\",\"params\":{\"dataKeys\":\"An array of data keys to set bytes values for.\",\"dataValues\":\"An array of bytes values to set for each `dataKeys`.\"}},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"params\":{\"dataKeys\":\"An array of data keys corresponding to the token IDs.\",\"dataValues\":\"An array of values to set for the given data keys.\",\"tokenIds\":\"An array of token IDs.\"}},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"params\":{\"dataKey\":\"The key for the data to set.\",\"dataValue\":\"The value to set for the given data key.\",\"tokenId\":\"The unique identifier for a token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"tokenIdsOf(address)\":{\"details\":\"Returns the list of token IDs that the `tokenOwner` address owns.\",\"params\":{\"tokenOwner\":\"The address that we want to get the list of token IDs for.\"},\"returns\":{\"_0\":\"An array of `bytes32[] tokenIds` owned by `tokenOwner`.\"}},\"tokenOwnerOf(bytes32)\":{\"details\":\"Returns the address that owns a given `tokenId`.\",\"params\":{\"tokenId\":\"The token ID to query the owner for.\"},\"returns\":{\"_0\":\"The owner address of the given `tokenId`.\"}},\"totalSupply()\":{\"details\":\"Returns the number of existing tokens that have been minted in this contract.\",\"returns\":{\"_0\":\"The number of existing tokens.\"}},\"transfer(address,address,bytes32,bool,bytes)\":{\"details\":\"Transfer a given `tokenId` token from the `from` address to the `to` address. If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred. The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs) or contracts that do not implement the LSP1 standard.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\",\"force\":\"When set to `true`, the `to` address CAN be any address. When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\",\"from\":\"The address that owns the given `tokenId`.\",\"to\":\"The address that will receive the `tokenId`.\",\"tokenId\":\"The token ID to transfer.\"}},\"transferBatch(address[],address[],bytes32[],bool[],bytes[])\":{\"details\":\"Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`. If any transfer fails, the whole call will revert.\",\"params\":{\"data\":\"Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\",\"force\":\"When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\",\"from\":\"An array of sending addresses.\",\"to\":\"An array of recipient addresses.\",\"tokenId\":\"An array of token IDs to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LSP8LoogiesFixed\",\"version\":1},\"userdoc\":{\"errors\":{\"LSP8BatchCallFailed(uint256)\":[{\"notice\":\"Batch call failed.\"}],\"LSP8TokenContractCannotHoldValue()\":[{\"notice\":\"LSP8 contract cannot receive native tokens.\"}]},\"events\":{\"DataChanged(bytes32,bytes)\":{\"notice\":\"The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\"}},\"kind\":\"user\",\"methods\":{\"batchCalls(bytes[])\":{\"notice\":\"Executing the following batch of abi-encoded function calls on the contract: `data`.\"},\"getData(bytes32)\":{\"notice\":\"Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\"},\"getDataBatch(bytes32[])\":{\"notice\":\"Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\"},\"getDataBatchForTokenIds(bytes32[],bytes32[])\":{\"notice\":\"Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"getDataForTokenId(bytes32,bytes32)\":{\"notice\":\"Retrieves data for a specific `tokenId` and `dataKey`.\"},\"setData(bytes32,bytes)\":{\"notice\":\"Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\"},\"setDataBatch(bytes32[],bytes[])\":{\"notice\":\"Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\"},\"setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])\":{\"notice\":\"Sets data in batch for multiple `tokenId` and `dataKey` pairs.\"},\"setDataForTokenId(bytes32,bytes32,bytes)\":{\"notice\":\"Sets data for a specific `tokenId` and `dataKey`.\"}},\"notice\":\"A fixed version that follows the Beans.sol pattern with the OnChainMetadata structure, proper SVG rendering, and numeric attributes in token metadata\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LSP8LoogiesFixed.sol\":\"LSP8LoogiesFixed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@erc725/smart-contracts-v8/contracts/ERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\n// errors\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray,\\n    OwnableCannotSetZeroAddressAsOwner\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y sub-standard, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network> and <CJ42>, <YamenMerhi>, <B00ste>, <SkimaHarvey>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is Ownable, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        Ownable._transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value\\n     * (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**.\\n     * If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value\\n     * (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**.\\n     * If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setDataBatch(dataKeys, dataValues);\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     * represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Write a set of `dataValues` to the underlying ERC725Y storage for each associated `dataKeys`. The ERC725Y storage is\\n     * represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKeys A bytes32 array of data keys to write the associated `bytes` value to the store.\\n     * @param dataValues The `bytes` values to associate with each given `dataKeys` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted for each successful data key-value pairs set.\\n     */\\n    function _setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) internal virtual {\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x209d6b52eb0d5dcb8c180773dd67e507f603c98ede7e5a64457752159a52ad3d\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts-v8/contracts/constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\",\"keccak256\":\"0x37da1619e580b6af6a68e91b4784f7945ee2344fad3a96b6dfb2592e35fedb60\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts-v8/contracts/errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\",\"keccak256\":\"0x198fece17fcfec61d40d3453ebbaa49760968ea8caa128dd5314a12b98ecec66\",\"license\":\"Apache-2.0\"},\"@erc725/smart-contracts-v8/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x943d0f67d6455cfb1bed5d1fb77995df0b202ecdbb028fa0e85bc26bcd3219a5\",\"license\":\"CC0-1.0\"},\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xa47c9e3eba0c733a1685b9fa309f753540c89ad2dca73236a2c953e7f5680e7b\",\"license\":\"CC0-1.0\"},\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_) that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x72dd4f342e059edd246032d2cd2e45707453ceb27c187161e31af345d058dced\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\",\"keccak256\":\"0x0f87fc38243fc70316e22814f5a79d9c0770a39f64077cbc6fb5fddfa1d4c23c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve information related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\",\"keccak256\":\"0x7dd32ff416b7275c5dbb8daa39c0f13bb1b4db2df8132221fc07619dbfe08cd0\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\",\"keccak256\":\"0x6d4bb208587872ad563fef31655c44f7de03baa5b4a513910c0003aea0c04036\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\",\"keccak256\":\"0x75a0159f76a3c5bf26b13aa404aca2f588ea41928eb1483683e29d2031fe5abf\",\"license\":\"Apache-2.0\"},\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overridden.\\n     * Up to the implementer contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4536ed09238f33ca9d40ed2e7c6254aac84bf81010b3524711524ae7fd30227c\",\"license\":\"Apache-2.0\"},\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * \\u2193\\u2193\\u2193\\u2193\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * \\u2191\\u2191\\u2191\\u2191\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\",\"keccak256\":\"0x86ce8a85d12c79b76db5413b05b9bff16cd865b395efdc0e85b06b3b5e17219b\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts-v8/contracts/ERC725Y.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is ERC725Y {\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725Y._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725Y._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725Y._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725Y._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6a718979925b05064c15e4de4b376dadec8d107d720aa762d22a06e44ed67fa4\",\"license\":\"Apache-2.0\"},\"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\",\"keccak256\":\"0x3db7fd252ed02ce27686141125c3d65d3ff682a32601e1e8611becd9357a57b5\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x2ca5a81c6c006030e2204d2a9997b15e954bc0696959c051a570c8a19eac4786\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\\n\\nbytes4 constant _INTERFACEID_LSP8_V0_12_0 = 0x30dc5278;\\n\\nbytes4 constant _INTERFACEID_LSP8_V0_14_0 = 0xecad9f75;\\n\\n// --- ERC725Y Data Keys\\n\\n// keccak256('LSP8TokenIdFormat')\\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\\n\\n// keccak256('LSP8TokenMetadataBaseURI')\\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\\n\\n// keccak256('LSP8ReferenceContract')\\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\\n\\n// keccak256('LSP8Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\\n\\n// keccak256('LSP8Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\\n\\n// --- Token IDs Format\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\\n\",\"keccak256\":\"0xe958d7d5ab694eb054df65ef6fb37864ff9da33604a28a14ca42e25c23629065\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8Errors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev Reverts when `tokenId` has not been minted.\\n */\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\\n */\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\\n */\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\\n */\\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when trying to set the zero address as an operator.\\n */\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev Reverts when trying to send token to the zero address.\\n */\\nerror LSP8CannotSendToAddressZero();\\n\\n/**\\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\\n */\\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `tokenId` has already been minted.\\n */\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\\n */\\nerror LSP8InvalidTransferBatch();\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` is an EOA\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP8TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP8 contract cannot receive native tokens.\\n */\\nerror LSP8TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\\n */\\nerror LSP8TokenIdFormatNotEditable();\\n\\n/**\\n * @dev Reverts when the length of the token IDs data arrays is not equal\\n */\\nerror LSP8TokenIdsDataLengthMismatch();\\n\\n/**\\n * @dev Reverts when empty arrays is passed to the function\\n */\\nerror LSP8TokenIdsDataEmptyArray();\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP8BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\\n */\\nerror LSP8TokenOwnerChanged(\\n    bytes32 tokenId,\\n    address oldOwner,\\n    address newOwner\\n);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP8RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    bytes32 tokenId\\n);\\n\",\"keccak256\":\"0xff2c1791043272eb4a7c05bc77fa0a0234678991b0700f84d92edbd31fefd905\",\"license\":\"Apache-2.0\"},\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {\\n    ILSP8IdentifiableDigitalAsset\\n} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// modules\\nimport {\\n    LSP4DigitalAssetMetadata,\\n    ERC725Y\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\n\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\nimport {\\n    _INTERFACEID_LSP8,\\n    _LSP8_TOKENID_FORMAT_KEY,\\n    _TYPEID_LSP8_TOKENOPERATOR,\\n    _TYPEID_LSP8_TOKENSSENDER,\\n    _TYPEID_LSP8_TOKENSRECIPIENT\\n} from \\\"./LSP8Constants.sol\\\";\\n\\n// errors\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\nimport {\\n    LSP8TokenContractCannotHoldValue,\\n    LSP8TokenIdFormatNotEditable,\\n    LSP8NonExistentTokenId,\\n    LSP8NotTokenOwner,\\n    LSP8CannotUseAddressZeroAsOperator,\\n    LSP8TokenOwnerCannotBeOperator,\\n    LSP8OperatorAlreadyAuthorized,\\n    LSP8NotTokenOperator,\\n    LSP8InvalidTransferBatch,\\n    LSP8NonExistingOperator,\\n    LSP8CannotSendToAddressZero,\\n    LSP8TokenIdAlreadyMinted,\\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP8NotifyTokenReceiverIsEOA,\\n    LSP8TokenIdsDataLengthMismatch,\\n    LSP8TokenIdsDataEmptyArray,\\n    LSP8BatchCallFailed,\\n    LSP8TokenOwnerChanged,\\n    LSP8RevokeOperatorNotAuthorized\\n} from \\\"./LSP8Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Standard implementation contract of the LSP8 standard.\\n *\\n * Minting and transferring are done by providing a unique `tokenId`.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP8IdentifiableDigitalAsset is\\n    ILSP8IdentifiableDigitalAsset,\\n    LSP4DigitalAssetMetadata,\\n    LSP17Extendable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    /**\\n     * @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\\n     * with tokenId format `lsp8TokenIdFormat_`.\\n     *\\n     * @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\\n     * This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\\n     *\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\\n     *\\n     * @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\\n     * and cannot be changed in the ERC725Y storage after the contract has been deployed.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        uint256 lsp8TokenIdFormat_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        LSP4DigitalAssetMetadata._setData(\\n            _LSP8_TOKENID_FORMAT_KEY,\\n            abi.encode(lsp8TokenIdFormat_)\\n        );\\n    }\\n\\n    // fallback functions\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\\n     * @notice LSP8 contract cannot receive native tokens.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP8TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = _getData(mappedExtensionDataKey);\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP17Extendable\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC725Y, LSP17Extendable) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP8 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP4DigitalAssetMetadata\\n     * @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\\n     * once the identifiable digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP8_TOKENID_FORMAT_KEY) {\\n            revert LSP8TokenIdFormatNotEditable();\\n        }\\n        LSP4DigitalAssetMetadata._setData(dataKey, dataValue);\\n    }\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getDataForTokenId(tokenId, dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        if (tokenIds.length != dataKeys.length) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        dataValues = new bytes[](tokenIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public virtual override onlyOwner {\\n        _setDataForTokenId(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public virtual override onlyOwner {\\n        if (\\n            tokenIds.length != dataKeys.length ||\\n            dataKeys.length != dataValues.length\\n        ) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        if (tokenIds.length == 0) {\\n            revert LSP8TokenIdsDataEmptyArray();\\n        }\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP8BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (tokenOwner != msg.sender) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        bool isAdded = _operators[tokenId].add(operator);\\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\\n\\n        emit OperatorAuthorizationChanged(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenId,\\n            true, // authorized\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (msg.sender != tokenOwner) {\\n            if (operator != msg.sender) {\\n                revert LSP8RevokeOperatorNotAuthorized(\\n                    msg.sender,\\n                    tokenOwner,\\n                    tokenId\\n                );\\n            }\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        _revokeOperator(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                tokenId,\\n                false, // unauthorized\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address[] memory) {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    /**\\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\\n     * @return true if `caller` is either operator or owner\\n     */\\n    function _isOperatorOrOwner(\\n        address caller,\\n        bytes32 tokenId\\n    ) internal view virtual returns (bool) {\\n        return (caller == tokenOwnerOf(tokenId) ||\\n            _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != tokenId.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes `operator` from the list of operators for the `tokenId`\\n     */\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        bool isRemoved = _operators[tokenId].remove(operator);\\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\\n\\n        emit OperatorRevoked(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notified,\\n            operatorNotificationData\\n        );\\n    }\\n\\n    /**\\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\\n     *\\n     * @param tokenOwner The address that is the owner of the `tokenId`.\\n     * @param tokenId The token to remove the associated operators for.\\n     */\\n    function _clearOperators(\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // here is a good example of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        address operator;\\n        for (uint256 i; i < operatorListLength; ) {\\n            // we are emptying the list, always remove from index 0\\n            operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId, false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address that will receive the minted `tokenId`.\\n     * @param tokenId The token ID to create (= mint).\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must not exist and not have been already minted.\\n     * - `to` cannot be the zero address.\\n\\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        // Check that `tokenId` is not already minted\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, force, data);\\n\\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        // token being minted\\n        ++_existingTokens;\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, force, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            tokenId,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\\n     * This will also clear all the operators allowed to transfer the `tokenId`.\\n     *\\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\\n     *\\n     * @param tokenId The token to burn.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\\n     *\\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, false, data);\\n\\n        // Re-fetch and update `tokenOwner` in case `tokenId`\\n        // was transferred inside the `_beforeTokenTransfer` hook\\n        tokenOwner = tokenOwnerOf(tokenId);\\n\\n        // token being burned\\n        --_existingTokens;\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\\n\\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, false, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenOwner,\\n            address(0),\\n            tokenId,\\n            data\\n        );\\n\\n        _notifyTokenSender(tokenOwner, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\\n     *\\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param tokenId The token to transfer.\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * @custom:events {Transfer} event.\\n     *\\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, force, data);\\n\\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\\n        address currentTokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != currentTokenOwner) {\\n            revert LSP8TokenOwnerChanged(\\n                tokenId,\\n                tokenOwner,\\n                currentTokenOwner\\n            );\\n        }\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\\n\\n        _afterTokenTransfer(from, to, tokenId, force, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function _setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[keccak256(bytes.concat(tokenId, dataKey))] = dataValue;\\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValues) {\\n        return _store[keccak256(bytes.concat(tokenId, dataKey))];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifying sender/recipient via LSP1** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP8_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP8_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1f707425bbcd5a84c7de2ad8ba9c2f620617b5f6483074c27ad6f259d91b7dd2\",\"license\":\"Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.6) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 0x20)\\n            let dataPtr := data\\n            let endPtr := add(data, mload(data))\\n\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\n            // set it to zero to make sure no dirty bytes are read in that section.\\n            let afterPtr := add(endPtr, 0x20)\\n            let afterCache := mload(afterPtr)\\n            mstore(afterPtr, 0x00)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 byte (24 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\n                // Use this as an index into the lookup table, mload an entire word\\n                // so the desired character is in the least significant byte, and\\n                // mstore8 this least significant byte into the result and continue.\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // Reset the value that was cached\\n            mstore(afterPtr, afterCache)\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x822fe67e9e671773d29c8182e7287b42edf5f575eab1eb98558d5ccbdff61c96\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/ILSP0ERC725Account.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ILSP0ERC725Account Interface\\n * @dev Minimal interface for the LSP0 ERC725 Account standard\\n */\\ninterface ILSP0ERC725Account {\\n    /**\\n     * @dev Checks if a signature is valid for the given data\\n     * @param dataHash The hash of the data signed\\n     * @param signature The signature to verify\\n     * @return The magic value 0x1626ba7e if valid\\n     */\\n    function isValidSignature(bytes32 dataHash, bytes memory signature) external view returns (bytes4);\\n    \\n    /**\\n     * @dev Gets data for a specific key\\n     * @param dataKey The key to query\\n     * @return The stored data bytes\\n     */\\n    function getData(bytes32 dataKey) external view returns (bytes memory);\\n} \",\"keccak256\":\"0x726a55bb66e037b81c477b0573b1b6e2da1fb6f57ee0fa318d4dbca0b915ed4b\",\"license\":\"MIT\"},\"contracts/ILSP3Profile.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ILSP3Profile Interface\\n * @dev Interface for the LSP3 Profile standard\\n */\\ninterface ILSP3Profile {\\n    /**\\n     * @dev Returns the name associated with the Universal Profile\\n     */\\n    function getName() external view returns (string memory);\\n} \",\"keccak256\":\"0xaf21389139e58b001f7a9d134fe99c9cdc33457aff78bfdcddbeb21f22885997\",\"license\":\"MIT\"},\"contracts/LSP4Constants.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\",\"keccak256\":\"0xdf9b7c688d39a92cb3238136a9f56554245d5ae9b6568dcd6164d0e15c6f56c7\",\"license\":\"Apache-2.0\"},\"contracts/LSP8LoogiesFixed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\\\";\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\\\";\\nimport \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\nimport \\\"./ILSP0ERC725Account.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./ILSP3Profile.sol\\\";\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n// First, create an OnChainLoogiesMetadata contract similar to OnChainMetadata\\ncontract OnChainLoogiesMetadata {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Define SVG components for Loogies\\n    string[] private headPaths = [\\n        \\\"M 200 200 m -70 0 a 70 50 0 1 0 140 0 a 70 50 0 1 0 -140 0\\\",\\n        \\\"M 200 200 m -65 0 a 65 55 0 1 0 130 0 a 65 55 0 1 0 -130 0\\\",\\n        \\\"M 200 200 m -75 0 a 75 45 0 1 0 150 0 a 75 45 0 1 0 -150 0\\\"\\n    ];\\n    \\n    string[] private eyePaths = [\\n        \\\"M 170 180 m -15 0 a 15 15 0 1 0 30 0 a 15 15 0 1 0 -30 0 M 230 180 m -15 0 a 15 15 0 1 0 30 0 a 15 15 0 1 0 -30 0\\\",\\n        \\\"M 170 170 m -12 0 a 12 18 0 1 0 24 0 a 12 18 0 1 0 -24 0 M 230 170 m -12 0 a 12 18 0 1 0 24 0 a 12 18 0 1 0 -24 0\\\",\\n        \\\"M 170 180 m -17 0 a 17 13 0 1 0 34 0 a 17 13 0 1 0 -34 0 M 230 180 m -17 0 a 17 13 0 1 0 34 0 a 17 13 0 1 0 -34 0\\\"\\n    ];\\n    \\n    string[] private mouthPaths = [\\n        \\\"M 160 220 Q 200 240 240 220\\\",\\n        \\\"M 160 220 Q 200 250 240 220\\\",\\n        \\\"M 160 225 Q 200 235 240 225\\\"\\n    ];\\n    \\n    string[] private pupilPaths = [\\n        \\\"M 170 180 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0 M 230 180 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0\\\",\\n        \\\"M 170 170 m -4 0 a 4 6 0 1 0 8 0 a 4 6 0 1 0 -8 0 M 230 170 m -4 0 a 4 6 0 1 0 8 0 a 4 6 0 1 0 -8 0\\\",\\n        \\\"M 170 180 m -3 0 a 3 3 0 1 0 6 0 a 3 3 0 1 0 -6 0 M 230 180 m -3 0 a 3 3 0 1 0 6 0 a 3 3 0 1 0 -6 0\\\"\\n    ];\\n    \\n    // Define CSS classes for styling\\n    string[4] private classes = [\\\"head\\\", \\\"eyes\\\", \\\"pupils\\\", \\\"mouth\\\"];\\n\\n    // Store metadata on types of Loogies\\n    struct LoogieColors {\\n        string bodyFill;    // Body fill color\\n        string eyeFill;     // Eye fill color\\n        string pupilFill;   // Pupil fill color\\n        string strokeColor; // Stroke color\\n    }\\n\\n    struct LoogieMetadata {\\n        string loogieType;\\n        string variation;\\n        string encoded;     // Hash for verification\\n        LoogieColors colors;\\n    }\\n\\n    // Mapping from tokenId to Loogie type\\n    mapping(bytes32 => string) public loogieTypes;\\n    // Mapping from loogie type to its metadata\\n    mapping(string => LoogieMetadata) public metadata;\\n    \\n    // Initialize basic loogie types\\n    constructor() {\\n        // Setup basic colors for different loogie types\\n        _setupLoogieType(\\\"green\\\", [\\\"green\\\", \\\"standard\\\", \\\"\\\", \\\"#a3e635\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"blue\\\", [\\\"blue\\\", \\\"standard\\\", \\\"\\\", \\\"#3b82f6\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"red\\\", [\\\"red\\\", \\\"standard\\\", \\\"\\\", \\\"#ef4444\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"purple\\\", [\\\"purple\\\", \\\"standard\\\", \\\"\\\", \\\"#a855f7\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"yellow\\\", [\\\"yellow\\\", \\\"standard\\\", \\\"\\\", \\\"#facc15\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n    }\\n    \\n    // Setup a loogie type with its metadata\\n    function _setupLoogieType(string memory _type, string[7] memory data) internal {\\n        metadata[_type] = LoogieMetadata({\\n            loogieType: data[0],\\n            variation: data[1],\\n            encoded: data[2],\\n            colors: LoogieColors({\\n                bodyFill: data[3],\\n                eyeFill: data[4],\\n                pupilFill: data[5],\\n                strokeColor: data[6]\\n            })\\n        });\\n    }\\n    \\n    // Get a random path index\\n    function getRandomPathIndex(bytes32 seed, uint8 offset, uint8 max) internal pure returns (uint8) {\\n        return uint8(uint256(keccak256(abi.encodePacked(seed, offset)))) % max;\\n    }\\n    \\n    // Render SVG based on Loogie attributes\\n    function renderSVG(bytes32 tokenId, string memory _type, uint256 chubbiness, uint256 mouthLength, string memory username) internal view returns (bytes memory) {\\n        LoogieMetadata memory _metadata = metadata[_type];\\n        \\n        // Get random path indices for visual variation based on tokenId\\n        uint8 headPathIndex = getRandomPathIndex(tokenId, 0, 3);\\n        uint8 eyePathIndex = getRandomPathIndex(tokenId, 1, 3);\\n        uint8 mouthPathIndex = getRandomPathIndex(tokenId, 2, 3);\\n        uint8 pupilPathIndex = getRandomPathIndex(tokenId, 3, 3);\\n        \\n        // Scale paths based on chubbiness\\n        string memory scaledHeadPath = _scalePath(headPaths[headPathIndex], chubbiness);\\n        \\n        // Generate SVG with CSS styling\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 400 400\\\" width=\\\"400\\\" height=\\\"400\\\">',\\n            '<style>',\\n            '.head{fill:', _metadata.colors.bodyFill, ';stroke:', _metadata.colors.strokeColor, ';stroke-width:3px;}',\\n            '.eyes{fill:', _metadata.colors.eyeFill, ';stroke:', _metadata.colors.strokeColor, ';stroke-width:2px;}',\\n            '.pupils{fill:', _metadata.colors.pupilFill, ';stroke:none;}',\\n            '.mouth{fill:none;stroke:', _metadata.colors.strokeColor, ';stroke-width:3px;}',\\n            '</style>',\\n            '<rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#000000\\\"/>',\\n            '<path d=\\\"', scaledHeadPath, '\\\" class=\\\"head\\\"/>',\\n            '<path d=\\\"', eyePaths[eyePathIndex], '\\\" class=\\\"eyes\\\"/>',\\n            '<path d=\\\"', pupilPaths[pupilPathIndex], '\\\" class=\\\"pupils\\\"/>',\\n            '<path d=\\\"', _adjustMouthPath(mouthPaths[mouthPathIndex], mouthLength), '\\\" class=\\\"mouth\\\"/>',\\n            '<text x=\\\"200\\\" y=\\\"280\\\" font-family=\\\"Arial\\\" font-size=\\\"16\\\" fill=\\\"#ffffff\\\" text-anchor=\\\"middle\\\">', \\n            username, \\n            '</text>',\\n            '</svg>'\\n        );\\n        \\n        // Encode SVG to data URI\\n        return abi.encodePacked(\\n            'data:image/svg+xml;base64,',\\n            Base64.encode(svg)\\n        );\\n    }\\n    \\n    // Scale a path based on chubbiness\\n    function _scalePath(string memory path, uint256 chubbiness) internal pure returns (string memory) {\\n        // This is a simplified implementation - in production you'd want to actually scale the path\\n        // For now, just return the original path\\n        return path;\\n    }\\n    \\n    // Adjust mouth path based on mouth length\\n    function _adjustMouthPath(string memory path, uint256 mouthLength) internal pure returns (string memory) {\\n        // This is a simplified implementation - in production you'd want to actually adjust the path\\n        // For now, just return the original path\\n        return path;\\n    }\\n    \\n    // Generate metadata for a Loogie\\n    function getLoogieMetadata(\\n        bytes32 tokenId, \\n        string memory _type, \\n        bytes3 colorBytes, \\n        uint256 chubbiness, \\n        uint256 mouthLength, \\n        string memory username\\n    ) external view returns (bytes memory, bytes memory) {\\n        // Convert color to hex for display\\n        string memory colorHex = _bytesToHexString(colorBytes);\\n        \\n        // Generate type if not provided (fallback to color hex)\\n        string memory loogieType = bytes(_type).length > 0 ? _type : colorHex;\\n        \\n        // Render SVG\\n        bytes memory encodedSVG = renderSVG(tokenId, loogieType, chubbiness, mouthLength, username);\\n        \\n        // Calculate SVG hash\\n        bytes32 svgHash = keccak256(encodedSVG);\\n        \\n        // Format token name and description\\n        string memory tokenName = string(abi.encodePacked(\\\"Loogie #\\\", uint256(uint256(tokenId)).toString()));\\n        string memory description = string(\\n            abi.encodePacked(\\n                \\\"This Loogie is the color #\\\",\\n                colorHex,\\n                \\\" with a chubbiness of \\\",\\n                chubbiness.toString(),\\n                \\\" and mouth length of \\\",\\n                mouthLength.toString(),\\n                \\\".\\\"\\n            )\\n        );\\n        \\n        // Create LSP4 metadata JSON\\n        bytes memory rawMetadata = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\": {\\\"name\\\": \\\"', tokenName, \\n            '\\\",\\\"description\\\": \\\"', description, \\n            '\\\",\\\"links\\\": [{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"}],\\\"icon\\\":[],',\\n            '\\\"images\\\": [[{\\\"width\\\": 400,\\\"height\\\": 400,',\\n            '\\\"url\\\": \\\"', encodedSVG, '\\\",\\\"verification\\\": {\\\"method\\\": \\\"keccak256(bytes)\\\",\\\"data\\\": \\\"', \\n            _bytes32ToString(svgHash), '\\\"}}]],',\\n            '\\\"attributes\\\":[',\\n            '{\\\"key\\\":\\\"color\\\",\\\"value\\\":\\\"#', colorHex, '\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"chubbiness\\\",\\\"value\\\":', chubbiness.toString(), ',\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"mouthLength\\\",\\\"value\\\":', mouthLength.toString(), ',\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"username\\\",\\\"value\\\":\\\"', username, '\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"type\\\",\\\"value\\\":\\\"', loogieType, '\\\",\\\"type\\\":\\\"string\\\"}',\\n            ']}}'\\n        );\\n        \\n        // Create the encoded version with base64\\n        bytes memory encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(rawMetadata)\\n        );\\n        \\n        return (rawMetadata, encoded);\\n    }\\n    \\n    // Create collection metadata\\n    function getCollectionMetadata() external pure returns (bytes memory, bytes memory) {\\n        // Create a simple collection logo SVG\\n        string memory collectionSvg = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0 0 400 400\\\"><rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#000\\\"/><text x=\\\"200\\\" y=\\\"180\\\" font-family=\\\"Arial\\\" font-size=\\\"40\\\" fill=\\\"#fff\\\" text-anchor=\\\"middle\\\">LuksoLoogies</text><text x=\\\"200\\\" y=\\\"230\\\" font-family=\\\"Arial\\\" font-size=\\\"20\\\" fill=\\\"#0f0\\\" text-anchor=\\\"middle\\\">Fixed Edition</text></svg>';\\n        \\n        // Calculate the hash of the SVG for verification\\n        bytes32 svgHash = keccak256(bytes(collectionSvg));\\n        \\n        // Create the collection metadata with proper LSP4 structure\\n        bytes memory raw = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\":{',\\n            '\\\"name\\\":\\\"LuksoLoogies Fixed\\\",',\\n            '\\\"description\\\":\\\"LuksoLoogies are LUKSO Standard LSP8 NFTs with a smile :) Only 3728 LuksoLoogies available on a price curve increasing 0.2% with each new mint. This fixed version shows proper token attributes and SVG rendering.\\\",',\\n            '\\\"links\\\":[{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"},{\\\"title\\\":\\\"Twitter\\\",\\\"url\\\":\\\"https://twitter.com/luksoLoogies\\\"}],',\\n            '\\\"images\\\":[[{',\\n            '\\\"width\\\":400,',\\n            '\\\"height\\\":400,',\\n            '\\\"url\\\":\\\"data:image/svg+xml;base64,', Base64.encode(bytes(collectionSvg)), '\\\",',\\n            '\\\"verification\\\":{\\\"method\\\":\\\"keccak256(bytes)\\\",\\\"data\\\":\\\"', _bytes32ToString(svgHash), '\\\"}',\\n            '}]],',\\n            // Collection-specific attributes\\n            '\\\"attributes\\\":[',\\n            '{\\\"key\\\":\\\"type\\\",\\\"value\\\":\\\"collection\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"limit\\\",\\\"value\\\":3728,\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"curve\\\",\\\"value\\\":100.2,\\\"type\\\":\\\"number\\\"}',\\n            ']',\\n            '}}'\\n        );\\n        \\n        // Create the encoded version (with data URI prefix)\\n        bytes memory encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(raw)\\n        );\\n        \\n        return (raw, encoded);\\n    }\\n    \\n    // Helper function to convert bytes32 to hex string\\n    function _bytes32ToString(bytes32 value) internal pure returns (string memory) {\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\n        bytes memory stringBytes = new bytes(66);\\n        \\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n        \\n        for (uint256 i = 0; i < 32; i++) {\\n            uint8 byteValue = uint8(value[i]);\\n            stringBytes[2 + i*2] = hexChars[byteValue >> 4];\\n            stringBytes[2 + i*2 + 1] = hexChars[byteValue & 0x0f];\\n        }\\n        \\n        return string(stringBytes);\\n    }\\n    \\n    // Helper function to convert bytes3 to hex string\\n    function _bytesToHexString(bytes3 value) internal pure returns (string memory) {\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\n        bytes memory stringBytes = new bytes(6);\\n        \\n        for (uint i = 0; i < 3; i++) {\\n            stringBytes[i*2] = hexChars[uint8(value[i]) >> 4];\\n            stringBytes[i*2 + 1] = hexChars[uint8(value[i]) & 0x0f];\\n        }\\n        \\n        return string(stringBytes);\\n    }\\n}\\n\\n/**\\n * @title LSP8LoogiesFixed\\n * @notice A fixed version that follows the Beans.sol pattern with the OnChainMetadata structure,\\n * proper SVG rendering, and numeric attributes in token metadata\\n */\\ncontract LSP8LoogiesFixed is LSP8IdentifiableDigitalAsset {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    OnChainLoogiesMetadata public loogiesMetadata;\\n    \\n    uint256 private _tokenIds;\\n    mapping(bytes32 => bytes3) public color;\\n    mapping(bytes32 => uint256) public chubbiness;\\n    mapping(bytes32 => uint256) public mouthLength;\\n    mapping(bytes32 => string) public loogieType;\\n    // Store existing token IDs to check existence at runtime\\n    mapping(uint256 => bool) private _tokenIdExists;\\n    // Store UP usernames for each token\\n    mapping(bytes32 => string) public upUsernames;\\n\\n    // all funds go to buidlguidl.eth\\n    address payable public constant recipient =\\n        payable(0xa81a6a910FeD20374361B35C451a4a44F86CeD46);\\n\\n    uint256 public constant limit = 3728;\\n    uint256 public constant curve = 1002; // price increase 0.2% with each purchase\\n    uint256 public price = 0.1 ether; // LYX is at $1\\n\\n    // LSP0 Universal Receiver interface ID to detect Universal Profiles\\n    bytes4 constant _INTERFACEID_LSP0 = 0x3a271fff;\\n    \\n    constructor(address contractOwner) \\n    LSP8IdentifiableDigitalAsset(\\n        \\\"LuksoLoogies Fixed\\\", \\n        \\\"LUKLOGFIX\\\", \\n        contractOwner, \\n        _LSP4_TOKEN_TYPE_COLLECTION, // Set to COLLECTION (2) instead of NFT (1)\\n        0 // Token ID format number (0)\\n    ) {\\n        // Deploy the metadata contract\\n        loogiesMetadata = new OnChainLoogiesMetadata();\\n        \\n        // Set additional data for proper indexing\\n        _setData(_LSP4_SUPPORTED_STANDARDS_KEY, _LSP4_SUPPORTED_STANDARDS_VALUE);\\n        \\n        // Set collection supply data explicitly with the CORRECT keys\\n        bytes32 LSP4_METADATA_TOTAL_SUPPLY = 0xa23ea79c706be4641bfd97c9afb5b71a552c5bc320930dbe09b3530ed76dee0f;\\n        _setData(LSP4_METADATA_TOTAL_SUPPLY, bytes.concat(bytes32(uint256(limit))));\\n        \\n        bytes32 LSP4_METADATA_MAX_SUPPLY = 0xd28c95357cf4c94d638a4f572d5d3df8d7e1415c8b650e747a219c559d1435c8;\\n        _setData(LSP4_METADATA_MAX_SUPPLY, bytes.concat(bytes32(uint256(limit))));\\n        \\n        // Set Metadata Count key\\n        bytes32 LSP4_CREATORS_MAP_LENGTH_KEY = 0x6de85eaf5d982b4e5da00000d8c2f51c0e567ed9ec7b1f9ee90bb0b2839d168d;\\n        _setData(LSP4_CREATORS_MAP_LENGTH_KEY, bytes.concat(bytes32(uint256(1))));\\n        \\n        // Initialize collection metadata\\n        _updateCollectionMetadata();\\n    }\\n\\n    // Add standard name() function for compatibility with ERC721 display\\n    function name() public view returns (string memory) {\\n        return string(getData(_LSP4_TOKEN_NAME_KEY));\\n    }\\n\\n    // Add standard symbol() function for compatibility with ERC721 display\\n    function symbol() public view returns (string memory) {\\n        return string(getData(_LSP4_TOKEN_SYMBOL_KEY));\\n    }\\n\\n    // Add totalSupply() function for compatibility with ERC721\\n    function totalSupply() public view override returns (uint256) {\\n        return _tokenIds;\\n    }\\n\\n    function mintItem() public payable returns (bytes32) {\\n        require(_tokenIds < limit, \\\"DONE MINTING\\\");\\n        require(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n        price = (price * curve) / 1000;\\n\\n        _tokenIds += 1;\\n        // Convert to bytes32 in a way that ensures sequential ID format\\n        bytes32 tokenId = bytes32(uint256(_tokenIds));\\n        _tokenIdExists[_tokenIds] = true;\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                tokenId,\\n                blockhash(block.number - 1),\\n                msg.sender,\\n                address(this)\\n            )\\n        );\\n        \\n        // Generate token attributes from random seed\\n        color[tokenId] =\\n            bytes2(predictableRandom[0]) |\\n            (bytes2(predictableRandom[1]) >> 8) |\\n            (bytes3(predictableRandom[2]) >> 16);\\n        chubbiness[tokenId] =\\n            35 + ((55 * uint256(uint8(predictableRandom[3]))) / 255);\\n        mouthLength[tokenId] =\\n            180 + ((uint256(chubbiness[tokenId] / 4) * uint256(uint8(predictableRandom[4]))) / 255);\\n\\n        // Randomly assign loogie type\\n        uint256 typeIndex = uint256(uint8(predictableRandom[5])) % 5;\\n        if (typeIndex == 0) loogieType[tokenId] = \\\"green\\\";\\n        else if (typeIndex == 1) loogieType[tokenId] = \\\"blue\\\";\\n        else if (typeIndex == 2) loogieType[tokenId] = \\\"red\\\";\\n        else if (typeIndex == 3) loogieType[tokenId] = \\\"purple\\\";\\n        else loogieType[tokenId] = \\\"yellow\\\";\\n            \\n        // Set default UP username\\n        upUsernames[tokenId] = \\\"luksonaut\\\";\\n\\n        // Mint the token\\n        _mint(msg.sender, tokenId, true, \\\"\\\");\\n\\n        (bool success, ) = recipient.call{ value: msg.value }(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        return tokenId;\\n    }\\n\\n    // Keeping the original mintLoogie for backwards compatibility\\n    function mintLoogie(address to) public returns (bytes32) {\\n        _tokenIds += 1;\\n        bytes32 tokenId = bytes32(uint256(_tokenIds));\\n        _tokenIdExists[_tokenIds] = true;\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                tokenId,\\n                blockhash(block.number - 1),\\n                to,\\n                address(this)\\n            )\\n        );\\n        \\n        // Generate token attributes from random seed\\n        color[tokenId] =\\n            bytes2(predictableRandom[0]) |\\n            (bytes2(predictableRandom[1]) >> 8) |\\n            (bytes3(predictableRandom[2]) >> 16);\\n        chubbiness[tokenId] =\\n            35 + ((55 * uint256(uint8(predictableRandom[3]))) / 255);\\n        mouthLength[tokenId] =\\n            180 + ((uint256(chubbiness[tokenId] / 4) * uint256(uint8(predictableRandom[4]))) / 255);\\n\\n        // Randomly assign loogie type\\n        uint256 typeIndex = uint256(uint8(predictableRandom[5])) % 5;\\n        if (typeIndex == 0) loogieType[tokenId] = \\\"green\\\";\\n        else if (typeIndex == 1) loogieType[tokenId] = \\\"blue\\\";\\n        else if (typeIndex == 2) loogieType[tokenId] = \\\"red\\\";\\n        else if (typeIndex == 3) loogieType[tokenId] = \\\"purple\\\";\\n        else loogieType[tokenId] = \\\"yellow\\\";\\n            \\n        // Set default UP username\\n        upUsernames[tokenId] = \\\"luksonaut\\\";\\n\\n        // Mint the token\\n        _mint(to, tokenId, true, \\\"\\\");\\n        \\n        return tokenId;\\n    }\\n\\n    // Add function to set UP username for a token\\n    function setUPUsername(bytes32 tokenId, string memory username) public {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        require(tokenOwner == msg.sender || isUniversalProfile(tokenOwner), \\\"LSP8: Not authorized\\\");\\n        upUsernames[tokenId] = username;\\n    }\\n\\n    // Helper function to check if a token exists by its uint256 ID\\n    function tokenExists(uint256 id) public view returns (bool) {\\n        return _tokenIdExists[id];\\n    }\\n    \\n    // Check if an address is likely a Universal Profile\\n    function isUniversalProfile(address account) public view returns (bool) {\\n        // Using a try-catch because the call might revert on non-contract addresses\\n        try IERC165(account).supportsInterface(_INTERFACEID_LSP0) returns (bool supportsLSP0) {\\n            if (supportsLSP0) {\\n                try IERC165(account).supportsInterface(_INTERFACEID_LSP1) returns (bool supportsLSP1) {\\n                    return supportsLSP1; // If it supports both LSP0 and LSP1, it's likely a UP\\n                } catch {\\n                    return false;\\n                }\\n            }\\n            return false;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // Override supportsInterface to support both LSP8 standard interface IDs\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return \\n            interfaceId == _INTERFACEID_LSP8 || // New LSP8 interface ID\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    // Override _getDataForTokenId to return token-specific metadata in LSP4 format\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual override returns (bytes memory dataValues) {\\n        // Only override for LSP4 metadata key\\n        if (dataKey != _LSP4_METADATA_KEY) {\\n            return super._getDataForTokenId(tokenId, dataKey);\\n        }\\n        \\n        // Get token attributes\\n        string memory username = upUsernames[tokenId];\\n        bytes3 colorValue = color[tokenId];\\n        uint256 chubbinessValue = chubbiness[tokenId];\\n        uint256 mouthLengthValue = mouthLength[tokenId];\\n        string memory loogieTypeValue = loogieType[tokenId];\\n        \\n        // Get metadata from the OnChainLoogiesMetadata contract\\n        (bytes memory rawMetadata, bytes memory encodedMetadata) = loogiesMetadata.getLoogieMetadata(\\n            tokenId,\\n            loogieTypeValue,\\n            colorValue,\\n            chubbinessValue,\\n            mouthLengthValue,\\n            username\\n        );\\n        \\n        // Use standard LUKSO verification format\\n        bytes memory verifiableURI = bytes.concat(\\n            hex\\\"00006f357c6a0020\\\",\\n            keccak256(rawMetadata),\\n            encodedMetadata\\n        );\\n        \\n        return verifiableURI;\\n    }\\n    \\n    // Update collection metadata with proper LSP4 format\\n    function updateCollectionMetadata() public {\\n        require(msg.sender == owner(), \\\"LSP8: Not authorized\\\");\\n        _updateCollectionMetadata();\\n    }\\n    \\n    // Internal function to update collection metadata\\n    function _updateCollectionMetadata() internal {\\n        // Get collection metadata from the OnChainLoogiesMetadata contract\\n        (bytes memory rawMetadata, bytes memory encodedMetadata) = loogiesMetadata.getCollectionMetadata();\\n        \\n        // Set collection metadata using the LUKSO verification format\\n        _setData(_LSP4_METADATA_KEY, bytes.concat(\\n            hex\\\"00006f357c6a0020\\\",\\n            keccak256(rawMetadata),\\n            encodedMetadata\\n        ));\\n    }\\n} \",\"keccak256\":\"0x2d16a874fe5914bf429598371cd3299a8c492819b72f64ca81efac9b1f6bcda8\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 3617,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_store",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_bytes_storage)"
          },
          {
            "astId": 2066,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_existingTokens",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2070,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_tokenOwners",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_address)"
          },
          {
            "astId": 2075,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_struct(Bytes32Set)5434_storage)"
          },
          {
            "astId": 2080,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_operators",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_bytes32,t_struct(AddressSet)5555_storage)"
          },
          {
            "astId": 6675,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "loogiesMetadata",
            "offset": 0,
            "slot": "6",
            "type": "t_contract(OnChainLoogiesMetadata)6663"
          },
          {
            "astId": 6677,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_tokenIds",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6681,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "color",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_bytes3)"
          },
          {
            "astId": 6685,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "chubbiness",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 6689,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "mouthLength",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 6693,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "loogieType",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_bytes32,t_string_storage)"
          },
          {
            "astId": 6697,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "_tokenIdExists",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_uint256,t_bool)"
          },
          {
            "astId": 6701,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "upUsernames",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes32,t_string_storage)"
          },
          {
            "astId": 6716,
            "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
            "label": "price",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_bytes32)dyn_storage": {
            "base": "t_bytes32",
            "encoding": "dynamic_array",
            "label": "bytes32[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes3": {
            "encoding": "inplace",
            "label": "bytes3",
            "numberOfBytes": "3"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "encoding": "bytes",
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(OnChainLoogiesMetadata)6663": {
            "encoding": "inplace",
            "label": "contract OnChainLoogiesMetadata",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_struct(Bytes32Set)5434_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct EnumerableSet.Bytes32Set)",
            "numberOfBytes": "32",
            "value": "t_struct(Bytes32Set)5434_storage"
          },
          "t_mapping(t_bytes32,t_address)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_bytes32,t_bytes3)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes3)",
            "numberOfBytes": "32",
            "value": "t_bytes3"
          },
          "t_mapping(t_bytes32,t_bytes_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes)",
            "numberOfBytes": "32",
            "value": "t_bytes_storage"
          },
          "t_mapping(t_bytes32,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_bytes32,t_struct(AddressSet)5555_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
            "numberOfBytes": "32",
            "value": "t_struct(AddressSet)5555_storage"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_bool)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(AddressSet)5555_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.AddressSet",
            "members": [
              {
                "astId": 5554,
                "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)5240_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Bytes32Set)5434_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.Bytes32Set",
            "members": [
              {
                "astId": 5433,
                "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
                "label": "_inner",
                "offset": 0,
                "slot": "0",
                "type": "t_struct(Set)5240_storage"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Set)5240_storage": {
            "encoding": "inplace",
            "label": "struct EnumerableSet.Set",
            "members": [
              {
                "astId": 5235,
                "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
                "label": "_values",
                "offset": 0,
                "slot": "0",
                "type": "t_array(t_bytes32)dyn_storage"
              },
              {
                "astId": 5239,
                "contract": "contracts/LSP8LoogiesFixed.sol:LSP8LoogiesFixed",
                "label": "_indexes",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_uint256)"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "errors": {
          "LSP8BatchCallFailed(uint256)": [
            {
              "notice": "Batch call failed."
            }
          ],
          "LSP8TokenContractCannotHoldValue()": [
            {
              "notice": "LSP8 contract cannot receive native tokens."
            }
          ]
        },
        "events": {
          "DataChanged(bytes32,bytes)": {
            "notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`."
          }
        },
        "kind": "user",
        "methods": {
          "batchCalls(bytes[])": {
            "notice": "Executing the following batch of abi-encoded function calls on the contract: `data`."
          },
          "getData(bytes32)": {
            "notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`."
          },
          "getDataBatch(bytes32[])": {
            "notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`."
          },
          "getDataBatchForTokenIds(bytes32[],bytes32[])": {
            "notice": "Retrieves data in batch for multiple `tokenId` and `dataKey` pairs."
          },
          "getDataForTokenId(bytes32,bytes32)": {
            "notice": "Retrieves data for a specific `tokenId` and `dataKey`."
          },
          "setData(bytes32,bytes)": {
            "notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`."
          },
          "setDataBatch(bytes32[],bytes[])": {
            "notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`."
          },
          "setDataBatchForTokenIds(bytes32[],bytes32[],bytes[])": {
            "notice": "Sets data in batch for multiple `tokenId` and `dataKey` pairs."
          },
          "setDataForTokenId(bytes32,bytes32,bytes)": {
            "notice": "Sets data for a specific `tokenId` and `dataKey`."
          }
        },
        "notice": "A fixed version that follows the Beans.sol pattern with the OnChainMetadata structure, proper SVG rendering, and numeric attributes in token metadata",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@erc725/smart-contracts-v8/contracts/constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ERC165 INTERFACE IDs\\nbytes4 constant _INTERFACEID_ERC725X = 0x7545acac;\\nbytes4 constant _INTERFACEID_ERC725Y = 0x629aa694;\\n\\n// ERC725X OPERATION TYPES\\nuint256 constant OPERATION_0_CALL = 0;\\nuint256 constant OPERATION_1_CREATE = 1;\\nuint256 constant OPERATION_2_CREATE2 = 2;\\nuint256 constant OPERATION_3_STATICCALL = 3;\\nuint256 constant OPERATION_4_DELEGATECALL = 4;\\n\"\n    },\n    \"@erc725/smart-contracts-v8/contracts/ERC725Y.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {IERC725Y} from \\\"./interfaces/IERC725Y.sol\\\";\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_ERC725Y} from \\\"./constants.sol\\\";\\n\\n// errors\\nimport {\\n    ERC725Y_MsgValueDisallowed,\\n    ERC725Y_DataKeysValuesLengthMismatch,\\n    ERC725Y_DataKeysValuesEmptyArray,\\n    OwnableCannotSetZeroAddressAsOwner\\n} from \\\"./errors.sol\\\";\\n\\n/**\\n * @title Deployable implementation with `constructor` of ERC725Y sub-standard, a generic data key/value store.\\n * @author Fabian Vogelsteller <fabian@lukso.network> and <CJ42>, <YamenMerhi>, <B00ste>, <SkimaHarvey>\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ncontract ERC725Y is Ownable, ERC165, IERC725Y {\\n    /**\\n     * @dev Map `bytes32` data keys to their `bytes` data values.\\n     */\\n    mapping(bytes32 => bytes) internal _store;\\n\\n    /**\\n     * @notice Deploying an ERC725Y smart contract and setting address `initialOwner` as the contract owner.\\n     * @dev Deploy a new ERC725Y contract with the provided `initialOwner` as the contract {owner}.\\n     * @param initialOwner the owner of the contract.\\n     *\\n     * @custom:requirements\\n     * - `initialOwner` CANNOT be the zero address.\\n     */\\n    constructor(address initialOwner) payable {\\n        if (initialOwner == address(0)) {\\n            revert OwnableCannotSetZeroAddressAsOwner();\\n        }\\n        Ownable._transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getData(dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        dataValues = new bytes[](dataKeys.length);\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            dataValues[i] = _getData(dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner}.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value\\n     * (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**.\\n     * If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\\n     *\\n     * @custom:events {DataChanged} event.\\n     */\\n    function setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public payable virtual override onlyOwner {\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setData(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC725Y\\n     * @custom:requirements\\n     * - SHOULD only be callable by the {owner} of the contract.\\n     *\\n     * @custom:warning\\n     * **Note for developers:** despite the fact that this function is set as `payable`, the function is not intended to receive value\\n     * (= native tokens). **An additional check has been implemented to ensure that `msg.value` sent was equal to 0**.\\n     * If you want to allow this function to receive value in your inheriting contract, this function can be overriden to remove this check.\\n     *\\n     * @custom:events {DataChanged} event **for each data key/value pair set**.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public payable virtual override onlyOwner {\\n        /// @dev do not allow to send value by default when setting data in ERC725Y\\n        if (msg.value != 0) revert ERC725Y_MsgValueDisallowed();\\n        _setDataBatch(dataKeys, dataValues);\\n    }\\n\\n    /**\\n     * @dev Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\\n     * represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to read the associated `bytes` value from the store.\\n     * @return dataValue The `bytes` value associated with the given `dataKey` in the ERC725Y storage.\\n     */\\n    function _getData(\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValue) {\\n        return _store[dataKey];\\n    }\\n\\n    /**\\n     * @dev Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\\n     * `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKey A bytes32 data key to write the associated `bytes` value to the store.\\n     * @param dataValue The `bytes` value to associate with the given `dataKey` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted after a successful `setData` call.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[dataKey] = dataValue;\\n        emit DataChanged(dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Write a set of `dataValues` to the underlying ERC725Y storage for each associated `dataKeys`. The ERC725Y storage is\\n     * represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\\n     *\\n     * ```solidity\\n     * mapping(bytes32 => bytes) _store\\n     * ```\\n     *\\n     * @param dataKeys A bytes32 array of data keys to write the associated `bytes` value to the store.\\n     * @param dataValues The `bytes` values to associate with each given `dataKeys` in the ERC725Y storage.\\n     *\\n     * @custom:events {DataChanged} event emitted for each successful data key-value pairs set.\\n     */\\n    function _setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) internal virtual {\\n        if (dataKeys.length != dataValues.length) {\\n            revert ERC725Y_DataKeysValuesLengthMismatch();\\n        }\\n\\n        if (dataKeys.length == 0) {\\n            revert ERC725Y_DataKeysValuesEmptyArray();\\n        }\\n\\n        for (uint256 i = 0; i < dataKeys.length; ) {\\n            _setData(dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ERC165\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_ERC725Y ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\n    },\n    \"@erc725/smart-contracts-v8/contracts/errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to send more native tokens `value` than available in current `balance`.\\n * @param balance The balance of native tokens of the ERC725X smart contract.\\n * @param value The amount of native tokens sent via `ERC725X.execute(...)`/`ERC725X.executeBatch(...)` that is greater than the contract's `balance`.\\n */\\nerror ERC725X_InsufficientBalance(uint256 balance, uint256 value);\\n\\n/**\\n * @dev Reverts when the `operationTypeProvided` is none of the default operation types available.\\n * (CALL = 0; CREATE = 1; CREATE2 = 2; STATICCALL = 3; DELEGATECALL = 4)\\n * @param operationTypeProvided The unrecognised operation type number provided to `ERC725X.execute(...)`/`ERC725X.executeBatch(...)`.\\n */\\nerror ERC725X_UnknownOperationType(uint256 operationTypeProvided);\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `staticcall` (`operationType == 3`).\\n * Sending native tokens via `staticcall` is not allowed because it is a state changing operation.\\n */\\nerror ERC725X_MsgValueDisallowedInStaticCall();\\n\\n/**\\n * @dev Reverts when trying to send native tokens (`value` / `values[]` parameter of {execute} or {executeBatch} functions) while making a `delegatecall` (`operationType == 4`).\\n * Sending native tokens via `staticcall` is not allowed because `msg.value` is persisting.\\n */\\nerror ERC725X_MsgValueDisallowedInDelegateCall();\\n\\n/**\\n * @dev Reverts when passing a `to` address that is not `address(0)` (= address zero) while deploying a contract via {execute} or {executeBatch} functions.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_CreateOperationsRequireEmptyRecipientAddress();\\n\\n/**\\n * @dev Reverts when contract deployment failed via {execute} or {executeBatch} functions,\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_ContractDeploymentFailed();\\n\\n/**\\n * @dev Reverts when no contract bytecode was provided as parameter when trying to deploy a contract via {execute} or {executeBatch}.\\n * This error can occur using either operation type 1 (`CREATE`) or 2 (`CREATE2`).\\n */\\nerror ERC725X_NoContractBytecodeProvided();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `operationTypes`, `targets` addresses, `values`, and `datas`\\n * array parameters provided when calling the {executeBatch} function.\\n */\\nerror ERC725X_ExecuteParametersLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to the {executeBatch} function is an empty array.\\n */\\nerror ERC725X_ExecuteParametersEmptyArray();\\n\\n/**\\n * @dev Reverts when there is not the same number of elements in the `datakeys` and `dataValues`\\n * array parameters provided when calling the {setDataBatch} function.\\n */\\nerror ERC725Y_DataKeysValuesLengthMismatch();\\n\\n/**\\n * @dev Reverts when one of the array parameter provided to {setDataBatch} function is an empty array.\\n */\\nerror ERC725Y_DataKeysValuesEmptyArray();\\n\\n/**\\n * @dev Reverts when sending value to the {setData} or {setDataBatch} function.\\n */\\nerror ERC725Y_MsgValueDisallowed();\\n\\n/**\\n * @dev Reverts when trying to set `address(0)` as the contract owner when deploying the contract or initializing it.\\n */\\nerror OwnableCannotSetZeroAddressAsOwner();\\n\"\n    },\n    \"@erc725/smart-contracts-v8/contracts/interfaces/IERC725Y.sol\": {\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\"\n    },\n    \"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\": {\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity ^0.8.0;\\n\\n// interfaces\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @title The interface for ERC725Y sub-standard, a generic data key/value store.\\n * @dev ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time.\\n * It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.\\n */\\ninterface IERC725Y is IERC165 {\\n    /**\\n     * @notice The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.\\n     * @dev Emitted when data at a specific `dataKey` was changed to a new value `dataValue`.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event DataChanged(bytes32 indexed dataKey, bytes dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`.\\n     * @param dataKey The data key for which to retrieve the value.\\n     * @return dataValue The bytes value stored under the specified data key.\\n     */\\n    function getData(\\n        bytes32 dataKey\\n    ) external view returns (bytes memory dataValue);\\n\\n    /**\\n     * @notice Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.\\n     * @dev Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`.\\n     * @param dataKeys The array of keys which values to retrieve\\n     * @return dataValues The array of data stored at multiple keys\\n     */\\n    function getDataBatch(\\n        bytes32[] memory dataKeys\\n    ) external view returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.\\n     *\\n     * @dev Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`.\\n     * The function is marked as payable to enable flexibility on child contracts. For instance to implement\\n     * a fee mechanism for setting specific data.\\n     *\\n     * @param dataKey The data key for which to set a new value.\\n     * @param dataValue The new bytes value to set.\\n     */\\n    function setData(bytes32 dataKey, bytes memory dataValue) external payable;\\n\\n    /**\\n     * @notice Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.\\n     *\\n     * @dev Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.\\n     *\\n     * @param dataKeys An array of data keys to set bytes values for.\\n     * @param dataValues An array of bytes values to set for each `dataKeys`.\\n     */\\n    function setDataBatch(\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external payable;\\n}\\n\"\n    },\n    \"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP1 - Universal Receiver standard, an entry function for a contract to receive arbitrary information.\\n * @dev LSP1UniversalReceiver allows to receive arbitrary messages and to be informed when assets are sent or received.\\n */\\ninterface ILSP1UniversalReceiver {\\n    /**\\n     * @dev Emitted when the {universalReceiver} function was called with a specific `typeId` and some `receivedData`\\n     * @notice Address `from` called the `universalReceiver(...)` function while sending `value` LYX. Notification type (typeId): `typeId` - Data received: `receivedData`.\\n     *\\n     * @param from The address of the EOA or smart contract that called the {universalReceiver(...)} function.\\n     * @param value The amount sent to the {universalReceiver(...)} function.\\n     * @param typeId A `bytes32` unique identifier (= _\\\"hook\\\"_) that describe the type of notification, information or transaction received by the contract. Can be related to a specific standard or a hook.\\n     * @param receivedData Any arbitrary data that was sent to the {universalReceiver(...)} function.\\n     * @param returnedValue The value returned by the {universalReceiver(...)} function.\\n     */\\n    event UniversalReceiver(\\n        address indexed from,\\n        uint256 indexed value,\\n        bytes32 indexed typeId,\\n        bytes receivedData,\\n        bytes returnedValue\\n    );\\n\\n    /**\\n     * @dev Generic function that can be used to notify the contract about specific incoming transactions or events like asset transfers, vault transfers, etc. Allows for custom on-chain and off-chain reactions based on the `typeId` and `data`.\\n     * @notice Reacted on received notification with `typeId` & `data`.\\n     *\\n     * @param typeId The hash of a specific standard or a hook.\\n     * @param data The arbitrary data received with the call.\\n     *\\n     * @custom:events {UniversalReceiver} event.\\n     */\\n    function universalReceiver(\\n        bytes32 typeId,\\n        bytes calldata data\\n    ) external payable returns (bytes memory);\\n}\\n\"\n    },\n    \"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP1 = 0x6bb56a14;\\nbytes4 constant _INTERFACEID_LSP1_DELEGATE = 0xa245bbda;\\n\\n// --- ERC725Y Data Keys\\n\\n// bytes10(keccak256('LSP1UniversalReceiverDelegate'))\\nbytes10 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX = 0x0cfc51aec37c55a4d0b1;\\n\\n// keccak256('LSP1UniversalReceiverDelegate')\\nbytes32 constant _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY = 0x0cfc51aec37c55a4d0b1a65c6255c4bf2fbdf6277f3cc0730c45b828b6db8b47;\\n\"\n    },\n    \"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// libraries\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {ILSP1UniversalReceiver as ILSP1} from \\\"./ILSP1UniversalReceiver.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY,\\n    _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX\\n} from \\\"./LSP1Constants.sol\\\";\\n\\n/**\\n * @title LSP1 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP1Utils is a library of utility functions that can be used to notify the `universalReceiver` function of a contract\\n * that implements LSP1 and retrieve information related to LSP1 `typeId`.\\n * Based on LSP1 Universal Receiver standard.\\n */\\nlibrary LSP1Utils {\\n    using ERC165Checker for address;\\n\\n    /**\\n     * @dev Notify a contract at `lsp1Implementation` address by calling its `universalReceiver` function if this contract\\n     * supports the LSP1 interface.\\n     *\\n     * @param lsp1Implementation The address of the contract to notify.\\n     * @param typeId A `bytes32` typeId.\\n     * @param data Any optional data to send to the `universalReceiver` function to the `lsp1Implementation` address.\\n     */\\n    function notifyUniversalReceiver(\\n        address lsp1Implementation,\\n        bytes32 typeId,\\n        bytes memory data\\n    ) internal {\\n        if (\\n            lsp1Implementation.supportsERC165InterfaceUnchecked(\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(lsp1Implementation).universalReceiver(typeId, data);\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate` data key.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate` data key.\\n     */\\n    function getLSP1DelegateValue(\\n        mapping(bytes32 => bytes) storage erc725YStorage\\n    ) internal view returns (bytes memory) {\\n        return erc725YStorage[_LSP1_UNIVERSAL_RECEIVER_DELEGATE_KEY];\\n    }\\n\\n    /**\\n     * @notice Retrieving the value stored under the ERC725Y data key `LSP1UniversalReceiverDelegate:<type-id>` for a specific `typeId`.\\n     *\\n     * @dev Query internally the ERC725Y storage of a `ERC725Y` smart contract to retrieve\\n     * the value set under the `LSP1UniversalReceiverDelegate:<bytes32>` data key for a specific LSP1 `typeId`.\\n     *\\n     * @param erc725YStorage A reference to the ERC725Y storage mapping of the contract.\\n     * @param typeId A bytes32 LSP1 `typeId`;\\n     * @return The bytes value stored under the `LSP1UniversalReceiverDelegate:<bytes32>` data key.\\n     */\\n    function getLSP1DelegateValueForTypeId(\\n        mapping(bytes32 => bytes) storage erc725YStorage,\\n        bytes32 typeId\\n    ) internal view returns (bytes memory) {\\n        bytes32 lsp1TypeIdDataKey = LSP2Utils.generateMappingKey(\\n            _LSP1_UNIVERSAL_RECEIVER_DELEGATE_PREFIX,\\n            bytes20(typeId)\\n        );\\n        return erc725YStorage[lsp1TypeIdDataKey];\\n    }\\n}\\n\"\n    },\n    \"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\n\\n// bytes4(keccack256(\\\"LSP17Extendable\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENDABLE = 0xa918fa6b;\\n\\n// bytes4(keccack256(\\\"LSP17Extension\\\"))\\nbytes4 constant _INTERFACEID_LSP17_EXTENSION = 0xcee78b40;\\n\\n// --- ERC725Y Data Keys\\n\\n// Extension Handler Prefix\\n\\n// bytes10(keccak256('LSP17Extension'))\\nbytes10 constant _LSP17_EXTENSION_PREFIX = 0xcee78b4094da86011096;\\n\"\n    },\n    \"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev reverts when there is no extension for the function selector being called with\\n */\\nerror NoExtensionFoundForFunctionSelector(bytes4 functionSelector);\\n\\n/**\\n * @dev reverts when the contract is called with a function selector not valid (less than 4 bytes of data)\\n */\\nerror InvalidFunctionSelector(bytes data);\\n\\n/**\\n * @dev reverts when the bytes retrieved from the LSP17 data key is not a valid address (not 20 bytes)\\n */\\nerror InvalidExtensionAddress(bytes storedData);\\n\"\n    },\n    \"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\n// constants\\nimport {_INTERFACEID_LSP17_EXTENDABLE} from \\\"./LSP17Constants.sol\\\";\\n\\n// errors\\nimport {NoExtensionFoundForFunctionSelector} from \\\"./LSP17Errors.sol\\\";\\n\\n/**\\n * @title Module to add more functionalities to a contract using extensions.\\n *\\n * @dev Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard.\\n * This module can be inherited to extend the functionality of the parent contract when\\n * calling a function that doesn't exist on the parent contract via forwarding the call\\n * to an extension mapped to the function selector being called, set originally by the parent contract\\n */\\nabstract contract LSP17Extendable is ERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP17_EXTENDABLE ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns whether the interfaceId being checked is supported in the extension of the\\n     * {supportsInterface} selector.\\n     *\\n     * To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\\n     * supported by reading whether the interfaceId queried is supported in the `supportsInterface`\\n     * extension if the extension is set, if not it returns false.\\n     */\\n    function _supportsInterfaceInERC165Extension(\\n        bytes4 interfaceId\\n    ) internal view virtual returns (bool) {\\n        (address erc165Extension, ) = _getExtensionAndForwardValue(\\n            ERC165.supportsInterface.selector\\n        );\\n        if (erc165Extension == address(0)) return false;\\n\\n        return\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                erc165Extension,\\n                interfaceId\\n            );\\n    }\\n\\n    /**\\n     * @dev Returns the extension mapped to a specific function selector\\n     * If no extension was found, return the address(0)\\n     * To be overridden.\\n     * Up to the implementer contract to return an extension based on a function selector\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual returns (address, bool);\\n\\n    /**\\n     * @dev Forwards the call to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the `address(0)` will be returned.\\n     * Forwards the value if the extension is payable.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.\\n     *\\n     * @custom:hint This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\\n     * If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\\n     *\\n     * ```solidity\\n     * (bool success, bytes memory result) = extension.call{value: msg.value}(\\n     *     abi.encodePacked(callData, msg.sender, msg.value)\\n     * );\\n     * ```\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual returns (bytes memory) {\\n        // If there is a function selector\\n        (\\n            address extension,\\n            bool shouldForwardValue\\n        ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{\\n            value: shouldForwardValue ? msg.value : 0\\n        }(abi.encodePacked(callData, msg.sender, msg.value));\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// interfaces\\nimport {\\n    IERC725Y\\n} from \\\"@erc725/smart-contracts/contracts/interfaces/IERC725Y.sol\\\";\\n\\n/**\\n * @title LSP2 Utility library.\\n * @author Jean Cavallera <CJ42>, Yamen Merhi <YamenMerhi>, Daniel Afteni <B00ste>\\n * @dev LSP2Utils is a library of utility functions that can be used to encode data key of different key type\\n * defined on the LSP2 standard.\\n * Based on LSP2 ERC725Y JSON Schema standard.\\n */\\nlibrary LSP2Utils {\\n    /**\\n     * @dev Generates a data key of keyType Singleton by hashing the string `keyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"keyName\\\")\\n     * ```\\n     *\\n     * @param keyName The string to hash to generate a Singleton data key.\\n     *\\n     * @return The generated `bytes32` data key of key type Singleton.\\n     */\\n    function generateSingletonKey(\\n        string memory keyName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(keyName));\\n    }\\n\\n    /**\\n     * @dev Generates a data key of keyType Array by hashing `arrayKeyName`. As:\\n     *\\n     * ```\\n     * keccak256(\\\"arrayKeyName[]\\\")\\n     * ```\\n     *\\n     * @param arrayKeyName The string that will be used to generate a data key of key type Array.\\n     *\\n     * @return The generated `bytes32` data key of key type Array.\\n     *\\n     * @custom:requirements\\n     * - The `keyName` must include at the end of the string the square brackets `\\\"[]\\\"`.\\n     */\\n    function generateArrayKey(\\n        string memory arrayKeyName\\n    ) internal pure returns (bytes32) {\\n        bytes memory dataKey = bytes(arrayKeyName);\\n        require(dataKey.length >= 2, \\\"MUST be longer than 2 characters\\\");\\n        require(\\n            dataKey[dataKey.length - 2] == 0x5b && // \\\"[\\\" in utf8 encoded\\n                dataKey[dataKey.length - 1] == 0x5d, // \\\"]\\\" in utf8\\n            \\\"Missing empty square brackets '[]' at the end of the key name\\\"\\n        );\\n\\n        return keccak256(dataKey);\\n    }\\n\\n    /**\\n     * @dev Generates an Array data key at a specific `index` by concatenating together the first 16 bytes of `arrayKey`\\n     * with the 16 bytes of `index`. As:\\n     *\\n     * ```\\n     * arrayKey[index]\\n     * ```\\n     *\\n     * @param arrayKey The Array data key from which to generate the Array data key at a specific `index`.\\n     * @param index The index number in the `arrayKey`.\\n     *\\n     * @return The generated `bytes32` data key of key type Array at a specific `index`.\\n     */\\n    function generateArrayElementKeyAtIndex(\\n        bytes32 arrayKey,\\n        uint128 index\\n    ) internal pure returns (bytes32) {\\n        bytes memory elementInArray = bytes.concat(\\n            bytes16(arrayKey),\\n            bytes16(index)\\n        );\\n        return bytes32(elementInArray);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to `lastWord`. This is done by hashing two strings words `firstWord` and `lastWord`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:bytes20(lastWordHash)\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param lastWord The word to retrieve the first 10 bytes of its hash.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific `lastWord`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        string memory lastWord\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 lastWordHash = keccak256(bytes(lastWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(lastWordHash)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generates a data key of key type Mapping that map `firstWord` to an address `addr`.\\n     * This is done by hashing the string word `firstWord` and concatenating its first 10 bytes with `addr`. As:\\n     *\\n     * ```\\n     * bytes10(firstWordHash):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 10 bytes of its hash.\\n     * @param addr An address to map `firstWord` to.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map `firstWord` to a specific address `addr`.\\n     */\\n    function generateMappingKey(\\n        string memory firstWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes10(firstWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type Mapping that map a 10 bytes `keyPrefix` to a `bytes20Value`. As:\\n     *\\n     * ```\\n     * keyPrefix:bytes20Value\\n     * ```\\n     *\\n     * @param keyPrefix The first part of the data key of key type Mapping.\\n     * @param bytes20Value The second part of the data key of key type Mapping.\\n     *\\n     * @return The generated `bytes32` data key of key type Mapping that map a `keyPrefix` to a specific `bytes20Value`.\\n     */\\n    function generateMappingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping by using two strings `firstWord`\\n     * mapped to a `secondWord` mapped itself to a specific address `addr`. As:\\n     *\\n     * ```\\n     * bytes6(keccak256(\\\"firstWord\\\")):bytes4(keccak256(\\\"secondWord\\\")):0000:<address>\\n     * ```\\n     *\\n     * @param firstWord The word to retrieve the first 6 bytes of its hash.\\n     * @param secondWord The word to retrieve the first 4 bytes of its hash.\\n     * @param addr The address that makes the last part of the MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `firstWord` to a `secondWord` to a specific address `addr`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        string memory firstWord,\\n        string memory secondWord,\\n        address addr\\n    ) internal pure returns (bytes32) {\\n        bytes32 firstWordHash = keccak256(bytes(firstWord));\\n        bytes32 secondWordHash = keccak256(bytes(secondWord));\\n\\n        bytes memory temporaryBytes = bytes.concat(\\n            bytes6(firstWordHash),\\n            bytes4(secondWordHash),\\n            bytes2(0),\\n            bytes20(addr)\\n        );\\n\\n        return bytes32(temporaryBytes);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a `keyPrefix` to an other `mapPrefix` to a specific `subMapKey`. As:\\n     *\\n     * ```\\n     * keyPrefix:mapPrefix:0000:subMapKey\\n     * ```\\n     *\\n     * @param keyPrefix The first part (6 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param mapPrefix The second part (4 bytes) of the data key of keyType MappingWithGrouping.\\n     * @param subMapKey The last part (bytes20) of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix` to a `mapPrefix` to a specific `subMapKey`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes6 keyPrefix,\\n        bytes4 mapPrefix,\\n        bytes20 subMapKey\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            mapPrefix,\\n            bytes2(0),\\n            subMapKey\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a data key of key type MappingWithGrouping that map a 10 bytes `keyPrefix` to a specific `bytes20Value`. As:\\n     *\\n     * @param keyPrefix The first part of the data key of keyType MappingWithGrouping.\\n     * @param bytes20Value The last of the data key of keyType MappingWithGrouping.\\n     *\\n     * @return The generated `bytes32` data key of key type MappingWithGrouping that map a `keyPrefix`\\n     * (containing the first and second mapped word) to a specific `bytes20Value`.\\n     */\\n    function generateMappingWithGroupingKey(\\n        bytes10 keyPrefix,\\n        bytes20 bytes20Value\\n    ) internal pure returns (bytes32) {\\n        bytes memory generatedKey = bytes.concat(\\n            keyPrefix,\\n            bytes2(0),\\n            bytes20Value\\n        );\\n        return bytes32(generatedKey);\\n    }\\n\\n    /**\\n     * @dev Generate a JSONURL value content.\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param json Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     */\\n    function generateJSONURLValue(\\n        string memory hashFunction,\\n        string memory json,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(json));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Generate a ASSETURL value content.\\n     *\\n     * @param hashFunction The function used to hash the JSON file.\\n     * @param assetBytes Bytes value of the JSON file.\\n     * @param url The URL where the JSON file is hosted.\\n     *\\n     * @return The encoded value as an `ASSETURL`.\\n     */\\n    function generateASSETURLValue(\\n        string memory hashFunction,\\n        string memory assetBytes,\\n        string memory url\\n    ) internal pure returns (bytes memory) {\\n        bytes32 hashFunctionDigest = keccak256(bytes(hashFunction));\\n        bytes32 jsonDigest = keccak256(bytes(assetBytes));\\n\\n        return abi.encodePacked(bytes4(hashFunctionDigest), jsonDigest, url);\\n    }\\n\\n    /**\\n     * @dev Verify if `data` is a valid array of value encoded as a `CompactBytesArray` according to the LSP2 `CompactBytesArray` valueType specification.\\n     *\\n     * @param compactBytesArray The bytes value to verify.\\n     *\\n     * @return `true` if the `data` is correctly encoded CompactBytesArray, `false` otherwise.\\n     */\\n    function isCompactBytesArray(\\n        bytes memory compactBytesArray\\n    ) internal pure returns (bool) {\\n        /**\\n         * Pointer will always land on these values:\\n         *\\n         * ↓↓↓↓\\n         * 0003 a00000\\n         * 0005 fff83a0011\\n         * 0020 aa0000000000000000000000000000000000000000000000000000000000cafe\\n         * 0012 bb000000000000000000000000000000beef\\n         * 0019 cc00000000000000000000000000000000000000000000deed\\n         * ↑↑↑↑\\n         *\\n         * The pointer can only land on the length of the following bytes value.\\n         */\\n        uint256 pointer = 0;\\n\\n        /**\\n         * Check each length byte and make sure that when you reach the last length byte.\\n         * Make sure that the last length describes exactly the last bytes value and you do not get out of bounds.\\n         */\\n        while (pointer < compactBytesArray.length) {\\n            if (pointer + 1 >= compactBytesArray.length) return false;\\n            uint256 elementLength = uint16(\\n                bytes2(\\n                    abi.encodePacked(\\n                        compactBytesArray[pointer],\\n                        compactBytesArray[pointer + 1]\\n                    )\\n                )\\n            );\\n            pointer += elementLength + 2;\\n        }\\n        if (pointer == compactBytesArray.length) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Validates if the bytes `arrayLength` are exactly 16 bytes long, and are of the exact size of an LSP2 Array length value\\n     *\\n     * @param arrayLength Plain bytes that should be validated.\\n     *\\n     * @return `true` if the value is 16 bytes long, `false` otherwise.\\n     */\\n    function isValidLSP2ArrayLengthValue(\\n        bytes memory arrayLength\\n    ) internal pure returns (bool) {\\n        if (arrayLength.length == 16) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing the last element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeLastElementFromArrayAndMap(\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        pure\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](3);\\n        dataValues = new bytes[](3);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Generates Data Key/Value pairs for removing an element from an LSP2 Array and a mapping Data Key.\\n     *\\n     * @custom:info The function assumes that the Data Value stored under the mapping Data Key is of length 20 where the last 16 bytes are the index of the element in the array.\\n     *\\n     * @param erc725YContract The ERC725Y contract.\\n     * @param arrayKey The Data Key of Key Type Array.\\n     * @param newArrayLength The new Array Length for the `arrayKey`.\\n     * @param removedElementIndexKey The Data Key of Key Type Array Index for the removed element.\\n     * @param removedElementIndex the index of the removed element.\\n     * @param removedElementMapKey The Data Key of a mapping to be removed.\\n     */\\n    function removeElementFromArrayAndMap(\\n        IERC725Y erc725YContract,\\n        bytes32 arrayKey,\\n        uint128 newArrayLength,\\n        bytes32 removedElementIndexKey,\\n        uint128 removedElementIndex,\\n        bytes32 removedElementMapKey\\n    )\\n        internal\\n        view\\n        returns (bytes32[] memory dataKeys, bytes[] memory dataValues)\\n    {\\n        dataKeys = new bytes32[](5);\\n        dataValues = new bytes[](5);\\n\\n        // store the number of received assets decremented by 1\\n        dataKeys[0] = arrayKey;\\n        dataValues[0] = abi.encodePacked(newArrayLength);\\n\\n        // remove the data value for the map key of the element\\n        dataKeys[1] = removedElementMapKey;\\n        dataValues[1] = \\\"\\\";\\n\\n        // Generate the key of the last element in the array\\n        bytes32 lastElementIndexKey = LSP2Utils.generateArrayElementKeyAtIndex(\\n            arrayKey,\\n            newArrayLength\\n        );\\n\\n        // Get the data value from the key of the last element in the array\\n        bytes20 lastElementIndexValue = bytes20(\\n            erc725YContract.getData(lastElementIndexKey)\\n        );\\n\\n        // Set data value of the last element instead of the element from the array that will be removed\\n        dataKeys[2] = removedElementIndexKey;\\n        dataValues[2] = bytes.concat(lastElementIndexValue);\\n\\n        // Remove the data value for the swapped array element\\n        dataKeys[3] = lastElementIndexKey;\\n        dataValues[3] = \\\"\\\";\\n\\n        // Generate mapping key for the swapped array element\\n        bytes32 lastElementMapKey = LSP2Utils.generateMappingKey(\\n            bytes10(removedElementMapKey),\\n            lastElementIndexValue\\n        );\\n\\n        // Generate the mapping value for the swapped array element\\n        bytes memory lastElementMapValue = abi.encodePacked(\\n            bytes4(erc725YContract.getData(lastElementMapKey)),\\n            removedElementIndex\\n        );\\n\\n        // Update the map value of the swapped array element to the new index\\n        dataKeys[4] = lastElementMapKey;\\n        dataValues[4] = lastElementMapValue;\\n    }\\n}\\n\"\n    },\n    \"@lukso/lsp4-contracts/contracts/LSP4Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\"\n    },\n    \"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// modules\\nimport {ERC725Y} from \\\"@erc725/smart-contracts-v8/contracts/ERC725Y.sol\\\";\\n\\n// constants\\nimport {\\n    _LSP4_SUPPORTED_STANDARDS_KEY,\\n    _LSP4_SUPPORTED_STANDARDS_VALUE,\\n    _LSP4_TOKEN_NAME_KEY,\\n    _LSP4_TOKEN_SYMBOL_KEY,\\n    _LSP4_TOKEN_TYPE_KEY\\n} from \\\"./LSP4Constants.sol\\\";\\n\\n// errors\\nimport {\\n    LSP4TokenNameNotEditable,\\n    LSP4TokenSymbolNotEditable,\\n    LSP4TokenTypeNotEditable\\n} from \\\"./LSP4Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP4DigitalAssetMetadata contract that stores the **Token-Metadata** (`LSP4TokenName` and `LSP4TokenSymbol`) in its ERC725Y data store.\\n * @author Matthew Stevens\\n * @dev Standard Implementation of the LSP4 standard.\\n */\\nabstract contract LSP4DigitalAssetMetadata is ERC725Y {\\n    /**\\n     * @notice Deploying a digital asset `name_` with the `symbol_` symbol.\\n     *\\n     * @param name_ The name of the token.\\n     * @param symbol_ The symbol of the token.\\n     * @param initialOwner_ The owner of the token contract.\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address initialOwner_,\\n        uint256 lsp4TokenType_\\n    ) ERC725Y(initialOwner_) {\\n        // set data key SupportedStandards:LSP4DigitalAsset\\n        ERC725Y._setData(\\n            _LSP4_SUPPORTED_STANDARDS_KEY,\\n            _LSP4_SUPPORTED_STANDARDS_VALUE\\n        );\\n\\n        ERC725Y._setData(_LSP4_TOKEN_NAME_KEY, bytes(name_));\\n        ERC725Y._setData(_LSP4_TOKEN_SYMBOL_KEY, bytes(symbol_));\\n        ERC725Y._setData(_LSP4_TOKEN_TYPE_KEY, abi.encode(lsp4TokenType_));\\n    }\\n\\n    /**\\n     * @dev The ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol` cannot be changed\\n     * via this function once the digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP4_TOKEN_NAME_KEY) {\\n            revert LSP4TokenNameNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_SYMBOL_KEY) {\\n            revert LSP4TokenSymbolNotEditable();\\n        } else if (dataKey == _LSP4_TOKEN_TYPE_KEY) {\\n            revert LSP4TokenTypeNotEditable();\\n        } else {\\n            _store[dataKey] = dataValue;\\n\\n            emit DataChanged(dataKey, dataValue);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@lukso/lsp4-contracts/contracts/LSP4Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenName` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenName` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenNameNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenSymbol` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenSymbol` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor/initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenSymbolNotEditable();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP4TokenType` after the digital asset contract has been deployed / initialized.\\n * The `LSP4TokenType` data key is located inside the ERC725Y data key-value store of the digital asset contract.\\n * It can be set only once inside the constructor / initializer when the digital asset contract is being deployed / initialized.\\n */\\nerror LSP4TokenTypeNotEditable();\\n\"\n    },\n    \"@lukso/lsp8-contracts/contracts/ILSP8IdentifiableDigitalAsset.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Interface of the LSP8 - Identifiable Digital Asset standard, a non-fungible digital asset.\\n */\\ninterface ILSP8IdentifiableDigitalAsset {\\n    // --- Events\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from the `from` to the `to` address.\\n     * @param operator The address of operator that sent the `tokenId`\\n     * @param from The previous owner of the `tokenId`\\n     * @param to The new owner of `tokenId`\\n     * @param tokenId The tokenId that was transferred\\n     * @param force If the token transfer enforces the `to` recipient address to be a contract that implements the LSP1 standard or not.\\n     * @param data Any additional data the caller included by the caller during the transfer, and sent in the hooks to the `from` and `to` addresses.\\n     */\\n    event Transfer(\\n        address operator,\\n        address indexed from,\\n        address indexed to,\\n        bytes32 indexed tokenId,\\n        bool force,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` enables `operator` to transfer or burn the `tokenId`.\\n     * @param operator The address authorized as an operator.\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` address has access on behalf of `tokenOwner`.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorAuthorizationChanged(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when `tokenOwner` disables `operator` to transfer or burn `tokenId` on its behalf.\\n     * @param operator The address revoked from the operator array ({getOperatorsOf}).\\n     * @param tokenOwner The owner of the `tokenId`.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notified Bool indicating whether the operator has been notified or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     */\\n    event OperatorRevoked(\\n        address indexed operator,\\n        address indexed tokenOwner,\\n        bytes32 indexed tokenId,\\n        bool notified,\\n        bytes operatorNotificationData\\n    );\\n\\n    /**\\n     * @dev Emitted when setting data for `tokenId`.\\n     * @param tokenId The tokenId which data is set for.\\n     * @param dataKey The data key for which a bytes value is set.\\n     * @param dataValue The value to set for the given data key.\\n     */\\n    event TokenIdDataChanged(\\n        bytes32 indexed tokenId,\\n        bytes32 indexed dataKey,\\n        bytes dataValue\\n    );\\n\\n    // --- Token queries\\n\\n    /**\\n     * @dev Returns the number of existing tokens that have been minted in this contract.\\n     * @return The number of existing tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @dev Get the number of token IDs owned by `tokenOwner`.\\n\\n     * @param tokenOwner The address to query     *\\n     * @return The total number of token IDs that `tokenOwner` owns.\\n     */\\n    function balanceOf(address tokenOwner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the address that owns a given `tokenId`.\\n     *\\n     * @param tokenId The token ID to query the owner for.\\n     * @return The owner address of the given `tokenId`.\\n     *\\n     * @custom:requirements `tokenId` must exist.\\n     * @custom:info if the `tokenId` is not owned by any address, the returned address will be `address(0)`\\n     */\\n    function tokenOwnerOf(bytes32 tokenId) external view returns (address);\\n\\n    /**\\n     * @dev Returns the list of token IDs that the `tokenOwner` address owns.\\n     * @param tokenOwner The address that we want to get the list of token IDs for.\\n     * @return An array of `bytes32[] tokenIds` owned by `tokenOwner`.\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) external view returns (bytes32[] memory);\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @notice Retrieves data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) external returns (bytes memory dataValues);\\n\\n    /**\\n     * @notice Retrieves data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @return dataValues An array of data values for each pair of `tokenId` and `dataKey`.\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) external returns (bytes[] memory dataValues);\\n\\n    /**\\n     * @notice Sets data for a specific `tokenId` and `dataKey`.\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) external;\\n\\n    /**\\n     * @notice Sets data in batch for multiple `tokenId` and `dataKey` pairs.\\n     * @param tokenIds An array of token IDs.\\n     * @param dataKeys An array of data keys corresponding to the token IDs.\\n     * @param dataValues An array of values to set for the given data keys.\\n     * @custom:events {TokenIdDataChanged} event for each pair.\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) external;\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @dev Allow an `operator` address to transfer or burn a specific `tokenId` on behalf of its token owner. See {isOperatorFor}.\\n     * Notify the operator based on the LSP1-UniversalReceiver standard\\n     *\\n     * @param operator The address to authorize as an operator.\\n     * @param tokenId The token ID operator has access to.\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller MUST be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorAuthorizationChanged} event.\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Remove access of `operator` for a given `tokenId`, disallowing it to transfer `tokenId` on behalf of its owner.\\n     * See also {isOperatorFor}.\\n     *\\n     * @param operator The address to revoke as an operator.\\n     * @param tokenId The tokenId `operator` is revoked from operating on.\\n     * @param notify Boolean indicating whether to notify the operator or not\\n     * @param operatorNotificationData The data to notify the operator about via LSP1.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the {tokenOwnerOf} `tokenId`.\\n     * - the owner of a `tokenId` cannot grant revoke itself as an `operator` (`operator` cannot be the calling address).\\n     * - `operator` cannot be the zero address.\\n     *\\n     * @custom:events {OperatorRevoked} event with address of the operator being revoked for the caller (token owner)..\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) external;\\n\\n    /**\\n     * @dev Returns whether `operator` address is an operator for a given `tokenId`.\\n     *\\n     * @param operator The address to query operator status for.\\n     * @param tokenId The token ID to check if `operator` is allowed to operate on.\\n     *\\n     * @return `true` if `operator` is an operator for `tokenId`, `false` otherwise.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     * - caller must be the current {tokenOwnerOf} `tokenId`.\\n     *\\n     * @custom:info The tokenOwner is its own operator.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @dev Returns all `operator` addresses that are allowed to transfer or burn a specific `tokenId` on behalf of its owner.\\n     *\\n     * @param tokenId The token ID to get the operators for.\\n     * @return An array of operators allowed to transfer or burn a specific `tokenId`.\\n     *\\n     * Requirements\\n     * - `tokenId` must exist.\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) external view returns (address[] memory);\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @dev Transfer a given `tokenId` token from the `from` address to the `to` address.\\n     *\\n     * If operators are set for a specific `tokenId`, all the operators are revoked after the tokenId have been transferred.\\n     *\\n     * The `force` parameter MUST be set to `true` when transferring tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 standard.\\n     *\\n     * @param from The address that owns the given `tokenId`.\\n     * @param to The address that will receive the `tokenId`.\\n     * @param tokenId The token ID to transfer.\\n     * @param force When set to `true`, the `to` address CAN be any address.\\n     * When set to `false`, the `to` address MUST be a contract that supports the LSP1 UniversalReceiver standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks of the `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` and `to` cannot be the same address (`from` cannot send the `tokenId` to itself).\\n     * - `from` must own the given `tokenId`.\\n     * - If the caller is not `from`, it must be an operator for the `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} event when the `tokenId` is successfully transferred.\\n     *\\n     * @custom:hint The `force` parameter **MUST be set to `true`** to transfer tokens to Externally Owned Accounts (EOAs)\\n     * or contracts that do not implement the LSP1 Universal Receiver Standard. Otherwise the function will revert making the transfer fail.\\n     *\\n     * @custom:info if the `to` address is a contract that implements LSP1, it will always be notified via its `universalReceiver(...)` function, regardless if `force` is set to `true` or `false`.\\n     *\\n     * @custom:warning Be aware that when either the sender or the recipient can have logic that revert in their `universalReceiver(...)` function when being notified.\\n     * This even if the `force` was set to `true`.\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) external;\\n\\n    /**\\n     * @dev Transfers multiple tokens at once based on the arrays of `from`, `to` and `tokenId`.\\n     * If any transfer fails, the whole call will revert.\\n     *\\n     * @param from An array of sending addresses.\\n     * @param to An array of recipient addresses.\\n     * @param tokenId An array of token IDs to transfer.\\n     * @param force When set to `true`, `to` may be any address.\\n     * When set to `false`, `to` must be a contract that supports the LSP1 standard and not revert.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hooks to the `from` and `to` addresses.\\n     *\\n     *\\n     * @custom:requirements\\n     * - The arrays of `from`, `to` and `tokenId` must have the same length.\\n     * - no values in the `from` array can be the zero address.\\n     * - no values in the `to` array can be the zero address.\\n     * - `from` and `to` cannot be the same address at the same index on each arrays.\\n     * - each `tokenId` must be owned by `from`.\\n     * - If the caller is not `from`, it must be an operator of each `tokenId`.\\n     *\\n     * @custom:events\\n     * - {Transfer} events on each successful token transfer.\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) external;\\n\\n    /**\\n     * @notice Executing the following batch of abi-encoded function calls on the contract: `data`.\\n     *\\n     * @dev Allows a caller to batch different function calls in one call. Perform a `delegatecall` on self, to call different functions with preserving the context.\\n     * @param data An array of ABI encoded function calls to be called on the contract.\\n     * @return results An array of abi-encoded data returned by the functions executed.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\"\n    },\n    \"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- ERC165 interface ids\\nbytes4 constant _INTERFACEID_LSP8 = 0x3a271706;\\n\\nbytes4 constant _INTERFACEID_LSP8_V0_12_0 = 0x30dc5278;\\n\\nbytes4 constant _INTERFACEID_LSP8_V0_14_0 = 0xecad9f75;\\n\\n// --- ERC725Y Data Keys\\n\\n// keccak256('LSP8TokenIdFormat')\\nbytes32 constant _LSP8_TOKENID_FORMAT_KEY = 0xf675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d;\\n\\n// keccak256('LSP8TokenMetadataBaseURI')\\nbytes32 constant _LSP8_TOKEN_METADATA_BASE_URI = 0x1a7628600c3bac7101f53697f48df381ddc36b9015e7d7c9c5633d1252aa2843;\\n\\n// keccak256('LSP8ReferenceContract')\\nbytes32 constant _LSP8_REFERENCE_CONTRACT = 0x708e7b881795f2e6b6c2752108c177ec89248458de3bf69d0d43480b3e5034e6;\\n\\n// --- Token Hooks\\n\\n// keccak256('LSP8Tokens_SenderNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSSENDER = 0xb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab00;\\n\\n// keccak256('LSP8Tokens_RecipientNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENSRECIPIENT = 0x0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d;\\n\\n// keccak256('LSP8Tokens_OperatorNotification')\\nbytes32 constant _TYPEID_LSP8_TOKENOPERATOR = 0x8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f00970;\\n\\n// --- Token IDs Format\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_NUMBER = 0;\\nuint256 constant _LSP8_TOKENID_FORMAT_STRING = 1;\\nuint256 constant _LSP8_TOKENID_FORMAT_ADDRESS = 2;\\nuint256 constant _LSP8_TOKENID_FORMAT_UNIQUE_ID = 3;\\nuint256 constant _LSP8_TOKENID_FORMAT_HASH = 4;\\n\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_NUMBER = 100;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_STRING = 101;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_ADDRESS = 102;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_UNIQUE_ID = 103;\\nuint256 constant _LSP8_TOKENID_FORMAT_MIXED_DEFAULT_HASH = 104;\\n\"\n    },\n    \"@lukso/lsp8-contracts/contracts/LSP8Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// --- Errors\\n\\n/**\\n * @dev Reverts when `tokenId` has not been minted.\\n */\\nerror LSP8NonExistentTokenId(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `caller` is not the `tokenOwner` of the `tokenId`.\\n */\\nerror LSP8NotTokenOwner(address tokenOwner, bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `caller` is not an allowed operator for `tokenId`.\\n */\\nerror LSP8NotTokenOperator(bytes32 tokenId, address caller);\\n\\n/**\\n * @dev Reverts when `operator` is already authorized for the `tokenId`.\\n */\\nerror LSP8OperatorAlreadyAuthorized(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when trying to set the zero address as an operator.\\n */\\nerror LSP8CannotUseAddressZeroAsOperator();\\n\\n/**\\n * @dev Reverts when trying to send token to the zero address.\\n */\\nerror LSP8CannotSendToAddressZero();\\n\\n/**\\n * @dev Reverts when `operator` is not an operator for the `tokenId`.\\n */\\nerror LSP8NonExistingOperator(address operator, bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when `tokenId` has already been minted.\\n */\\nerror LSP8TokenIdAlreadyMinted(bytes32 tokenId);\\n\\n/**\\n * @dev Reverts when the parameters used for `transferBatch` have different lengths.\\n */\\nerror LSP8InvalidTransferBatch();\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` does not implement LSP1\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverContractMissingLSP1Interface(\\n    address tokenReceiver\\n);\\n\\n/**\\n * @dev Reverts if the `tokenReceiver` is an EOA\\n * when minting or transferring tokens with `bool force` set as `false`.\\n */\\nerror LSP8NotifyTokenReceiverIsEOA(address tokenReceiver);\\n\\n/**\\n * @dev Reverts when trying to authorize or revoke the token's owner as an operator.\\n */\\nerror LSP8TokenOwnerCannotBeOperator();\\n\\n/**\\n * @dev Error occurs when sending native tokens to the LSP8 contract without sending any data.\\n *\\n * E.g. Sending value without passing a bytes4 function selector to call a LSP17 Extension.\\n *\\n * @notice LSP8 contract cannot receive native tokens.\\n */\\nerror LSP8TokenContractCannotHoldValue();\\n\\n/**\\n * @dev Reverts when trying to edit the data key `LSP8TokenIdFormat` after the identifiable digital asset contract has been deployed.\\n * The `LSP8TokenIdFormat` data key is located inside the ERC725Y Data key-value store of the identifiable digital asset contract.\\n * It can be set only once inside the constructor/initializer when the identifiable digital asset contract is being deployed.\\n */\\nerror LSP8TokenIdFormatNotEditable();\\n\\n/**\\n * @dev Reverts when the length of the token IDs data arrays is not equal\\n */\\nerror LSP8TokenIdsDataLengthMismatch();\\n\\n/**\\n * @dev Reverts when empty arrays is passed to the function\\n */\\nerror LSP8TokenIdsDataEmptyArray();\\n\\n/**\\n * @dev Reverts when a batch call failed.\\n * @notice Batch call failed.\\n */\\nerror LSP8BatchCallFailed(uint256 callIndex);\\n\\n/**\\n * @dev Reverts when the token owner changed inside the {_beforeTokenTransfer} hook.\\n */\\nerror LSP8TokenOwnerChanged(\\n    bytes32 tokenId,\\n    address oldOwner,\\n    address newOwner\\n);\\n\\n/**\\n * @dev Reverts when the call to revoke operator is not authorized.\\n */\\nerror LSP8RevokeOperatorNotAuthorized(\\n    address caller,\\n    address tokenOwner,\\n    bytes32 tokenId\\n);\\n\"\n    },\n    \"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.12;\\n\\n// interfaces\\nimport {\\n    ILSP1UniversalReceiver as ILSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/ILSP1UniversalReceiver.sol\\\";\\nimport {\\n    ILSP8IdentifiableDigitalAsset\\n} from \\\"./ILSP8IdentifiableDigitalAsset.sol\\\";\\n\\n// modules\\nimport {\\n    LSP4DigitalAssetMetadata,\\n    ERC725Y\\n} from \\\"@lukso/lsp4-contracts/contracts/LSP4DigitalAssetMetadata.sol\\\";\\n\\nimport {\\n    LSP17Extendable\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Extendable.sol\\\";\\n\\n// libraries\\nimport {\\n    EnumerableSet\\n} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {\\n    ERC165Checker\\n} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {LSP1Utils} from \\\"@lukso/lsp1-contracts/contracts/LSP1Utils.sol\\\";\\nimport {LSP2Utils} from \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\n\\n// constants\\nimport {\\n    _INTERFACEID_LSP1\\n} from \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport {\\n    _LSP17_EXTENSION_PREFIX\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Constants.sol\\\";\\nimport {\\n    _INTERFACEID_LSP8,\\n    _LSP8_TOKENID_FORMAT_KEY,\\n    _TYPEID_LSP8_TOKENOPERATOR,\\n    _TYPEID_LSP8_TOKENSSENDER,\\n    _TYPEID_LSP8_TOKENSRECIPIENT\\n} from \\\"./LSP8Constants.sol\\\";\\n\\n// errors\\nimport {\\n    NoExtensionFoundForFunctionSelector,\\n    InvalidFunctionSelector,\\n    InvalidExtensionAddress\\n} from \\\"@lukso/lsp17contractextension-contracts/contracts/LSP17Errors.sol\\\";\\nimport {\\n    LSP8TokenContractCannotHoldValue,\\n    LSP8TokenIdFormatNotEditable,\\n    LSP8NonExistentTokenId,\\n    LSP8NotTokenOwner,\\n    LSP8CannotUseAddressZeroAsOperator,\\n    LSP8TokenOwnerCannotBeOperator,\\n    LSP8OperatorAlreadyAuthorized,\\n    LSP8NotTokenOperator,\\n    LSP8InvalidTransferBatch,\\n    LSP8NonExistingOperator,\\n    LSP8CannotSendToAddressZero,\\n    LSP8TokenIdAlreadyMinted,\\n    LSP8NotifyTokenReceiverContractMissingLSP1Interface,\\n    LSP8NotifyTokenReceiverIsEOA,\\n    LSP8TokenIdsDataLengthMismatch,\\n    LSP8TokenIdsDataEmptyArray,\\n    LSP8BatchCallFailed,\\n    LSP8TokenOwnerChanged,\\n    LSP8RevokeOperatorNotAuthorized\\n} from \\\"./LSP8Errors.sol\\\";\\n\\n/**\\n * @title Implementation of a LSP8 Identifiable Digital Asset, a contract that represents a non-fungible token.\\n * @author Matthew Stevens\\n *\\n * @dev Standard implementation contract of the LSP8 standard.\\n *\\n * Minting and transferring are done by providing a unique `tokenId`.\\n * This implementation is agnostic to the way tokens are created.\\n * A supply mechanism has to be added in a derived contract using {_mint}\\n * For a generic mechanism, see {LSP7Mintable}.\\n */\\nabstract contract LSP8IdentifiableDigitalAsset is\\n    ILSP8IdentifiableDigitalAsset,\\n    LSP4DigitalAssetMetadata,\\n    LSP17Extendable\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // --- Storage\\n\\n    uint256 internal _existingTokens;\\n\\n    // Mapping from `tokenId` to `tokenOwner`\\n    mapping(bytes32 => address) internal _tokenOwners;\\n\\n    // Mapping `tokenOwner` to owned tokenIds\\n    mapping(address => EnumerableSet.Bytes32Set) internal _ownedTokens;\\n\\n    // Mapping a `tokenId` to its authorized operator addresses.\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal _operators;\\n\\n    /**\\n     * @notice Deploying a LSP8IdentifiableDigitalAsset with name `name_`, symbol `symbol_`, owned by address `newOwner_`\\n     * with tokenId format `lsp8TokenIdFormat_`.\\n     *\\n     * @dev Deploy a `LSP8IdentifiableDigitalAsset` contract and set the tokenId format inside the ERC725Y storage of the contract.\\n     * This will also set the token `name_` and `symbol_` under the ERC725Y data keys `LSP4TokenName` and `LSP4TokenSymbol`.\\n     *\\n     * @param name_ The name of the token\\n     * @param symbol_ The symbol of the token\\n     * @param newOwner_ The owner of the the token-Metadata\\n     * @param lsp4TokenType_ The type of token this digital asset contract represents (`0` = Token, `1` = NFT, `2` = Collection).\\n     * @param lsp8TokenIdFormat_ The format of tokenIds (= NFTs) that this contract will create.\\n     *\\n     * @custom:warning Make sure the tokenId format provided on deployment is correct, as it can only be set once\\n     * and cannot be changed in the ERC725Y storage after the contract has been deployed.\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address newOwner_,\\n        uint256 lsp4TokenType_,\\n        uint256 lsp8TokenIdFormat_\\n    ) LSP4DigitalAssetMetadata(name_, symbol_, newOwner_, lsp4TokenType_) {\\n        LSP4DigitalAssetMetadata._setData(\\n            _LSP8_TOKENID_FORMAT_KEY,\\n            abi.encode(lsp8TokenIdFormat_)\\n        );\\n    }\\n\\n    // fallback functions\\n\\n    /**\\n     * @notice The `fallback` function was called with the following amount of native tokens: `msg.value`; and the following calldata: `callData`.\\n     *\\n     * @dev Achieves the goal of [LSP-17-ContractExtension] standard by extending the contract to handle calls of functions that do not exist natively,\\n     * forwarding the function call to the extension address mapped to the function being called.\\n     *\\n     * This function is executed when:\\n     *    - Sending data of length less than 4 bytes to the contract.\\n     *    - The first 4 bytes of the calldata do not match any publicly callable functions from the contract ABI.\\n     *    - Receiving native tokens\\n     *\\n     * 1. If the data is equal or longer than 4 bytes, the [ERC-725Y] storage is queried with the following data key: [_LSP17_EXTENSION_PREFIX] + `bytes4(msg.sig)` (Check [LSP-2-ERC725YJSONSchema] for encoding the data key)\\n     *\\n     *   - If there is no address stored under the following data key, revert with {NoExtensionFoundForFunctionSelector(bytes4)}. The data key relative to `bytes4(0)` is an exception, where no reverts occurs if there is no extension address stored under. This exception is made to allow users to send random data (graffiti) to the account and to be able to react on it.\\n     *\\n     *   - If there is an address, forward the `msg.data` to the extension using the CALL opcode, appending 52 bytes (20 bytes of `msg.sender` and 32 bytes of `msg.value`). Return what the calls returns, or revert if the call failed.\\n     *\\n     * 2. If the data sent to this function is of length less than 4 bytes (not a function selector), revert.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback(\\n        bytes calldata callData\\n    ) external payable virtual returns (bytes memory) {\\n        if (msg.data.length < 4) {\\n            revert InvalidFunctionSelector(callData);\\n        }\\n        return _fallbackLSP17Extendable(callData);\\n    }\\n\\n    /**\\n     * @dev Reverts whenever someone tries to send native tokens to a LSP8 contract.\\n     * @notice LSP8 contract cannot receive native tokens.\\n     */\\n    // solhint-disable-next-line no-complex-fallback\\n    receive() external payable virtual {\\n        // revert on empty calls with no value\\n        if (msg.value == 0) {\\n            revert InvalidFunctionSelector(hex\\\"00000000\\\");\\n        }\\n\\n        revert LSP8TokenContractCannotHoldValue();\\n    }\\n\\n    /**\\n     * @dev Forwards the call with the received value to an extension mapped to a function selector.\\n     *\\n     * Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\\n     * called on the account. If there is no extension, the address(0) will be returned.\\n     * We will always forward the value to the extension, as the LSP8 contract is not supposed to hold any native tokens.\\n     *\\n     * Reverts if there is no extension for the function being called.\\n     *\\n     * If there is an extension for the function selector being called, it calls the extension with the\\n     * CALL opcode, passing the {msg.data} appended with the 20 bytes of the {msg.sender} and\\n     * 32 bytes of the {msg.value}\\n     *\\n     * @custom:info The LSP8 Token contract should not hold any native tokens. Any native tokens received by the contract\\n     * will be forwarded to the extension address mapped to the selector from `msg.sig`.\\n     */\\n    function _fallbackLSP17Extendable(\\n        bytes calldata callData\\n    ) internal virtual override returns (bytes memory) {\\n        // If there is a function selector\\n        (address extension, ) = _getExtensionAndForwardValue(msg.sig);\\n\\n        // if no extension was found, revert\\n        if (extension == address(0))\\n            revert NoExtensionFoundForFunctionSelector(msg.sig);\\n\\n        (bool success, bytes memory result) = extension.call{value: msg.value}(\\n            abi.encodePacked(callData, msg.sender, msg.value)\\n        );\\n\\n        if (success) {\\n            return result;\\n        } else {\\n            // `mload(result)` -> offset in memory where `result.length` is located\\n            // `add(result, 32)` -> offset in memory where `result` data starts\\n            // solhint-disable no-inline-assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let resultdata_size := mload(result)\\n                revert(add(result, 32), resultdata_size)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the extension address stored under the following data key:\\n     * - {_LSP17_EXTENSION_PREFIX} + `<bytes4>` (Check [LSP2-ERC725YJSONSchema] for encoding the data key).\\n     * - If no extension is stored, returns the address(0).\\n     */\\n    function _getExtensionAndForwardValue(\\n        bytes4 functionSelector\\n    ) internal view virtual override returns (address, bool) {\\n        // Generate the data key relevant for the functionSelector being called\\n        bytes32 mappedExtensionDataKey = LSP2Utils.generateMappingKey(\\n            _LSP17_EXTENSION_PREFIX,\\n            functionSelector\\n        );\\n\\n        // Check if there is an extension stored under the generated data key\\n        bytes memory extensionAddress = _getData(mappedExtensionDataKey);\\n        if (extensionAddress.length != 20 && extensionAddress.length != 0)\\n            revert InvalidExtensionAddress(extensionAddress);\\n\\n        return (address(bytes20(extensionAddress)), true);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP17Extendable\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC725Y, LSP17Extendable) returns (bool) {\\n        return\\n            interfaceId == _INTERFACEID_LSP8 ||\\n            super.supportsInterface(interfaceId) ||\\n            LSP17Extendable._supportsInterfaceInERC165Extension(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc LSP4DigitalAssetMetadata\\n     * @dev The ERC725Y data key `_LSP8_TOKENID_FORMAT_KEY` cannot be changed\\n     * once the identifiable digital asset contract has been deployed.\\n     */\\n    function _setData(\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual override {\\n        if (dataKey == _LSP8_TOKENID_FORMAT_KEY) {\\n            revert LSP8TokenIdFormatNotEditable();\\n        }\\n        LSP4DigitalAssetMetadata._setData(dataKey, dataValue);\\n    }\\n\\n    // --- Token queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _existingTokens;\\n    }\\n\\n    // --- Token owner queries\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function balanceOf(\\n        address tokenOwner\\n    ) public view virtual override returns (uint256) {\\n        return _ownedTokens[tokenOwner].length();\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenOwnerOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address) {\\n        address tokenOwner = _tokenOwners[tokenId];\\n\\n        if (tokenOwner == address(0)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n\\n        return tokenOwner;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function tokenIdsOf(\\n        address tokenOwner\\n    ) public view virtual override returns (bytes32[] memory) {\\n        return _ownedTokens[tokenOwner].values();\\n    }\\n\\n    // --- TokenId Metadata functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) public view virtual override returns (bytes memory dataValue) {\\n        return _getDataForTokenId(tokenId, dataKey);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys\\n    ) public view virtual override returns (bytes[] memory dataValues) {\\n        if (tokenIds.length != dataKeys.length) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        dataValues = new bytes[](tokenIds.length);\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            dataValues[i] = _getDataForTokenId(tokenIds[i], dataKeys[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return dataValues;\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) public virtual override onlyOwner {\\n        _setDataForTokenId(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function setDataBatchForTokenIds(\\n        bytes32[] memory tokenIds,\\n        bytes32[] memory dataKeys,\\n        bytes[] memory dataValues\\n    ) public virtual override onlyOwner {\\n        if (\\n            tokenIds.length != dataKeys.length ||\\n            dataKeys.length != dataValues.length\\n        ) {\\n            revert LSP8TokenIdsDataLengthMismatch();\\n        }\\n\\n        if (tokenIds.length == 0) {\\n            revert LSP8TokenIdsDataEmptyArray();\\n        }\\n\\n        for (uint256 i; i < tokenIds.length; ) {\\n            _setDataForTokenId(tokenIds[i], dataKeys[i], dataValues[i]);\\n\\n            // Increment the iterator in unchecked block to save gas\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- General functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     *\\n     * @custom:info It's not possible to send value along the functions call due to the use of `delegatecall`.\\n     */\\n    function batchCalls(\\n        bytes[] calldata data\\n    ) public virtual override returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i; i < data.length; ) {\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n\\n            if (!success) {\\n                // Look for revert reason and bubble it up if present\\n                if (result.length != 0) {\\n                    // The easiest way to bubble the revert reason is using memory via assembly\\n                    // solhint-disable no-inline-assembly\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert LSP8BatchCallFailed({callIndex: i});\\n                }\\n            }\\n\\n            results[i] = result;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    // --- Operator functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function authorizeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (tokenOwner != msg.sender) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, msg.sender);\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        bool isAdded = _operators[tokenId].add(operator);\\n        if (!isAdded) revert LSP8OperatorAlreadyAuthorized(operator, tokenId);\\n\\n        emit OperatorAuthorizationChanged(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            operatorNotificationData\\n        );\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenId,\\n            true, // authorized\\n            operatorNotificationData\\n        );\\n\\n        _notifyTokenOperator(operator, lsp1Data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function revokeOperator(\\n        address operator,\\n        bytes32 tokenId,\\n        bool notify,\\n        bytes memory operatorNotificationData\\n    ) public virtual override {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        if (msg.sender != tokenOwner) {\\n            if (operator != msg.sender) {\\n                revert LSP8RevokeOperatorNotAuthorized(\\n                    msg.sender,\\n                    tokenOwner,\\n                    tokenId\\n                );\\n            }\\n        }\\n\\n        if (operator == address(0)) {\\n            revert LSP8CannotUseAddressZeroAsOperator();\\n        }\\n\\n        if (tokenOwner == operator) {\\n            revert LSP8TokenOwnerCannotBeOperator();\\n        }\\n\\n        _revokeOperator(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notify,\\n            operatorNotificationData\\n        );\\n\\n        if (notify) {\\n            bytes memory lsp1Data = abi.encode(\\n                tokenOwner,\\n                tokenId,\\n                false, // unauthorized\\n                operatorNotificationData\\n            );\\n\\n            _notifyTokenOperator(operator, lsp1Data);\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        bytes32 tokenId\\n    ) public view virtual override returns (bool) {\\n        return _isOperatorOrOwner(operator, tokenId);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function getOperatorsOf(\\n        bytes32 tokenId\\n    ) public view virtual override returns (address[] memory) {\\n        _existsOrError(tokenId);\\n\\n        return _operators[tokenId].values();\\n    }\\n\\n    /**\\n     * @dev verifies if the `caller` is operator or owner for the `tokenId`\\n     * @return true if `caller` is either operator or owner\\n     */\\n    function _isOperatorOrOwner(\\n        address caller,\\n        bytes32 tokenId\\n    ) internal view virtual returns (bool) {\\n        return (caller == tokenOwnerOf(tokenId) ||\\n            _operators[tokenId].contains(caller));\\n    }\\n\\n    // --- Transfer functionality\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) public virtual override {\\n        if (!_isOperatorOrOwner(msg.sender, tokenId)) {\\n            revert LSP8NotTokenOperator(tokenId, msg.sender);\\n        }\\n\\n        _transfer(from, to, tokenId, force, data);\\n    }\\n\\n    /**\\n     * @inheritdoc ILSP8IdentifiableDigitalAsset\\n     */\\n    function transferBatch(\\n        address[] memory from,\\n        address[] memory to,\\n        bytes32[] memory tokenId,\\n        bool[] memory force,\\n        bytes[] memory data\\n    ) public virtual override {\\n        uint256 fromLength = from.length;\\n        if (\\n            fromLength != to.length ||\\n            fromLength != tokenId.length ||\\n            fromLength != force.length ||\\n            fromLength != data.length\\n        ) {\\n            revert LSP8InvalidTransferBatch();\\n        }\\n\\n        for (uint256 i; i < fromLength; ) {\\n            transfer(from[i], to[i], tokenId[i], force[i], data[i]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev removes `operator` from the list of operators for the `tokenId`\\n     */\\n    function _revokeOperator(\\n        address operator,\\n        address tokenOwner,\\n        bytes32 tokenId,\\n        bool notified,\\n        bytes memory operatorNotificationData\\n    ) internal virtual {\\n        bool isRemoved = _operators[tokenId].remove(operator);\\n        if (!isRemoved) revert LSP8NonExistingOperator(operator, tokenId);\\n\\n        emit OperatorRevoked(\\n            operator,\\n            tokenOwner,\\n            tokenId,\\n            notified,\\n            operatorNotificationData\\n        );\\n    }\\n\\n    /**\\n     * @dev revoke all the current operators for a specific `tokenId` token which belongs to `tokenOwner`.\\n     *\\n     * @param tokenOwner The address that is the owner of the `tokenId`.\\n     * @param tokenId The token to remove the associated operators for.\\n     */\\n    function _clearOperators(\\n        address tokenOwner,\\n        bytes32 tokenId\\n    ) internal virtual {\\n        // here is a good example of why having multiple operators will be expensive.. we\\n        // need to clear them on token transfer\\n        //\\n        // NOTE: this may cause a tx to fail if there is too many operators to clear, in which case\\n        // the tokenOwner needs to call `revokeOperator` until there is less operators to clear and\\n        // the desired `transfer` or `burn` call can succeed.\\n        EnumerableSet.AddressSet storage operatorsForTokenId = _operators[\\n            tokenId\\n        ];\\n\\n        uint256 operatorListLength = operatorsForTokenId.length();\\n        address operator;\\n        for (uint256 i; i < operatorListLength; ) {\\n            // we are emptying the list, always remove from index 0\\n            operator = operatorsForTokenId.at(0);\\n            _revokeOperator(operator, tokenOwner, tokenId, false, \\\"\\\");\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens start existing when they are minted ({_mint}), and stop existing when they are burned ({_burn}).\\n     */\\n    function _exists(bytes32 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev When `tokenId` does not exist then revert with an error.\\n     */\\n    function _existsOrError(bytes32 tokenId) internal view virtual {\\n        if (!_exists(tokenId)) {\\n            revert LSP8NonExistentTokenId(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Create `tokenId` by minting it and transfers it to `to`.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the recipient via LSP1**.\\n     *\\n     * @param to The address that will receive the minted `tokenId`.\\n     * @param tokenId The token ID to create (= mint).\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the hook of the `to` address.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must not exist and not have been already minted.\\n     * - `to` cannot be the zero address.\\n\\n     * @custom:events {Transfer} event with `address(0)` as `from` address.\\n     */\\n    function _mint(\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        // Check that `tokenId` is not already minted\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, force, data);\\n\\n        // Check that `tokenId` was not minted inside the `_beforeTokenTransfer` hook\\n        if (_exists(tokenId)) {\\n            revert LSP8TokenIdAlreadyMinted(tokenId);\\n        }\\n\\n        // token being minted\\n        ++_existingTokens;\\n\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, address(0), to, tokenId, force, data);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, force, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            address(0),\\n            to,\\n            tokenId,\\n            data\\n        );\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Burn a specific `tokenId`, removing the `tokenId` from the {tokenIdsOf} the caller and decreasing its {balanceOf} by -1.\\n     * This will also clear all the operators allowed to transfer the `tokenId`.\\n     *\\n     * The owner of the `tokenId` will be notified about the `tokenId` being transferred through its LSP1 {universalReceiver}\\n     * function, if it is a contract that supports the LSP1 interface. Its {universalReceiver} function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender via LSP1**.\\n     *\\n     * @param tokenId The token to burn.\\n     * @param data Any additional data the caller wants included in the emitted event, and sent in the LSP1 hook on the token owner's address.\\n     *\\n     * @custom:hint In dApps, you can know which addresses are burning tokens by listening for the `Transfer` event and filter with the zero address as `to`.\\n     *\\n     * @custom:requirements\\n     * - `tokenId` must exist.\\n     *\\n     * @custom:events {Transfer} event with `address(0)` as the `to` address.\\n     */\\n    function _burn(bytes32 tokenId, bytes memory data) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n\\n        _beforeTokenTransfer(tokenOwner, address(0), tokenId, false, data);\\n\\n        // Re-fetch and update `tokenOwner` in case `tokenId`\\n        // was transferred inside the `_beforeTokenTransfer` hook\\n        tokenOwner = tokenOwnerOf(tokenId);\\n\\n        // token being burned\\n        --_existingTokens;\\n\\n        _clearOperators(tokenOwner, tokenId);\\n\\n        _ownedTokens[tokenOwner].remove(tokenId);\\n        delete _tokenOwners[tokenId];\\n\\n        emit Transfer(msg.sender, tokenOwner, address(0), tokenId, false, data);\\n\\n        _afterTokenTransfer(tokenOwner, address(0), tokenId, false, data);\\n\\n        bytes memory lsp1Data = abi.encode(\\n            msg.sender,\\n            tokenOwner,\\n            address(0),\\n            tokenId,\\n            data\\n        );\\n\\n        _notifyTokenSender(tokenOwner, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Change the owner of the `tokenId` from `from` to `to`.\\n     *\\n     * Both the sender and recipient will be notified of the `tokenId` being transferred through their LSP1 {universalReceiver}\\n     * function, if they are contracts that support the LSP1 interface. Their `universalReceiver` function will receive\\n     * all the parameters in the calldata packed encoded.\\n     *\\n     * @custom:info Any logic in the:\\n     * - {_beforeTokenTransfer} function will run before updating the balances and ownership of `tokenId`s.\\n     * - {_afterTokenTransfer} function will run after updating the balances and ownership of `tokenId`s, **but before notifying the sender/recipient via LSP1**.\\n     *\\n     * @param from The sender address.\\n     * @param to The recipient address.\\n     * @param tokenId The token to transfer.\\n     * @param force When set to `true`, `to` may be any address. When set to `false`, `to` must be a contract that supports the LSP1 standard.\\n     * @param data Additional data the caller wants included in the emitted event, and sent in the hooks to `from` and `to` addresses.\\n     *\\n     * @custom:requirements\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * @custom:events {Transfer} event.\\n     *\\n     * @custom:danger This internal function does not check if the sender is authorized or not to operate on the `tokenId`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data\\n    ) internal virtual {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != from) {\\n            revert LSP8NotTokenOwner(tokenOwner, tokenId, from);\\n        }\\n\\n        if (to == address(0)) {\\n            revert LSP8CannotSendToAddressZero();\\n        }\\n\\n        _beforeTokenTransfer(from, to, tokenId, force, data);\\n\\n        // Check that `tokenId`'s owner was not changed inside the `_beforeTokenTransfer` hook\\n        address currentTokenOwner = tokenOwnerOf(tokenId);\\n        if (tokenOwner != currentTokenOwner) {\\n            revert LSP8TokenOwnerChanged(\\n                tokenId,\\n                tokenOwner,\\n                currentTokenOwner\\n            );\\n        }\\n\\n        _clearOperators(from, tokenId);\\n\\n        _ownedTokens[from].remove(tokenId);\\n        _ownedTokens[to].add(tokenId);\\n        _tokenOwners[tokenId] = to;\\n\\n        emit Transfer(msg.sender, from, to, tokenId, force, data);\\n\\n        _afterTokenTransfer(from, to, tokenId, force, data);\\n\\n        bytes memory lsp1Data = abi.encode(msg.sender, from, to, tokenId, data);\\n\\n        _notifyTokenSender(from, lsp1Data);\\n        _notifyTokenReceiver(to, force, lsp1Data);\\n    }\\n\\n    /**\\n     * @dev Sets data for a specific `tokenId` and `dataKey` in the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to set.\\n     * @param dataValue The value to set for the given data key.\\n     * @custom:events {TokenIdDataChanged} event.\\n     */\\n    function _setDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey,\\n        bytes memory dataValue\\n    ) internal virtual {\\n        _store[keccak256(bytes.concat(tokenId, dataKey))] = dataValue;\\n        emit TokenIdDataChanged(tokenId, dataKey, dataValue);\\n    }\\n\\n    /**\\n     * @dev Retrieves data for a specific `tokenId` and `dataKey` from the ERC725Y storage\\n     * The ERC725Y data key is the hash of the `tokenId` and `dataKey` concatenated\\n     * @param tokenId The unique identifier for a token.\\n     * @param dataKey The key for the data to retrieve.\\n     * @return dataValues The data value associated with the given `tokenId` and `dataKey`.\\n     */\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual returns (bytes memory dataValues) {\\n        return _store[keccak256(bytes.concat(tokenId, dataKey))];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer, including minting and burning.\\n     * Allows to run custom logic before updating balances and notifying sender/recipient by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer, including minting and burning.\\n     * Allows to run custom logic after updating balances, but **before notifying sender/recipient via LSP1** by overriding this function.\\n     *\\n     * @param from The sender address\\n     * @param to The recipient address\\n     * @param tokenId The tokenId to transfer\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param data The data sent alongside the transfer\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        bytes32 tokenId,\\n        bool force,\\n        bytes memory data // solhint-disable-next-line no-empty-blocks\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Attempt to notify the operator `operator` about the `tokenId` being authorized.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENOPERATOR` as typeId, if `operator` is a contract that supports the LSP1 interface.\\n     * If `operator` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param operator The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `operator` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenOperator(\\n        address operator,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            operator,\\n            _TYPEID_LSP8_TOKENOPERATOR,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token sender `from` about the `tokenId` being transferred.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSSENDER` as typeId, if `from` is a contract that supports the LSP1 interface.\\n     * If `from` is an EOA or a contract that does not support the LSP1 interface, nothing will happen and no notification will be sent.\\n\\n     * @param from The address to call the {universalReceiver} function on.\\n     * @param lsp1Data the data to be sent to the `from` address in the `universalReceiver` call.\\n     */\\n    function _notifyTokenSender(\\n        address from,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        LSP1Utils.notifyUniversalReceiver(\\n            from,\\n            _TYPEID_LSP8_TOKENSSENDER,\\n            lsp1Data\\n        );\\n    }\\n\\n    /**\\n     * @dev Attempt to notify the token receiver `to` about the `tokenId` being received.\\n     * This is done by calling its {universalReceiver} function with the `_TYPEID_LSP8_TOKENSRECIPIENT` as typeId, if `to` is a contract that supports the LSP1 interface.\\n     *\\n     * If `to` is is an EOA or a contract that does not support the LSP1 interface, the behaviour will depend on the `force` boolean flag.\\n     * - if `force` is set to `true`, nothing will happen and no notification will be sent.\\n     * - if `force` is set to `false, the transaction will revert.\\n     *\\n     * @param to The address to call the {universalReceiver} function on.\\n     * @param force A boolean that describe if transfer to a `to` address that does not support LSP1 is allowed or not.\\n     * @param lsp1Data The data to be sent to the `to` address in the `universalReceiver(...)` call.\\n     */\\n    function _notifyTokenReceiver(\\n        address to,\\n        bool force,\\n        bytes memory lsp1Data\\n    ) internal virtual {\\n        if (\\n            ERC165Checker.supportsERC165InterfaceUnchecked(\\n                to,\\n                _INTERFACEID_LSP1\\n            )\\n        ) {\\n            ILSP1(to).universalReceiver(_TYPEID_LSP8_TOKENSRECIPIENT, lsp1Data);\\n        } else if (!force) {\\n            if (to.code.length != 0) {\\n                revert LSP8NotifyTokenReceiverContractMissingLSP1Interface(to);\\n            } else {\\n                revert LSP8NotifyTokenReceiverIsEOA(to);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.6) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 0x20)\\n            let dataPtr := data\\n            let endPtr := add(data, mload(data))\\n\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\n            // set it to zero to make sure no dirty bytes are read in that section.\\n            let afterPtr := add(endPtr, 0x20)\\n            let afterCache := mload(afterPtr)\\n            mstore(afterPtr, 0x00)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 byte (24 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\n                // Use this as an index into the lookup table, mload an entire word\\n                // so the desired character is in the least significant byte, and\\n                // mstore8 this least significant byte into the result and continue.\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // Reset the value that was cached\\n            mstore(afterPtr, afterCache)\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\n    },\n    \"contracts/ILSP0ERC725Account.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ILSP0ERC725Account Interface\\n * @dev Minimal interface for the LSP0 ERC725 Account standard\\n */\\ninterface ILSP0ERC725Account {\\n    /**\\n     * @dev Checks if a signature is valid for the given data\\n     * @param dataHash The hash of the data signed\\n     * @param signature The signature to verify\\n     * @return The magic value 0x1626ba7e if valid\\n     */\\n    function isValidSignature(bytes32 dataHash, bytes memory signature) external view returns (bytes4);\\n    \\n    /**\\n     * @dev Gets data for a specific key\\n     * @param dataKey The key to query\\n     * @return The stored data bytes\\n     */\\n    function getData(bytes32 dataKey) external view returns (bytes memory);\\n} \"\n    },\n    \"contracts/ILSP3Profile.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title ILSP3Profile Interface\\n * @dev Interface for the LSP3 Profile standard\\n */\\ninterface ILSP3Profile {\\n    /**\\n     * @dev Returns the name associated with the Universal Profile\\n     */\\n    function getName() external view returns (string memory);\\n} \"\n    },\n    \"contracts/LSP4Constants.sol\": {\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.4;\\n\\n// Token types\\nuint256 constant _LSP4_TOKEN_TYPE_TOKEN = 0;\\nuint256 constant _LSP4_TOKEN_TYPE_NFT = 1;\\nuint256 constant _LSP4_TOKEN_TYPE_COLLECTION = 2;\\n\\n// --- ERC725Y entries\\n\\n// bytes10(keccak256('SupportedStandards')) + bytes2(0) + bytes20(keccak256('LSP4DigitalAsset'))\\nbytes32 constant _LSP4_SUPPORTED_STANDARDS_KEY = 0xeafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c;\\n\\n// bytes4(keccak256('LSP4DigitalAsset'))\\nbytes constant _LSP4_SUPPORTED_STANDARDS_VALUE = hex\\\"a4d96624\\\";\\n\\n// keccak256('LSP4TokenName')\\nbytes32 constant _LSP4_TOKEN_NAME_KEY = 0xdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af1;\\n\\n// keccak256('LSP4TokenSymbol')\\nbytes32 constant _LSP4_TOKEN_SYMBOL_KEY = 0x2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756;\\n\\n// keccak256('LSP4TokenType')\\nbytes32 constant _LSP4_TOKEN_TYPE_KEY = 0xe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3;\\n\\n// keccak256('LSP4Creators[]')\\nbytes32 constant _LSP4_CREATORS_ARRAY_KEY = 0x114bd03b3a46d48759680d81ebb2b414fda7d030a7105a851867accf1c2352e7;\\n\\n// bytes10(keccak256('LSP4CreatorsMap'))\\nbytes10 constant _LSP4_CREATORS_MAP_KEY_PREFIX = 0x6de85eaf5d982b4e5da0;\\n\\n// keccak256('LSP4Metadata')\\nbytes32 constant _LSP4_METADATA_KEY = 0x9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e;\\n\"\n    },\n    \"contracts/LSP8LoogiesFixed.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8IdentifiableDigitalAsset.sol\\\";\\nimport \\\"@lukso/lsp8-contracts/contracts/LSP8Constants.sol\\\";\\nimport \\\"@lukso/lsp1-contracts/contracts/LSP1Constants.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@lukso/lsp2-contracts/contracts/LSP2Utils.sol\\\";\\nimport \\\"./ILSP0ERC725Account.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"./ILSP3Profile.sol\\\";\\nimport \\\"./LSP4Constants.sol\\\";\\n\\n// First, create an OnChainLoogiesMetadata contract similar to OnChainMetadata\\ncontract OnChainLoogiesMetadata {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    // Define SVG components for Loogies\\n    string[] private headPaths = [\\n        \\\"M 200 200 m -70 0 a 70 50 0 1 0 140 0 a 70 50 0 1 0 -140 0\\\",\\n        \\\"M 200 200 m -65 0 a 65 55 0 1 0 130 0 a 65 55 0 1 0 -130 0\\\",\\n        \\\"M 200 200 m -75 0 a 75 45 0 1 0 150 0 a 75 45 0 1 0 -150 0\\\"\\n    ];\\n    \\n    string[] private eyePaths = [\\n        \\\"M 170 180 m -15 0 a 15 15 0 1 0 30 0 a 15 15 0 1 0 -30 0 M 230 180 m -15 0 a 15 15 0 1 0 30 0 a 15 15 0 1 0 -30 0\\\",\\n        \\\"M 170 170 m -12 0 a 12 18 0 1 0 24 0 a 12 18 0 1 0 -24 0 M 230 170 m -12 0 a 12 18 0 1 0 24 0 a 12 18 0 1 0 -24 0\\\",\\n        \\\"M 170 180 m -17 0 a 17 13 0 1 0 34 0 a 17 13 0 1 0 -34 0 M 230 180 m -17 0 a 17 13 0 1 0 34 0 a 17 13 0 1 0 -34 0\\\"\\n    ];\\n    \\n    string[] private mouthPaths = [\\n        \\\"M 160 220 Q 200 240 240 220\\\",\\n        \\\"M 160 220 Q 200 250 240 220\\\",\\n        \\\"M 160 225 Q 200 235 240 225\\\"\\n    ];\\n    \\n    string[] private pupilPaths = [\\n        \\\"M 170 180 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0 M 230 180 m -5 0 a 5 5 0 1 0 10 0 a 5 5 0 1 0 -10 0\\\",\\n        \\\"M 170 170 m -4 0 a 4 6 0 1 0 8 0 a 4 6 0 1 0 -8 0 M 230 170 m -4 0 a 4 6 0 1 0 8 0 a 4 6 0 1 0 -8 0\\\",\\n        \\\"M 170 180 m -3 0 a 3 3 0 1 0 6 0 a 3 3 0 1 0 -6 0 M 230 180 m -3 0 a 3 3 0 1 0 6 0 a 3 3 0 1 0 -6 0\\\"\\n    ];\\n    \\n    // Define CSS classes for styling\\n    string[4] private classes = [\\\"head\\\", \\\"eyes\\\", \\\"pupils\\\", \\\"mouth\\\"];\\n\\n    // Store metadata on types of Loogies\\n    struct LoogieColors {\\n        string bodyFill;    // Body fill color\\n        string eyeFill;     // Eye fill color\\n        string pupilFill;   // Pupil fill color\\n        string strokeColor; // Stroke color\\n    }\\n\\n    struct LoogieMetadata {\\n        string loogieType;\\n        string variation;\\n        string encoded;     // Hash for verification\\n        LoogieColors colors;\\n    }\\n\\n    // Mapping from tokenId to Loogie type\\n    mapping(bytes32 => string) public loogieTypes;\\n    // Mapping from loogie type to its metadata\\n    mapping(string => LoogieMetadata) public metadata;\\n    \\n    // Initialize basic loogie types\\n    constructor() {\\n        // Setup basic colors for different loogie types\\n        _setupLoogieType(\\\"green\\\", [\\\"green\\\", \\\"standard\\\", \\\"\\\", \\\"#a3e635\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"blue\\\", [\\\"blue\\\", \\\"standard\\\", \\\"\\\", \\\"#3b82f6\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"red\\\", [\\\"red\\\", \\\"standard\\\", \\\"\\\", \\\"#ef4444\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"purple\\\", [\\\"purple\\\", \\\"standard\\\", \\\"\\\", \\\"#a855f7\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n        _setupLoogieType(\\\"yellow\\\", [\\\"yellow\\\", \\\"standard\\\", \\\"\\\", \\\"#facc15\\\", \\\"#ffffff\\\", \\\"#000000\\\", \\\"#000000\\\"]);\\n    }\\n    \\n    // Setup a loogie type with its metadata\\n    function _setupLoogieType(string memory _type, string[7] memory data) internal {\\n        metadata[_type] = LoogieMetadata({\\n            loogieType: data[0],\\n            variation: data[1],\\n            encoded: data[2],\\n            colors: LoogieColors({\\n                bodyFill: data[3],\\n                eyeFill: data[4],\\n                pupilFill: data[5],\\n                strokeColor: data[6]\\n            })\\n        });\\n    }\\n    \\n    // Get a random path index\\n    function getRandomPathIndex(bytes32 seed, uint8 offset, uint8 max) internal pure returns (uint8) {\\n        return uint8(uint256(keccak256(abi.encodePacked(seed, offset)))) % max;\\n    }\\n    \\n    // Render SVG based on Loogie attributes\\n    function renderSVG(bytes32 tokenId, string memory _type, uint256 chubbiness, uint256 mouthLength, string memory username) internal view returns (bytes memory) {\\n        LoogieMetadata memory _metadata = metadata[_type];\\n        \\n        // Get random path indices for visual variation based on tokenId\\n        uint8 headPathIndex = getRandomPathIndex(tokenId, 0, 3);\\n        uint8 eyePathIndex = getRandomPathIndex(tokenId, 1, 3);\\n        uint8 mouthPathIndex = getRandomPathIndex(tokenId, 2, 3);\\n        uint8 pupilPathIndex = getRandomPathIndex(tokenId, 3, 3);\\n        \\n        // Scale paths based on chubbiness\\n        string memory scaledHeadPath = _scalePath(headPaths[headPathIndex], chubbiness);\\n        \\n        // Generate SVG with CSS styling\\n        bytes memory svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 400 400\\\" width=\\\"400\\\" height=\\\"400\\\">',\\n            '<style>',\\n            '.head{fill:', _metadata.colors.bodyFill, ';stroke:', _metadata.colors.strokeColor, ';stroke-width:3px;}',\\n            '.eyes{fill:', _metadata.colors.eyeFill, ';stroke:', _metadata.colors.strokeColor, ';stroke-width:2px;}',\\n            '.pupils{fill:', _metadata.colors.pupilFill, ';stroke:none;}',\\n            '.mouth{fill:none;stroke:', _metadata.colors.strokeColor, ';stroke-width:3px;}',\\n            '</style>',\\n            '<rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#000000\\\"/>',\\n            '<path d=\\\"', scaledHeadPath, '\\\" class=\\\"head\\\"/>',\\n            '<path d=\\\"', eyePaths[eyePathIndex], '\\\" class=\\\"eyes\\\"/>',\\n            '<path d=\\\"', pupilPaths[pupilPathIndex], '\\\" class=\\\"pupils\\\"/>',\\n            '<path d=\\\"', _adjustMouthPath(mouthPaths[mouthPathIndex], mouthLength), '\\\" class=\\\"mouth\\\"/>',\\n            '<text x=\\\"200\\\" y=\\\"280\\\" font-family=\\\"Arial\\\" font-size=\\\"16\\\" fill=\\\"#ffffff\\\" text-anchor=\\\"middle\\\">', \\n            username, \\n            '</text>',\\n            '</svg>'\\n        );\\n        \\n        // Encode SVG to data URI\\n        return abi.encodePacked(\\n            'data:image/svg+xml;base64,',\\n            Base64.encode(svg)\\n        );\\n    }\\n    \\n    // Scale a path based on chubbiness\\n    function _scalePath(string memory path, uint256 chubbiness) internal pure returns (string memory) {\\n        // This is a simplified implementation - in production you'd want to actually scale the path\\n        // For now, just return the original path\\n        return path;\\n    }\\n    \\n    // Adjust mouth path based on mouth length\\n    function _adjustMouthPath(string memory path, uint256 mouthLength) internal pure returns (string memory) {\\n        // This is a simplified implementation - in production you'd want to actually adjust the path\\n        // For now, just return the original path\\n        return path;\\n    }\\n    \\n    // Generate metadata for a Loogie\\n    function getLoogieMetadata(\\n        bytes32 tokenId, \\n        string memory _type, \\n        bytes3 colorBytes, \\n        uint256 chubbiness, \\n        uint256 mouthLength, \\n        string memory username\\n    ) external view returns (bytes memory, bytes memory) {\\n        // Convert color to hex for display\\n        string memory colorHex = _bytesToHexString(colorBytes);\\n        \\n        // Generate type if not provided (fallback to color hex)\\n        string memory loogieType = bytes(_type).length > 0 ? _type : colorHex;\\n        \\n        // Render SVG\\n        bytes memory encodedSVG = renderSVG(tokenId, loogieType, chubbiness, mouthLength, username);\\n        \\n        // Calculate SVG hash\\n        bytes32 svgHash = keccak256(encodedSVG);\\n        \\n        // Format token name and description\\n        string memory tokenName = string(abi.encodePacked(\\\"Loogie #\\\", uint256(uint256(tokenId)).toString()));\\n        string memory description = string(\\n            abi.encodePacked(\\n                \\\"This Loogie is the color #\\\",\\n                colorHex,\\n                \\\" with a chubbiness of \\\",\\n                chubbiness.toString(),\\n                \\\" and mouth length of \\\",\\n                mouthLength.toString(),\\n                \\\".\\\"\\n            )\\n        );\\n        \\n        // Create LSP4 metadata JSON\\n        bytes memory rawMetadata = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\": {\\\"name\\\": \\\"', tokenName, \\n            '\\\",\\\"description\\\": \\\"', description, \\n            '\\\",\\\"links\\\": [{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"}],\\\"icon\\\":[],',\\n            '\\\"images\\\": [[{\\\"width\\\": 400,\\\"height\\\": 400,',\\n            '\\\"url\\\": \\\"', encodedSVG, '\\\",\\\"verification\\\": {\\\"method\\\": \\\"keccak256(bytes)\\\",\\\"data\\\": \\\"', \\n            _bytes32ToString(svgHash), '\\\"}}]],',\\n            '\\\"attributes\\\":[',\\n            '{\\\"key\\\":\\\"color\\\",\\\"value\\\":\\\"#', colorHex, '\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"chubbiness\\\",\\\"value\\\":', chubbiness.toString(), ',\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"mouthLength\\\",\\\"value\\\":', mouthLength.toString(), ',\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"username\\\",\\\"value\\\":\\\"', username, '\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"type\\\",\\\"value\\\":\\\"', loogieType, '\\\",\\\"type\\\":\\\"string\\\"}',\\n            ']}}'\\n        );\\n        \\n        // Create the encoded version with base64\\n        bytes memory encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(rawMetadata)\\n        );\\n        \\n        return (rawMetadata, encoded);\\n    }\\n    \\n    // Create collection metadata\\n    function getCollectionMetadata() external pure returns (bytes memory, bytes memory) {\\n        // Create a simple collection logo SVG\\n        string memory collectionSvg = '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0 0 400 400\\\"><rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#000\\\"/><text x=\\\"200\\\" y=\\\"180\\\" font-family=\\\"Arial\\\" font-size=\\\"40\\\" fill=\\\"#fff\\\" text-anchor=\\\"middle\\\">LuksoLoogies</text><text x=\\\"200\\\" y=\\\"230\\\" font-family=\\\"Arial\\\" font-size=\\\"20\\\" fill=\\\"#0f0\\\" text-anchor=\\\"middle\\\">Fixed Edition</text></svg>';\\n        \\n        // Calculate the hash of the SVG for verification\\n        bytes32 svgHash = keccak256(bytes(collectionSvg));\\n        \\n        // Create the collection metadata with proper LSP4 structure\\n        bytes memory raw = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\":{',\\n            '\\\"name\\\":\\\"LuksoLoogies Fixed\\\",',\\n            '\\\"description\\\":\\\"LuksoLoogies are LUKSO Standard LSP8 NFTs with a smile :) Only 3728 LuksoLoogies available on a price curve increasing 0.2% with each new mint. This fixed version shows proper token attributes and SVG rendering.\\\",',\\n            '\\\"links\\\":[{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"},{\\\"title\\\":\\\"Twitter\\\",\\\"url\\\":\\\"https://twitter.com/luksoLoogies\\\"}],',\\n            '\\\"images\\\":[[{',\\n            '\\\"width\\\":400,',\\n            '\\\"height\\\":400,',\\n            '\\\"url\\\":\\\"data:image/svg+xml;base64,', Base64.encode(bytes(collectionSvg)), '\\\",',\\n            '\\\"verification\\\":{\\\"method\\\":\\\"keccak256(bytes)\\\",\\\"data\\\":\\\"', _bytes32ToString(svgHash), '\\\"}',\\n            '}]],',\\n            // Collection-specific attributes\\n            '\\\"attributes\\\":[',\\n            '{\\\"key\\\":\\\"type\\\",\\\"value\\\":\\\"collection\\\",\\\"type\\\":\\\"string\\\"},',\\n            '{\\\"key\\\":\\\"limit\\\",\\\"value\\\":3728,\\\"type\\\":\\\"number\\\"},',\\n            '{\\\"key\\\":\\\"curve\\\",\\\"value\\\":100.2,\\\"type\\\":\\\"number\\\"}',\\n            ']',\\n            '}}'\\n        );\\n        \\n        // Create the encoded version (with data URI prefix)\\n        bytes memory encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(raw)\\n        );\\n        \\n        return (raw, encoded);\\n    }\\n    \\n    // Helper function to convert bytes32 to hex string\\n    function _bytes32ToString(bytes32 value) internal pure returns (string memory) {\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\n        bytes memory stringBytes = new bytes(66);\\n        \\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n        \\n        for (uint256 i = 0; i < 32; i++) {\\n            uint8 byteValue = uint8(value[i]);\\n            stringBytes[2 + i*2] = hexChars[byteValue >> 4];\\n            stringBytes[2 + i*2 + 1] = hexChars[byteValue & 0x0f];\\n        }\\n        \\n        return string(stringBytes);\\n    }\\n    \\n    // Helper function to convert bytes3 to hex string\\n    function _bytesToHexString(bytes3 value) internal pure returns (string memory) {\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\n        bytes memory stringBytes = new bytes(6);\\n        \\n        for (uint i = 0; i < 3; i++) {\\n            stringBytes[i*2] = hexChars[uint8(value[i]) >> 4];\\n            stringBytes[i*2 + 1] = hexChars[uint8(value[i]) & 0x0f];\\n        }\\n        \\n        return string(stringBytes);\\n    }\\n}\\n\\n/**\\n * @title LSP8LoogiesFixed\\n * @notice A fixed version that follows the Beans.sol pattern with the OnChainMetadata structure,\\n * proper SVG rendering, and numeric attributes in token metadata\\n */\\ncontract LSP8LoogiesFixed is LSP8IdentifiableDigitalAsset {\\n    using Strings for uint256;\\n    using Strings for uint8;\\n\\n    OnChainLoogiesMetadata public loogiesMetadata;\\n    \\n    uint256 private _tokenIds;\\n    mapping(bytes32 => bytes3) public color;\\n    mapping(bytes32 => uint256) public chubbiness;\\n    mapping(bytes32 => uint256) public mouthLength;\\n    mapping(bytes32 => string) public loogieType;\\n    // Store existing token IDs to check existence at runtime\\n    mapping(uint256 => bool) private _tokenIdExists;\\n    // Store UP usernames for each token\\n    mapping(bytes32 => string) public upUsernames;\\n\\n    // all funds go to buidlguidl.eth\\n    address payable public constant recipient =\\n        payable(0xa81a6a910FeD20374361B35C451a4a44F86CeD46);\\n\\n    uint256 public constant limit = 3728;\\n    uint256 public constant curve = 1002; // price increase 0.2% with each purchase\\n    uint256 public price = 0.1 ether; // LYX is at $1\\n\\n    // LSP0 Universal Receiver interface ID to detect Universal Profiles\\n    bytes4 constant _INTERFACEID_LSP0 = 0x3a271fff;\\n    \\n    constructor(address contractOwner) \\n    LSP8IdentifiableDigitalAsset(\\n        \\\"LuksoLoogies Fixed\\\", \\n        \\\"LUKLOGFIX\\\", \\n        contractOwner, \\n        _LSP4_TOKEN_TYPE_COLLECTION, // Set to COLLECTION (2) instead of NFT (1)\\n        0 // Token ID format number (0)\\n    ) {\\n        // Deploy the metadata contract\\n        loogiesMetadata = new OnChainLoogiesMetadata();\\n        \\n        // Set additional data for proper indexing\\n        _setData(_LSP4_SUPPORTED_STANDARDS_KEY, _LSP4_SUPPORTED_STANDARDS_VALUE);\\n        \\n        // Set collection supply data explicitly with the CORRECT keys\\n        bytes32 LSP4_METADATA_TOTAL_SUPPLY = 0xa23ea79c706be4641bfd97c9afb5b71a552c5bc320930dbe09b3530ed76dee0f;\\n        _setData(LSP4_METADATA_TOTAL_SUPPLY, bytes.concat(bytes32(uint256(limit))));\\n        \\n        bytes32 LSP4_METADATA_MAX_SUPPLY = 0xd28c95357cf4c94d638a4f572d5d3df8d7e1415c8b650e747a219c559d1435c8;\\n        _setData(LSP4_METADATA_MAX_SUPPLY, bytes.concat(bytes32(uint256(limit))));\\n        \\n        // Set Metadata Count key\\n        bytes32 LSP4_CREATORS_MAP_LENGTH_KEY = 0x6de85eaf5d982b4e5da00000d8c2f51c0e567ed9ec7b1f9ee90bb0b2839d168d;\\n        _setData(LSP4_CREATORS_MAP_LENGTH_KEY, bytes.concat(bytes32(uint256(1))));\\n        \\n        // Initialize collection metadata\\n        _updateCollectionMetadata();\\n    }\\n\\n    // Add standard name() function for compatibility with ERC721 display\\n    function name() public view returns (string memory) {\\n        return string(getData(_LSP4_TOKEN_NAME_KEY));\\n    }\\n\\n    // Add standard symbol() function for compatibility with ERC721 display\\n    function symbol() public view returns (string memory) {\\n        return string(getData(_LSP4_TOKEN_SYMBOL_KEY));\\n    }\\n\\n    // Add totalSupply() function for compatibility with ERC721\\n    function totalSupply() public view override returns (uint256) {\\n        return _tokenIds;\\n    }\\n\\n    function mintItem() public payable returns (bytes32) {\\n        require(_tokenIds < limit, \\\"DONE MINTING\\\");\\n        require(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n        price = (price * curve) / 1000;\\n\\n        _tokenIds += 1;\\n        // Convert to bytes32 in a way that ensures sequential ID format\\n        bytes32 tokenId = bytes32(uint256(_tokenIds));\\n        _tokenIdExists[_tokenIds] = true;\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                tokenId,\\n                blockhash(block.number - 1),\\n                msg.sender,\\n                address(this)\\n            )\\n        );\\n        \\n        // Generate token attributes from random seed\\n        color[tokenId] =\\n            bytes2(predictableRandom[0]) |\\n            (bytes2(predictableRandom[1]) >> 8) |\\n            (bytes3(predictableRandom[2]) >> 16);\\n        chubbiness[tokenId] =\\n            35 + ((55 * uint256(uint8(predictableRandom[3]))) / 255);\\n        mouthLength[tokenId] =\\n            180 + ((uint256(chubbiness[tokenId] / 4) * uint256(uint8(predictableRandom[4]))) / 255);\\n\\n        // Randomly assign loogie type\\n        uint256 typeIndex = uint256(uint8(predictableRandom[5])) % 5;\\n        if (typeIndex == 0) loogieType[tokenId] = \\\"green\\\";\\n        else if (typeIndex == 1) loogieType[tokenId] = \\\"blue\\\";\\n        else if (typeIndex == 2) loogieType[tokenId] = \\\"red\\\";\\n        else if (typeIndex == 3) loogieType[tokenId] = \\\"purple\\\";\\n        else loogieType[tokenId] = \\\"yellow\\\";\\n            \\n        // Set default UP username\\n        upUsernames[tokenId] = \\\"luksonaut\\\";\\n\\n        // Mint the token\\n        _mint(msg.sender, tokenId, true, \\\"\\\");\\n\\n        (bool success, ) = recipient.call{ value: msg.value }(\\\"\\\");\\n        require(success, \\\"could not send\\\");\\n\\n        return tokenId;\\n    }\\n\\n    // Keeping the original mintLoogie for backwards compatibility\\n    function mintLoogie(address to) public returns (bytes32) {\\n        _tokenIds += 1;\\n        bytes32 tokenId = bytes32(uint256(_tokenIds));\\n        _tokenIdExists[_tokenIds] = true;\\n\\n        bytes32 predictableRandom = keccak256(\\n            abi.encodePacked(\\n                tokenId,\\n                blockhash(block.number - 1),\\n                to,\\n                address(this)\\n            )\\n        );\\n        \\n        // Generate token attributes from random seed\\n        color[tokenId] =\\n            bytes2(predictableRandom[0]) |\\n            (bytes2(predictableRandom[1]) >> 8) |\\n            (bytes3(predictableRandom[2]) >> 16);\\n        chubbiness[tokenId] =\\n            35 + ((55 * uint256(uint8(predictableRandom[3]))) / 255);\\n        mouthLength[tokenId] =\\n            180 + ((uint256(chubbiness[tokenId] / 4) * uint256(uint8(predictableRandom[4]))) / 255);\\n\\n        // Randomly assign loogie type\\n        uint256 typeIndex = uint256(uint8(predictableRandom[5])) % 5;\\n        if (typeIndex == 0) loogieType[tokenId] = \\\"green\\\";\\n        else if (typeIndex == 1) loogieType[tokenId] = \\\"blue\\\";\\n        else if (typeIndex == 2) loogieType[tokenId] = \\\"red\\\";\\n        else if (typeIndex == 3) loogieType[tokenId] = \\\"purple\\\";\\n        else loogieType[tokenId] = \\\"yellow\\\";\\n            \\n        // Set default UP username\\n        upUsernames[tokenId] = \\\"luksonaut\\\";\\n\\n        // Mint the token\\n        _mint(to, tokenId, true, \\\"\\\");\\n        \\n        return tokenId;\\n    }\\n\\n    // Add function to set UP username for a token\\n    function setUPUsername(bytes32 tokenId, string memory username) public {\\n        address tokenOwner = tokenOwnerOf(tokenId);\\n        require(tokenOwner == msg.sender || isUniversalProfile(tokenOwner), \\\"LSP8: Not authorized\\\");\\n        upUsernames[tokenId] = username;\\n    }\\n\\n    // Helper function to check if a token exists by its uint256 ID\\n    function tokenExists(uint256 id) public view returns (bool) {\\n        return _tokenIdExists[id];\\n    }\\n    \\n    // Check if an address is likely a Universal Profile\\n    function isUniversalProfile(address account) public view returns (bool) {\\n        // Using a try-catch because the call might revert on non-contract addresses\\n        try IERC165(account).supportsInterface(_INTERFACEID_LSP0) returns (bool supportsLSP0) {\\n            if (supportsLSP0) {\\n                try IERC165(account).supportsInterface(_INTERFACEID_LSP1) returns (bool supportsLSP1) {\\n                    return supportsLSP1; // If it supports both LSP0 and LSP1, it's likely a UP\\n                } catch {\\n                    return false;\\n                }\\n            }\\n            return false;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    // Override supportsInterface to support both LSP8 standard interface IDs\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return \\n            interfaceId == _INTERFACEID_LSP8 || // New LSP8 interface ID\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    // Override _getDataForTokenId to return token-specific metadata in LSP4 format\\n    function _getDataForTokenId(\\n        bytes32 tokenId,\\n        bytes32 dataKey\\n    ) internal view virtual override returns (bytes memory dataValues) {\\n        // Only override for LSP4 metadata key\\n        if (dataKey != _LSP4_METADATA_KEY) {\\n            return super._getDataForTokenId(tokenId, dataKey);\\n        }\\n        \\n        // Get token attributes\\n        string memory username = upUsernames[tokenId];\\n        bytes3 colorValue = color[tokenId];\\n        uint256 chubbinessValue = chubbiness[tokenId];\\n        uint256 mouthLengthValue = mouthLength[tokenId];\\n        string memory loogieTypeValue = loogieType[tokenId];\\n        \\n        // Get metadata from the OnChainLoogiesMetadata contract\\n        (bytes memory rawMetadata, bytes memory encodedMetadata) = loogiesMetadata.getLoogieMetadata(\\n            tokenId,\\n            loogieTypeValue,\\n            colorValue,\\n            chubbinessValue,\\n            mouthLengthValue,\\n            username\\n        );\\n        \\n        // Use standard LUKSO verification format\\n        bytes memory verifiableURI = bytes.concat(\\n            hex\\\"00006f357c6a0020\\\",\\n            keccak256(rawMetadata),\\n            encodedMetadata\\n        );\\n        \\n        return verifiableURI;\\n    }\\n    \\n    // Update collection metadata with proper LSP4 format\\n    function updateCollectionMetadata() public {\\n        require(msg.sender == owner(), \\\"LSP8: Not authorized\\\");\\n        _updateCollectionMetadata();\\n    }\\n    \\n    // Internal function to update collection metadata\\n    function _updateCollectionMetadata() internal {\\n        // Get collection metadata from the OnChainLoogiesMetadata contract\\n        (bytes memory rawMetadata, bytes memory encodedMetadata) = loogiesMetadata.getCollectionMetadata();\\n        \\n        // Set collection metadata using the LUKSO verification format\\n        _setData(_LSP4_METADATA_KEY, bytes.concat(\\n            hex\\\"00006f357c6a0020\\\",\\n            keccak256(rawMetadata),\\n            encodedMetadata\\n        ));\\n    }\\n} \"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1\n    },\n    \"viaIR\": true,\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "09720848bb9e4b321e16a83dcd394cb2",
      "transactionHash": "0x7ee9cb7c4b7abb95a3ea3b7504e20acc46db26dfb76a208db10bc2e75ba577b3",
      "args": [
        "0x02224842340dA3392cae9df5cbA5D777C33Fe299"
      ]
    },
    "decoded": {
      "from": "0x02224842340dA3392cae9df5cbA5D777C33Fe299",
      "gasPrice": "1099999743",
      "maxFeePerGas": "1099999743",
      "maxPriorityFeePerGas": "1099999735",
      "gasLimit": "8000000",
      "to": null,
      "value": "0",
      "nonce": 200,
      "data": "0x6080604090808252346200113557806200807380380380916200002382856200116c565b83396020928391810103126200113557516001600160a01b03808216939190848203620011355782519162000058836200113a565b6012835271131d5adcdbd31bdbd9da595cc8119a5e195960721b8584015283519562000084876200113a565b6009875268098aa96989e8e8c92b60bb1b86880152620000a43362001205565b156200112457620000b59062001205565b620000bf62001190565b937feafec4d89fa9619884b60000a4d96624a38f7ac2d8d9a604ecf07c12c77e480c6000938185526001918284528686209888519260018060401b03998a851162001110578b54948686811c9616801562001105575b88871014620010f157601f95868111620010a9575b50878682116001146200103e579c818693928c9d9e9f6200018d9d9162001032575b50600019600383901b1c191690891b1790555b8b51807fece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b29b8c9382620011d7565b0390a27fdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af190818a528587528a8a20908051918d83116200101e5780548881811c9116801562001013575b8a82101462000fff579081888d94931162000fa7575b5089938d89821160011462000f4a57620002289495826200098f575b50600019600383901b1c1916908a1b1790555b8c5191829182620011d7565b0390a27f2f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db93275690818952848652898920908051918c831162000c605780548781811c9116801562000f3f575b8982101462000c41579081878c94931162000eea575b5088938c88821160011462000e9757620002c394958262000b72575b50600019600383901b1c191690891b1790555b8b5191829182620011d7565b0390a28751600285820152848152620002dc816200113a565b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb390818952848652898920908051918c831162000c605780548781811c9116801562000e8c575b8982101462000c41579081878c94931162000e37575b5088938c88821160011462000de4576200037294958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a2875187858201528481526200038a816200113a565b7ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d90818952848652898920908051918c831162000c605780548781811c9116801562000dd9575b8982101462000c41579081878c94931162000d84575b5088938c88821160011462000d31576200042094958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a267016345785d8a0000600e55875161369c808201908282108c83111762000a8457908291620049d78339039088f0801562000d2757851660018060a01b031960065416176006556200047462001190565b818852838552888820908051918b831162000a845780548681811c9116801562000d1c575b8882101462000a65579081868b94931162000cc7575b50879386811160011462000c745780620004eb94958d9162000a98575b50600019600383901b1c191690881b1790555b8a5191829182620011d7565b0390a28651610e9090818582015284815262000507816200113a565b7fa23ea79c706be4641bfd97c9afb5b71a552c5bc320930dbe09b3530ed76dee0f90818952848652898920908051918c831162000c605780548781811c9116801562000c55575b8982101462000c41579081878c94931162000bec575b5088938c88821160011462000b7e576200059d94958262000b725750600019600383901b1c191690891b1790558b5191829182620011d7565b0390a287519084820152838152620005b5816200113a565b7fd28c95357cf4c94d638a4f572d5d3df8d7e1415c8b650e747a219c559d1435c890818852838552888820908051918b831162000a845780548681811c9116801562000b67575b8882101462000a65579081868b94931162000b12575b50879386811160011462000aa457806200064c94958d9162000a985750600019600383901b1c191690881b1790558a5191829182620011d7565b0390a2865193828486015283855262000665856200113a565b7f6de85eaf5d982b4e5da00000d8c2f51c0e567ed9ec7b1f9ee90bb0b2839d168d808852838552888820958051968b881162000a845780548681811c9116801562000a79575b8882101462000a655791899183878d9796951162000a0a575b5088998781116001146200099b57908162000702939260049c89916200098f5750600019600383901b1c1916908a1b1790558c5191829182620011d7565b0390a26006541688519586809263934118fb60e01b82525afa93841562000985578690879562000916575b50604881856200077893519101208951968791650379abe3500160c51b8884015260288301526200076781518092898686019101620011b2565b81010360288101875201856200116c565b7f9afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e95868152828452878120938551998a11620009025784548481811c91168015620008f7575b82821014620008e35780848c921162000899575b505080928a116001146200082f57509780928192620008129798999a9362000823575b501b916000199060031b1c19161790555b845191829182620011d7565b0390a25161372f9081620012a88239f35b860151925038620007f5565b9891601f1983169985835280832092905b8b82106200088157505082620008129798999a1062000867575b5050811b01905562000806565b85015160001960f88460031b161c1916905538806200085a565b808684958294958b0151815501940192019062000840565b86845284838520918482850160051c84019410620008d9575b0160051c019085905b828110620008cd57508b9150620007d2565b848155018590620008bb565b92508192620008b2565b634e487b7160e01b83526022600452602483fd5b90607f1690620007be565b634e487b7160e01b82526041600452602482fd5b9450503d8087863e6200092a81866200116c565b84018785820312620009815784518981116200097d57816200094e9187016200124c565b9484810151908a8211620009795762000778926048926200097092016200124c565b9591506200072d565b8880fd5b8780fd5b8680fd5b87513d88823e3d90fd5b90508301513862000209565b8187528987209a601f198216885b818110620009ee57509160049c8b92826200070297969510620009d4575b5050811b0190556200021c565b85015160001960f88460031b161c191690553880620009c7565b858301518e559c8b019c8f99508e9650918c01918c01620009a9565b9193949581935052878b2086808b0160051c8201928a8c1062000a5b575b8c94928e98979694928b920160051c01915b82811062000a4a575050620006c4565b9788558d978d95508a910162000a3a565b9250819262000a28565b634e487b7160e01b8b52602260045260248bfd5b90607f1690620006ab565b634e487b7160e01b8a52604160045260248afd5b905083015138620004cc565b818c52888c2094889190601f1982168e5b8c82821062000af757505090826200064c9798921062000add575b5050811b019055620004df565b85015160001960f88460031b161c19169055388062000ad0565b878401518a5598909401978e97508b94928101920162000ab5565b90809293508b52878b208680860160051c8201928a871062000b5d575b9189918d969594930160051c01915b82811062000b4e57505062000612565b8d81558c955089910162000b3e565b9250819262000b2f565b90607f1690620005fc565b905083015138620002a4565b8281528a8120958a9291601f198316905b8d82821062000bd157505090826200059d9798921062000bb7575b5050811b019055620002b7565b85015160001960f88460031b161c19169055388062000baa565b878401518a5598909401978f97508c94928101920162000b8f565b90809293508c52888c208780860160051c8201928b871062000c37575b918a918e969594930160051c01915b82811062000c2857505062000564565b8e81558d95508a910162000c18565b9250819262000c09565b634e487b7160e01b8c52602260045260248cfd5b90607f16906200054e565b634e487b7160e01b8b52604160045260248bfd5b818c52888c2094889190601f1982168e5b8c82821062000cac5750509082620004eb9798921062000add575050811b019055620004df565b878401518a5598909401978e97508b94928101920162000c85565b90809293508b52878b208680860160051c8201928a871062000d12575b9189918d969594930160051c01915b82811062000d03575050620004af565b8d81558c955089910162000cf3565b9250819262000ce4565b90607f169062000499565b88513d89823e3d90fd5b8281528a8120958a9291601f198316905b8d82821062000d695750509082620004209798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000d42565b90809293508c52888c208780860160051c8201928b871062000dcf575b918a918e969594930160051c01915b82811062000dc0575050620003e7565b8e81558d95508a910162000db0565b9250819262000da1565b90607f1690620003d1565b8281528a8120958a9291601f198316905b8d82821062000e1c5750509082620003729798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000df5565b90809293508c52888c208780860160051c8201928b871062000e82575b918a918e969594930160051c01915b82811062000e7357505062000339565b8e81558d95508a910162000e63565b9250819262000e54565b90607f169062000323565b8281528a8120958a9291601f198316905b8d82821062000ecf5750509082620002c39798921062000bb7575050811b019055620002b7565b878401518a5598909401978f97508c94928101920162000ea8565b90809293508c52888c208780860160051c8201928b871062000f35575b918a918e969594930160051c01915b82811062000f2657505062000288565b8e81558d95508a910162000f16565b9250819262000f07565b90607f169062000272565b8281528b8120958b9291601f198316908e5b82821062000f8257505090826200022897989210620009d4575050811b0190556200021c565b929597509386988684939598015181550194019201918e95939694918c938e62000f5c565b90809293508d52898d208880860160051c8201928c871062000ff5575b8e959493910160051c909101908a908f5b83821062000fe657505050620001ed565b81558e95508b91018f62000fd5565b9250819262000fc4565b634e487b7160e01b8d52602260045260248dfd5b90607f1690620001d7565b634e487b7160e01b8c52604160045260248cfd5b9050830151386200014c565b8d8b52888b2090601f1983168c5b818110620010935750926200018d9c9d9e9f928a92828a97961062001079575b5050811b0190556200015f565b85015160001960f88460031b161c1916905538806200106c565b858301518455928a0192918b01918b016200104c565b8d8b52888b208780840160051c8201928b8510620010e7575b0160051c019088905b828110620010db5750506200012a565b8c8155018890620010cb565b92508192620010c2565b634e487b7160e01b8a52602260045260248afd5b95607f169562000115565b634e487b7160e01b89526041600452602489fd5b83516306b620db60e21b8152600490fd5b600080fd5b604081019081106001600160401b038211176200115657604052565b634e487b7160e01b600052604160045260246000fd5b601f909101601f19168101906001600160401b038211908210176200115657604052565b604051906200119f826200113a565b60048252632936598960e21b6020830152565b60005b838110620011c65750506000910152565b8181015183820152602001620011b5565b60409160208252620011f98151809281602086015260208686019101620011b2565b601f01601f1916010190565b600080546001600160a01b039283166001600160a01b03198216811783559216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3565b81601f82011215620011355780516001600160401b03811162001156576040519262001283601f8301601f1916602001856200116c565b818452602082840101116200113557620012a49160208085019101620011b2565b9056fe60806040526004361015610033575b3615610026575b61001e36611d28565b602081519101f35b61002e611d74565b610015565b60003560e01c8062923f9e14610366578063017c96b81461035d57806301ffc9a71461035457806306fdde031461034b5780630e2fee841461034257806316e023b31461033957806318160ddd1461033057806319c9d79b146103275780631d26fce61461031e5780631ead90b014610315578063217b22701461030c5780632a3654a414610303578063472dfcfb146102fa578063475a590d146102f157806349a6078d146102e8578063511b6952146102df57806354f6127f146102d65780636643a686146102cd57806366d003ac146102c45780636963d438146102bb57806370a08231146102b2578063715018a6146102a95780637165485d146102a0578063791790c9146102975780637e87632c1461028e5780637f23690c1461028557806386a10ddd1461027c5780638da5cb5b1461027357806395d89b411461026a5780639790242114610261578063a035b1fe14610258578063a3b261f21461024f578063a4d66daf14610246578063be9f0e6f1461023d578063d6c1407c14610234578063d91a61d01461022b578063db8c966314610222578063dedff9c614610219578063eb93406b14610210578063f2fde38b146102075763fc056acc0361000e57610202611c4f565b61000e565b50610202611b9d565b506102026119de565b50610202611956565b5061020261187c565b506102026117aa565b50610202611763565b50610202611673565b50610202611655565b506102026115da565b506102026115bb565b506102026114f6565b50610202611498565b5061020261146e565b50610202611317565b506102026112c0565b50610202611226565b506102026110ac565b5061020261108e565b50610202611041565b50610202611006565b50610202610fa0565b50610202610f70565b50610202610f43565b50610202610f23565b50610202610ebb565b50610202610dfa565b50610202610c13565b50610202610bdc565b50610202610abd565b50610202610a76565b50610202610a2b565b50610202610961565b5061020261071d565b50610202610605565b506102026105e2565b506102026105b8565b5061020261053f565b5061020261041a565b506102026103ed565b503461039857602036600319011261039857600435600052600c602052602060ff604060002054166040519015158152f35b600080fd5b6000526008602052604060002090565b6000526009602052604060002090565b600052600a602052604060002090565b600052600b602052604060002090565b600052600d602052604060002090565b503461039857602036600319011261039857600435600052600a6020526020604060002054604051908152f35b5034610398576020366003190112610398576004356001600160e01b03198116908181036103985761046f91631d138b8360e11b81149182159182610473575b50506040519115158252509081906020820190565b0390f35b909161049b575b50811561048b575b5038808061045a565b61049591506133a8565b38610482565b90915063a918fa6b60e01b81149081156104b8575b50903861047a565b6318a6a9a560e21b8114915081156104d2575b50386104b0565b6301ffc9a760e01b149050386104cb565b60005b8381106104f65750506000910152565b81810151838201526020016104e6565b9060209161051f815180928185528580860191016104e3565b601f01601f1916010190565b90602061053c928181520190610506565b90565b50346103985760003660031901126103985760008051602061361a833981519152600052600160205260405161046f906105a48161059d817f2a367ae1ac46d529739aa27ac74856f860e70af05d3642d18ba60fd5d32a069a610b29565b0382610699565b604051918291602083526020830190610506565b5034610398576000366003190112610398576006546040516001600160a01b039091168152602090f35b50346103985760403660031901126103985761046f6105a46024356004356134ec565b5034610398576000366003190112610398576020600754604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761065657604052565b61065e610624565b604052565b602081019081106001600160401b0382111761065657604052565b606081019081106001600160401b0382111761065657604052565b601f909101601f19168101906001600160401b0382119082101761065657604052565b6020906001600160401b0381116106d9575b601f01601f19160190565b6106e1610624565b6106ce565b9291926106f2826106bc565b916107006040519384610699565b829481845281830111610398578281602093846000960137010152565b5034610398576040366003190112610398576001600160401b036004356024358281116103985736602382011215610398576107639036906024816004013591016106e6565b9161078a61077083612249565b6001600160a01b038116331490811561086b575b50613276565b6000918252602090600d82526040832091845191821161085e575b6107b9826107b38554610aef565b8561210e565b80601f83116001146107f357508394829394926107e8575b50508160011b916000199060031b1c191617905580f35b0151905038806107d1565b90601f1983169561080985600052602060002090565b9286905b8882106108465750508360019596971061082d575b505050811b01905580f35b015160001960f88460031b161c19169055388080610822565b8060018596829496860151815501950193019061080d565b610866610624565b6107a5565b61087591506132ce565b38610784565b6020906001600160401b038111610894575b60051b0190565b61089c610624565b61088d565b81601f82011215610398578035916108b88361087b565b926108c66040519485610699565b808452602092838086019260051b820101928311610398578301905b8282106108f0575050505090565b813581529083019083016108e2565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106109335750505050505090565b9091929394958480610951600193603f198682030187528a51610506565b9801930193019194939290610923565b5034610398576040366003190112610398576001600160401b03600435818111610398576109939036906004016108a1565b90602435908111610398576109ac9036906004016108a1565b908051825103610a19576109c08151611ca5565b9160005b8251811015610a0b57806109ef6109dd60019386611d06565b516109e88386611d06565b51906134ec565b6109f98287611d06565b52610a048186611d06565b50016109c4565b6040518061046f86826108ff565b6040516317d38eff60e11b8152600490fd5b5034610398576020366003190112610398576004356000526008602052602060406000205460e81b6040519062ffffff60e81b168152f35b6001600160a01b03909116815260200190565b5034610398576020366003190112610398576020610a95600435612249565b6040516001600160a01b039091168152f35b600435906001600160a01b038216820361039857565b5034610398576040366003190112610398576020610ae5610adc610aa7565b602435906123ec565b6040519015158152f35b90600182811c92168015610b1f575b6020831014610b0957565b634e487b7160e01b600052602260045260246000fd5b91607f1691610afe565b9060009291805491610b3a83610aef565b918282526001938481169081600014610b9c5750600114610b5c575b50505050565b90919394506000526020928360002092846000945b838610610b88575050505001019038808080610b56565b805485870183015294019385908201610b71565b9294505050602093945060ff191683830152151560051b01019038808080610b56565b90610bda610bd39260405193848092610b29565b0383610699565b565b503461039857602036600319011261039857600435600052600d60205261046f61059d6105a4604060002060405192838092610b29565b50346103985760203660031901126103985761046f610c30610aa7565b610c43610c3e600754613049565b600755565b610d8860075491610c6e610c6184600052600c602052604060002090565b805460ff19166001179055565b6005610c7943612e14565b40604051610ca181610c9360208201948730918b88613073565b03601f198101835282610699565b519020610cf1600082901a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b9060e81c62ffffff19825416179055565b610d0f610d0a610d038360031a61300e565b60ff900490565b613057565b610d18866103ad565b55610d44610d3f610d03610d35610d2e896103ad565b5460021c90565b8460041a90613036565b613065565b610d4d866103bd565b55811a0680610d985750610d68610d63846103cd565b613119565b610d79610d74846103dd565b613136565b82610d82611de9565b916131b0565b6040519081529081906020820190565b60018103610db75750610db2610dad846103cd565b6130fd565b610d68565b60028103610dd15750610db2610dcc846103cd565b6130e2565b600303610de957610db2610de4846103cd565b6130c4565b610db2610df5846103cd565b6130a0565b50346103985760208060031936011261039857600435610e1981612703565b15610e7e5760005260058152610e326040600020612f38565b906040519181839283018184528251809152816040850193019160005b828110610e5e57505050500390f35b83516001600160a01b031685528695509381019392810192600101610e4f565b60249060405190635747cd1b60e11b82526004820152fd5b8015150361039857565b9080601f830112156103985781602061053c933591016106e6565b50346103985760a036600319011261039857610ed5610aa7565b6024356001600160a01b038116810361039857606435610ef481610e96565b608435926001600160401b03841161039857610f17610f21943690600401610ea0565b9260443591612427565b005b50346103985760203660031901126103985761046f6105a4600435611c86565b50346103985760203660031901126103985760043560005260096020526020604060002054604051908152f35b503461039857600036600319011261039857602060405173a81a6a910fed20374361b35c451a4a44f86ced468152f35b5034610398576020366003190112610398576001600160401b036004358181116103985736602382011215610398578060040135918211610398573660248360051b830101116103985761046f916024610ffa92016122bb565b604051918291826108ff565b5034610398576020366003190112610398576001600160a01b03611028610aa7565b1660005260046020526020604060002054604051908152f35b50346103985760008060031936011261108b5761105c612c76565b80546001600160a01b03198116825581906001600160a01b031660008051602061365a8339815191528280a380f35b80fd5b50346103985760003660031901126103985760206040516103ea8152f35b5034610398576020366003190112610398576020610ae56110cb610aa7565b6132ce565b81601f82011215610398578035916110e78361087b565b926110f56040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061111f575050505090565b81356001600160a01b0381168103610398578152908301908301611111565b81601f82011215610398578035916111558361087b565b926111636040519485610699565b808452602092838086019260051b820101928311610398578301905b82821061118d575050505090565b838091833561119b81610e96565b81520191019061117f565b9080601f83011215610398578135906111be8261087b565b926111cc6040519485610699565b828452602092838086019160051b8301019280841161039857848301915b8483106111fa5750505050505090565b82356001600160401b03811161039857869161121b84848094890101610ea0565b8152019201916111ea565b50346103985760a03660031901126103985760046001600160401b0381358181116103985761125890369084016110d0565b906024358181116103985761127090369085016110d0565b6044358281116103985761128790369086016108a1565b906064358381116103985761129f903690870161113e565b9260843590811161039857610f21956112ba913691016111a6565b936125b0565b506040366003190112610398576024356001600160401b038111610398576112ec903690600401610ea0565b6112f4612c76565b3461130557610f2190600435611fa8565b60405163f36ba73760e01b8152600490fd5b503461039857606036600319011261039857611331610aa7565b602435906044356001600160401b03811161039857611354903690600401610ea0565b9061135e83612249565b6001600160a01b038181169133830361144f57508216801561143d5780821461142b576113a56113a18461139c886000526005602052604060002090565b612f87565b1590565b61140b57938061140692610f21967f1b1b58aa2ec0cec2228b2d37124556d41f5a1f7b12f089171f896cc236671215604051806113e28a8261052b565b0390a46113f86040519485923360208501612396565b03601f198101845283610699565b612aaf565b6040516314ec4d6d60e31b81528061142787866004840161237b565b0390fd5b6040516344fed6b160e11b8152600490fd5b604051639577b8b360e01b8152600490fd5b85611427604051928392632d938f5160e11b8452339160048501612358565b5034610398576000366003190112610398576000546040516001600160a01b039091168152602090f35b50346103985760003660031901126103985760008051602061367a833981519152600052600160205260405161046f906105a48161059d817f83b322886c7b7e25779e5d38e06e005c9e7aba1e1267ce9210cf24e31833535a610b29565b5060403660031901126103985760046001600160401b0381358181116103985761152390369084016108a1565b906024359081116103985761153b90369084016111a6565b91611544612c76565b346115ac57815183510361159d5781511561158e575060005b8151811015610f21578061158861157660019385611d06565b516115818387611d06565b5190611fa8565b0161155d565b6040516397da5f9560e01b8152fd5b604051633bcc897960e01b8152fd5b60405163f36ba73760e01b8152fd5b5034610398576000366003190112610398576020600e54604051908152f35b503461039857602080600319360112610398576001600160a01b036115fd610aa7565b16600052600481526116126040600020612f38565b906040519181839283018184528251809152816040850193019160005b82811061163e57505050500390f35b83518552869550938101939281019260010161162f565b5034610398576000366003190112610398576020604051610e908152f35b50346103985760603660031901126103985760046001600160401b038135818111610398576116a590369084016108a1565b602435828111610398576116bc90369085016108a1565b91604435908111610398576116d490369085016111a6565b926116dd612c76565b8151835180911490811591611757575b5061174857815115611739575060005b8151811015610f21578061173361171660019385611d06565b516117218387611d06565b5161172c8489611d06565b51916128d3565b016116fd565b6040516380c9830560e01b8152fd5b6040516317d38eff60e11b8152fd5b905084511415386116ed565b5034610398576060366003190112610398576044356001600160401b03811161039857611797610f21913690600401610ea0565b61179f612c76565b6024356004356128d3565b50346103985760008060031936011261108b5761180d60048260018060a01b036117d8818354163314613276565b600654166040519283809263934118fb60e01b82525afa90811561186f575b8390849261184a575b50602081519101206134a6565b6000805160206136da83398151915261184460008051602061363a8339815191529283855260016020526105a48160408720612153565b0390a280f35b905061186891503d8085833e6118608183610699565b81019061341e565b9038611800565b611877612aa2565b6117f7565b503461039857608036600319011261039857611896610aa7565b602435604435916118a683610e96565b6064356001600160401b038111610398576118c5903690600401610ea0565b6118ce83612249565b936001600160a01b03808616903382900361191f575b841690811561143d571461142b576118ff8282868887612680565b61190557005b610f21936113f861140692604051958693602085016123c1565b84811633146118e45760405163760b5acd60e01b81523360048201526001600160a01b038816602482015260448101879052606490fd5b5034610398576020366003190112610398576004356001600160401b038111610398576119879036906004016108a1565b6119918151611ca5565b9060005b81518110156119d057806119b46119ae60019385611d06565b51611c86565b6119be8286611d06565b526119c98185611d06565b5001611995565b6040518061046f85826108ff565b5060008060031936011261108b5761046f906119ff610e9060075410612f9a565b611a29611a24611a1c600e54611a1781341015612fd5565b61301f565b6103e8900490565b600e55565b611a37610c3e600754613049565b610d8860075491611a55610c6184600052600c602052604060002090565b6005611a6043612e14565b40604051611a7b81610c936020820194309033908b88613073565b519020611ab881841a60f81b6001600160f81b031916600183901a60f01b60ff60f01b1617600283901a60e81b60ff60e81b1617610ce08761039d565b611aca610d0a610d038360031a61300e565b611ad3866103ad565b55611ae9610d3f610d03610d35610d2e896103ad565b611af2866103bd565b55811a0680611b4f5750611b08610d63846103cd565b611b14610d74846103dd565b611b26611b1f611de9565b84336131b0565b8080803473a81a6a910fed20374361b35c451a4a44f86ced465af1611b49611e1a565b50613157565b60018103611b695750611b64610dad846103cd565b611b08565b60028103611b7e5750611b64610dcc846103cd565b600303611b9157611b64610de4846103cd565b611b64610df5846103cd565b503461039857602036600319011261039857611bb7610aa7565b611bbf612c76565b6001600160a01b039081168015611bfb57600080546001600160a01b031981168317825590921660008051602061365a8339815191528380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461039857602036600319011261039857600435600052600b60205261046f61059d6105a4604060002060405192838092610b29565b600052600160205261059d61053c604060002060405192838092610b29565b90611caf8261087b565b611cbc6040519182610699565b8281528092611ccd601f199161087b565b019060005b828110611cde57505050565b806060602080938501015201611cd2565b50634e487b7160e01b600052603260045260246000fd5b6020918151811015611d1b575b60051b010190565b611d23611cef565b611d13565b60043610611d395761053c90611e4a565b6044604051809263e5099ee360e01b825260206004830152806024830152806000848401376000828201840152601f01601f19168101030190fd5b503415611d8d576040516330fa4a2160e11b8152600490fd5b606460405163e5099ee360e01b8152602060048201526004602482015260006044820152fd5b908092918237016000815290565b9060349391816000823760609390931b6001600160601b031916920191825260148201520190565b60405190602082016001600160401b03811183821017611e0d575b60405260008252565b611e15610624565b611e04565b3d15611e45573d90611e2b826106bc565b91611e396040519384610699565b82523d6000602084013e565b606090565b60609063ffffffff60e01b6000351691611e9a611e95604051696773c5a04a6d4300884b60b11b60208201526000602a82015285602c82015260208152611e908161063b565b611f85565b611c86565b805160148114159081611f46575b50611f2157611eb690611f50565b901c918215611efd57506000918291604051611ede81610c9360208201943490339087611dc1565b519134905af1611eec611e1a565b9015611ef55790565b602081519101fd5b60405163bb370b2b60e01b81526001600160e01b0319919091166004820152602490fd5b6040516342bfe79f60e01b815260206004820152908190611427906024830190610506565b9050151538611ea8565b80516020909101516001600160601b0319808216939290919060148110611f7657505050565b60140360031b82901b16169150565b602081519101519060208110611f99575090565b6000199060200360031b1b1690565b907ff675e9361af1c1664c1868cfa3eb97672d6b1a513aa5b81dec34c9ee330e818d82146120985760008051602061361a8339815191528203611ff7576040516385c169bd60e01b8152600490fd5b60008051602061367a833981519152820361201e57604051630eceab6760e31b8152600490fd5b7fe0261fa95db2eb3b5439bd033cda66d56b96f92f243a8228fd87550ed7bdfdb3820361205757604051634ef6d7fb60e01b8152600490fd5b612093816120876000805160206136da83398151915293612082866000526001602052604060002090565b612153565b6040519182918261052b565b0390a2565b604051631b32400560e11b8152600490fd5b9060031b600019811b9283911b169119161790565b916120cb9183546120aa565b9055565b8181106120da575050565b600081556001016120cf565b90601f81116120f3575050565b610bda91600052601f6020600020910160051c8101906120cf565b9190601f811161211d57505050565b610bda926000526020600020906020601f840160051c83019310612149575b601f0160051c01906120cf565b909150819061213c565b81519192916001600160401b038111612222575b61217b816121758454610aef565b8461210e565b602080601f83116001146121b75750819293946000926121ac575b50508160011b916000199060031b1c1916179055565b015190503880612196565b90601f198316956121cd85600052602060002090565b926000905b88821061220a575050836001959697106121f1575b505050811b019055565b015160001960f88460031b161c191690553880806121e7565b806001859682949686015181550195019301906121d2565b61222a610624565b612167565b6001600160a01b0316600090815260046020526040902090565b6000818152600360205260409020546001600160a01b0316908115610e7e575090565b91908110156122ae575b60051b81013590601e19813603018212156103985701803591906001600160401b038311610398576020018236038113610398579190565b6122b6611cef565b612276565b91906122c681611ca5565b92600091825b8181106122d95750505050565b83806122e683858761226c565b604093916122f8855180938193611db3565b0390305af490612306611e1a565b911561232d57509060019161231b8289611d06565b526123268188611d06565b50016122cc565b81519192911561233f57825160208401fd5b5163234eb81960e01b8152600481019190915260249150fd5b6001600160a01b0391821681526020810192909252909116604082015260600190565b6001600160a01b039091168152602081019190915260400190565b61053c939260809260018060a01b031682526020820152600160408201528160608201520190610506565b61053c939260809260018060a01b031682526020820152600060408201528160608201520190610506565b6001600160a01b03806123fe84612249565b16911690811491821561241057505090565b61053c925060005260056020526040600020612de8565b9092939161243581336123ec565b156125925761244381612249565b6001600160a01b038181169184821691828403612575578088169384156125635761246d86612249565b91821603612533575050926125298380610bda9997946113f8999761249561252e98876127e5565b6124a7836124a28861222f565b612e6b565b506124ba836124b58b61222f565b612d83565b506124f2896124d3856000526003602052604060002090565b80546001600160a01b0319166001600160a01b03909216919091179055565b6040516000805160206136ba83398151915290806125128a8e3384612749565b0390a46040519788948592888633602087016127ab565b612b5a565b612bf6565b604051635a9c31d360e01b8152600481018690526001600160a01b03928316602482015291166044820152606490fd5b6040516324ecef4d60e01b8152600490fd5b604051632d938f5160e11b81528061142788888660048501612358565b60449060405190631294d2a960e01b82526004820152336024820152fd5b949390919285519383518514801590612675575b801561266a575b801561265f575b61264d5760005b8581106125ea575050505050509050565b8061264761260a6125fd6001948c611d06565b516001600160a01b031690565b6126176125fd848a611d06565b6126218487611d06565b5161263561262f868a611d06565b51151590565b91612640868b611d06565b5193612427565b016125d9565b6040516393a8311960e01b8152600490fd5b5082518514156125d2565b5081518514156125cb565b5080518514156125c4565b91939284600052600560205260406000209260018060a01b03906126a78282168096612e6b565b156126e45750906126df60008051602061369a8339815191529392604051938493151584526040602085015216956040830190610506565b0390a4565b6040516312a8c6a360e21b81529081906114279089906004840161237b565b6000908152600360205260409020546001600160a01b0316151590565b6001600160a01b0390911681526001602082015260606040820181905261053c92910190610506565b6001600160a01b039091168152901515602082015260606040820181905261053c92910190610506565b6001600160a01b0391821681526000602082015291166040820152606081019190915260a06080820181905261053c92910190610506565b6001600160a01b03918216815291811660208301529091166040820152606081019190915260a06080820181905261053c92910190610506565b9060009080825260059160209383855260409182812094855495825b87811061281357505050505050505050565b8154156128a9575b8184528884205486516001600160a01b039182169161283982610663565b868252898752858c5261284e838a8920612e6b565b1561288e576001939260008051602061369a8339815191528d896128858e968e968e88805196879687528601521696830190610506565b0390a401612801565b88516312a8c6a360e21b8152806114278c866004840161237b565b6128b1611cef565b61281b565b9190604051926020840152604083015260408252610bda8261067e565b90916128df83836128b6565b805160208092012060005260019081815260406000209183519160018060401b0383116129f7575b61291b836129158654610aef565b8661210e565b80601f8411600114612975575091808061296595936000805160206135fa833981519152979560009361296a575b501b916000199060031b1c19161790556040519182918261052b565b0390a3565b860151925038612949565b90601f93929319831661298d86600052602060002090565b926000905b8282106129e057505091839161296596946000805160206135fa833981519152989694106129c7575b5050811b019055612087565b85015160001960f88460031b161c1916905538806129bb565b808785968294968c01518155019501930190612992565b6129ff610624565b612907565b81601f82011215610398578051612a1a816106bc565b92612a286040519485610699565b818452602082840101116103985761053c91602080850191016104e3565b906020828203126103985781516001600160401b0381116103985761053c9201612a04565b90604061053c927f0b084a55ebf70fd3c06fd755269dac2212c4d3f0f4d09079780bfa50c1b2984d81528160208201520190610506565b506040513d6000823e3d90fd5b612ab881612cce565b612ac0575050565b612b13600092918392604051948580948193631aed5a8560e21b83527f8a1c15a8799f71b547e08e2bcb2e85257e81b0a07eee2ce6712549eef1f009706004840152604060248401526044830190610506565b03926001600160a01b03165af18015612b4d575b612b2e5750565b612b4a903d806000833e612b428183610699565b810190612a46565b50565b612b55612aa2565b612b27565b612b6381612cce565b612b6b575050565b612b13600092918392604051948580948193631aed5a8560e21b83527fb23eae7e6d1564b295b4c3e3be402d9a2f0776c57bdf365903496f6fa481ab006004840152604060248401526044830190610506565b612bc781612cce565b15612bf257604051631aed5a8560e21b8152916000918391829084908290612b139060048301612a6b565b5050565b9190612c0183612cce565b15612c2b5750612b136000928392604051948580948193631aed5a8560e21b835260048301612a6b565b905015612c355750565b803b15612c5957604051634349776d60e01b81529081906114279060048301610a63565b604051630317313760e01b81529081906114279060048301610a63565b6000546001600160a01b03163303612c8a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000602091604051838101906301ffc9a760e01b8252631aed5a8560e21b602482015260248152612cfe8161067e565b5191617530fa6000513d82612d1f575b5081612d18575090565b9050151590565b60201115915038612d0e565b600090602092604051848101916301ffc9a760e01b835263ffffffff60e01b16602482015260248152612cfe8161067e565b8054821015612d76575b60005260206000200190600090565b612d7e611cef565b612d67565b612d8d8282612de8565b612de1578082612dbd612db4600194548560401b811015612dd4575b858101855584612d5d565b819391546120aa565b905580549260005201602052604060002055600190565b612ddc610624565b612da9565b5050600090565b60019160005201602052604060002054151590565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211612e2357565b610bda612dfd565b8054908115612e555760001991820191612e458383612d5d565b909182549160031b1b1916905555565b634e487b7160e01b600052603160045260246000fd5b6001810191806000528260205260406000205492831515600014612f2f57612ebd612ecc936000958619808201828111612f22575b8354918201918211612f15575b808203612ed2575b505050612e2b565b90600052602052604060002090565b55600190565b612efc612ef691612ee6612f0c9487612d5d565b90549060031b1c92839187612d5d565b906120bf565b8590600052602052604060002090565b55388080612eb5565b612f1d612dfd565b612ead565b612f2a612dfd565b612ea0565b50505050600090565b9060405191828154918282526020928383019160005283600020936000905b828210612f6d57505050610bda92500383610699565b855484526001958601958895509381019390910190612f57565b61053c916001600160a01b031690612d83565b15612fa157565b60405162461bcd60e51b815260206004820152600c60248201526b444f4e45204d494e54494e4760a01b6044820152606490fd5b15612fdc57565b60405162461bcd60e51b815260206004820152600a60248201526909c9ea8408a9c9eaa8e960b31b6044820152606490fd5b9081603702916037830403612e2357565b906103ea91828102928184041490151715612e2357565b81810292918115918404141715612e2357565b9060018201809211612e2357565b6023019081602311612e2357565b60b401908160b411612e2357565b9291606894918452602084015260018060601b0319809260601b16604084015260601b1660548201520190565b6130b36130ad8254610aef565b826120e6565b600c6579656c6c6f7760d01b019055565b6130d16130ad8254610aef565b600c65707572706c6560d01b019055565b6130ef6130ad8254610aef565b6006621c995960ea1b019055565b61310a6130ad8254610aef565b600863626c756560e01b019055565b6131266130ad8254610aef565b600a6433b932b2b760d91b019055565b6131436130ad8254610aef565b6012681b1d5adcdbdb985d5d60ba1b019055565b1561315e57565b60405162461bcd60e51b815260206004820152600e60248201526d18dbdd5b19081b9bdd081cd95b9960921b6044820152606490fd5b60019060001981146131a4570190565b6131ac612dfd565b0190565b909291906001600160a01b0381168015612563576131cd85612703565b61325d576131da85612703565b61325d5784610bda9495613258926131fb6131f6600254613194565b600255565b613208826124b58761222f565b50613221856124d3846000526003602052604060002090565b60006000805160206136ba833981519152604051806132418a3383612720565b0390a46113f8604051948592853360208601612773565b612bbe565b6040516334c7b51160e01b815260048101869052602490fd5b1561327d57565b60405162461bcd60e51b81526020600482015260146024820152731314d40e0e88139bdd08185d5d1a1bdc9a5e995960621b6044820152606490fd5b90816020910312610398575161053c81610e96565b6040516301ffc9a760e01b808252633a271fff60e01b60048301526001600160a01b0392909216916020918281602481875afa60009181613389575b506133185750505050600090565b61332457505050600090565b604051908152631aed5a8560e21b6004820152918190839060249082905afa91829160009361335a575b505061053c5750600090565b61337a929350803d10613382575b6133728183610699565b8101906132b9565b90388061334e565b503d613368565b6133a1919250843d8611613382576133728183610699565b903861330a565b6133e5611e95604051696773c5a04a6d4300884b60b11b60208201526000602a8201526301ffc9a760e01b602c82015260208152611e908161063b565b805160148114159081613414575b50611f215761340190611f50565b60601c908115612de15761053c91612d2b565b90501515386133f3565b9190916040818403126103985780516001600160401b039390848111610398578161344a918401612a04565b9360208301519081116103985761053c9201612a04565b9294916134819061053c979592855260c0602086015260c0850190610506565b9462ffffff60e81b1660408401526060830152608082015260a0818403910152610506565b6048610bda91939293604051948591650379abe3500160c51b602084015260288301526134dc81518092602086860191016104e3565b8101036028810185520183610699565b9060008051602061363a83398151915281036135c5575080600061351a61351561053c946103dd565b610bbf565b9161352e6135278261039d565b5460e81b90565b90613538816103ad565b5493613543826103bd565b5491613581613554613515836103cd565b6006549093906001600160a01b0316946040519889978896879663ad27274b60e01b885260048801613461565b03915afa9081156135b8575b60009081926135a35750602081519101206134a6565b9061186892503d8091833e6118608183610699565b6135c0612aa2565b61358d565b61053c91906135d3916128b6565b60208151910120600052600160205261059d61053c604060002060405192838092610b2956fea6e4251f855f750545fe414f120db91c76b88def14d120969e5bb2d3f05debbbdeba1e292f8ba88238e10ab3c7f88bd4be4fac56cad5194b6ecceaf653468af19afb95cacc9f95858ec44aa8c3b685511002e30ae54415823f406128b85b238e8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e02f0a68ab07768e01943a599e73362a0e17a63a72e94dd2e384d2c1d4db932756c78cd419d6136f9f1c1c6aec1d3fae098cffaf8bc86314a8f2685e32fe574e3cb333c813a7426a7a11e2b190cad52c44119421594b47f6f32ace6d8c7207b2bfece574603820d07bc9b91f2a932baadf4628aabcb8afba49776529c14a6104b2a2646970667358221220facca20eb8e2ef9a16a8249853dd259e81beba0c461a5ea4dd10a578c3ba1a2c64736f6c63430008110033604060808152346200113b576200001562001140565b906200002062001140565b603a81526020907f4d2032303020323030206d202d37302030206120373020353020302031203020828201527f31343020302061203730203530203020312030202d31343020300000000000008382015283526200007d62001140565b603a81527f4d2032303020323030206d202d36352030206120363520353520302031203020828201527f31333020302061203635203535203020312030202d31333020300000000000008382015281840152620000d962001140565b603a81527f4d2032303020323030206d202d37352030206120373520343520302031203020828201527f31353020302061203735203435203020312030202d313530203000000000000083820152828401526000908154936003948584558086106200111e575b508280528183209083905b86821062000ff6575050506200016062001140565b936200016b620011b6565b607181527f4d2031373020313830206d202d31352030206120313520313520302031203020838201527f333020302061203135203135203020312030202d33302030204d2032333020318582015260607f3830206d202d3135203020612031352031352030203120302033302030206120818301526080917003135203135203020312030202d3330203607c1b83820152875262000208620011b6565b607181527f4d2031373020313730206d202d31322030206120313220313820302031203020858201527f323420302061203132203138203020312030202d32342030204d203233302031878201527f3730206d202d3132203020612031322031382030203120302032342030206120828201527003132203138203020312030202d3234203607c1b8382015284880152620002a2620011b6565b607181527f4d2031373020313830206d202d31372030206120313720313320302031203020858201527f333420302061203137203133203020312030202d33342030204d203233302031878201527f3830206d202d3137203020612031372031332030203120302033342030206120828201527003137203133203020312030202d3334203607c1b8382015286880152600196875484895580851062000fd9575b508786528486209086905b85821062000ebb575050506200036362001140565b6200036d620011d6565b601b81527f4d20313630203232302051203230302032343020323430203232300000000000868201528152620003a2620011d6565b601b81527f4d203136302032323020512032303020323530203234302032323000000000008682015285820152620003d9620011d6565b601b81527f4d2031363020323235205120323030203233352032343020323235000000000086820152878201526002548460025580851062000e9d575b50600286528486209086905b85821062000d7f575050506200043762001140565b62000441620011b6565b606781527f4d2031373020313830206d202d35203020612035203520302031203020313020868201527f30206120352035203020312030202d31302030204d2032333020313830206d20888201527f2d352030206120352035203020312030203130203020612035203520302031208382015266030202d313020360cc1b848201528152620004cf620011b6565b606381527f4d2031373020313730206d202d34203020612034203620302031203020382030868201527f206120342036203020312030202d382030204d2032333020313730206d202d34888201527f203020612034203620302031203020382030206120342036203020312030202d838201526203820360ec1b84820152858201526200055b620011b6565b606381527f4d2031373020313830206d202d33203020612033203320302031203020362030868201527f206120332033203020312030202d362030204d2032333020313830206d202d33888201527f203020612033203320302031203020362030206120332033203020312030202d838201526203620360ec1b8482015287820152835484805580851062000d62575b508386528486209086905b85821062000c30575050506200060b62001176565b9262000616620011d6565b97600498898152631a19585960e21b87820152855262000635620011d6565b898152636579657360e01b878201528686015262000652620011d6565b6006815265707570696c7360d01b878201528886015262000672620011d6565b94600595868152640dadeeae8d60db1b8882015284820152899088905b8b821062000af957505050508592600894926200094a87936200087f8b62000aeb9c9d620007ae620006c062001196565b620006ca620011d6565b9b8b8d526433b932b2b760d91b9c8d8c8201528252620006e9620011d6565b9d8e52671cdd185b99185c9960c21b9d8e8c8201528b8301526200070c620011f6565b908152848201526200071d620011d6565b9a60079c8c8e809e52662361336536333560c81b8d8201528a84015262000743620011d6565b9b8d8d526611b3333333333360c91b9c8d828201528c8501528d62000767620011d6565b9e8f52660233030303030360cc1b9e8f90818482015260a08701526200078c620011d6565b9182528282015260c0850152620007a2620011d6565b928352820152620012dc565b8b8d620007ba62001196565b938d620007c6620011d6565b9385855263626c756560e01b9485828201528752620007e4620011d6565b916008835281830152860152620007fa620011f6565b9182528401528c661199b11c19331b60c91b62000816620011d6565b918d8352820152878401528c896200082d620011d6565b918d8352820152888401528c8a62000844620011d6565b918d835282015260a08401528c8a6200085c620011d6565b918d835282015260c084015262000872620011d6565b9182528c820152620012dc565b6200088962001196565b9062000894620011d6565b818152621c995960ea1b90818c8201528352620008b0620011d6565b600881528a8c8201528b8401528d620008c8620011f6565b908d8252840152620008d9620011d6565b8981526608d9598d0d0d0d60ca1b8c82015285840152620008f9620011d6565b898152878c820152868401526200090f620011d6565b898152888c82015260a084015262000926620011d6565b898152888c82015260c08401526200093d620011d6565b9182528a820152620012dc565b62000a1d6200095862001196565b62000962620011d6565b6006815265707572706c6560d01b90818b820152825262000982620011d6565b60088152898b8201528a83015262000999620011f6565b8b81528d830152620009aa620011d6565b888152662361383535663760c81b8b82015284830152620009ca620011d6565b888152868b82015285830152620009e0620011d6565b888152878b82015260a0830152620009f7620011d6565b888152878b82015260c083015262000a0e620011d6565b90600682528a820152620012dc565b62000a2762001196565b9762000a32620011d6565b96600688526579656c6c6f7760d01b97888a8201528a5262000a53620011d6565b906008825289820152888a015262000a6a620011f6565b9081528a89015262000a7b620011d6565b90858252662366616363313560c81b8883015288015262000a9b620011d6565b918483528683015286015262000ab0620011d6565b828152818582015260a086015262000ac7620011d6565b9182528382015260c084015262000add620011d6565b9160068352820152620012dc565b51611c2a908162001a728239f35b805180519091906001600160401b03811162000c1c5785918b918d62000b20885462001216565b908d601f9283811162000be1575b50508491831160011462000b71579085968362000b65575b5050600019828b1b1c191690841b1786555b019301910190916200068f565b01519050388062000b46565b90601f198316898352858320925b81811062000bbe575090869784889594931062000ba5575b505050811b01865562000b58565b0151600019838d1b60f8161c1916905538808062000b97565b9497939686929691938786015181550195019301928e94918a9693979462000b7f565b62000c0a918b84528784209085808801821c8301938a891062000c12575b01901c019062001253565b8d3862000b2e565b9350829362000bff565b50634e487b7160e01b8b5260418d5260248bfd5b805180519091906001600160401b03811162000d4e578b91899162000c56875462001216565b948c601f968588821162000d1e575b5050508c8496831160011462000cac5795829186979262000ca0575b5050600019828c1b1c191690841b1786555b01930191019091620005f6565b01519050388062000c81565b9095601f198316898352858320925b81811062000cfa575090869784889594931062000ce1575b505050811b01865562000c93565b0151600019838e1b60f8161c1916905538808062000cd3565b9497939686929691938786015181550195019301928f95929693918d959262000cbb565b828b62000d45945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000c65565b634e487b7160e01b8a52604160045260248afd5b84875285872062000d789181019086016200126c565b38620005eb565b805180519091906001600160401b03811162000d4e578b91899162000da5875462001216565b948c601f968588821162000e6d575b5050508c8496831160011462000dfb5795829186979262000def575b5050600019828c1b1c191690841b1786555b0193019101909162000422565b01519050388062000dd0565b9095601f198316898352858320925b81811062000e49575090869784889594931062000e30575b505050811b01865562000de2565b0151600019838e1b60f8161c1916905538808062000e22565b9497939686929691938786015181550195019301928f95929693918d959262000e0a565b828b62000e94945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000db4565b6002875285872062000eb49181019086016200126c565b3862000416565b805180519091906001600160401b03811162000d4e578b91899162000ee1875462001216565b948c601f968588821162000fa9575b5050508c8496831160011462000f375795829186979262000f2b575b5050600019828c1b1c191690841b1786555b019301910190916200034e565b01519050388062000f0c565b9095601f198316898352858320925b81811062000f85575090869784889594931062000f6c575b505050811b01865562000f1e565b0151600019838e1b60f8161c1916905538808062000f5e565b9497939686929691938786015181550195019301928f95929693918d959262000f46565b828b62000fd0945220600589808701821c83019389881062000c125701901c019062001253565b8c388562000ef0565b88875285872062000fef9181019086016200126c565b3862000343565b80518051906001600160401b0382116200110a5790859162001019865462001216565b90601f91828111620010da575b50839183116001146200106f579180600195928695948b9262001063575b5050600019828d1b1c191690841b1786555b019301910190916200014b565b01519050388062001044565b8689528389209190601f1984168a5b818110620010c15750916001969391858897969410620010a8575b505050831b8301865562001056565b0151600019838e1b60f8161c1916905538808062001099565b8284015185558a9660019095019493840193016200107e565b6200110390888b52858b20600585808801821c83019389891062000c125701901c019062001253565b3862001026565b634e487b7160e01b87526041600452602487fd5b838052828420620011349181019087016200126c565b3862000140565b600080fd5b60405190606082016001600160401b038111838210176200116057604052565b634e487b7160e01b600052604160045260246000fd5b60405190608082016001600160401b038111838210176200116057604052565b6040519060e082016001600160401b038111838210176200116057604052565b6040519060a082016001600160401b038111838210176200116057604052565b60408051919082016001600160401b038111838210176200116057604052565b60405190602082016001600160401b038111838210176200116057604052565b90600182811c9216801562001248575b60208310146200123257565b634e487b7160e01b600052602260045260246000fd5b91607f169162001226565b8181106200125f575050565b6000815560010162001253565b81811062001278575050565b80620012876001925462001216565b8062001296575b50016200126c565b601f8082118414620012b0575050600081555b386200128e565b620012d060009284845285602093848620920160051c8201910162001253565b812081835555620012a9565b815190602091828401519260408501519260608601519560808101519060c060a0820151910151916200130e62001176565b98895284890152604088015260608701526200132962001176565b928352818301948552604083019384526060830195865281604051828193519060005b82811062001a5b5750508101600981520301902091519081519360018060401b039485811162001160578062001383865462001216565b94601f9586811162001a29575b508490868311600114620019bf57600092620019b3575b50508160011b916000199060031b1c19161784555b600195868501905180519087821162001160578190620013dd845462001216565b87811162001981575b50859087831160011462001919576000926200190d575b5050600019600383901b1c191690881b1790555b5180516002850191868211620011605781906200142f845462001216565b868111620018db575b508490868311600114620018735760009262001867575b5050600019600383901b1c191690871b1790555b60039283810196519687518051908782116200116057819062001487845462001216565b87811162001835575b508590878311600114620017ce57600092620017c2575b505060001982881b1c191690881b1790555b600481018288015180519087821162001160578190620014da845462001216565b87811162001790575b50859087831160011462001729576000926200171d575b505060001982881b1c191690881b1790555b60058101604088015180519087821162001160576200152c835462001216565b868111620016eb575b5084908683116001146200167957918060069492606096946000926200166d575b5050600019828a1b1c1916908a1b1790555b01960151908151948511620011605762001583875462001216565b83811162001630575b5080928511600114620015c65750938394918492600095620015ba575b50501b92600019911b1c1916179055565b015193503880620015a9565b92919084601f1981168860005285600020956000905b89838310620016155750505010620015fa575b50505050811b019055565b01519060f884600019921b161c1916905538808080620015ef565b858701518955909701969485019488935090810190620015dc565b6200165c9088600052826000208580890160051c820192858a1062001663575b0160051c019062001253565b386200158c565b9250819262001650565b01519050388062001556565b899291601f1983169185600052876000209260005b89828210620016d45750509160609795939185600698969410620016bb575b505050811b01905562001568565b0151600019838c1b60f8161c19169055388080620016ad565b8385015186558e979095019493840193016200168e565b620017169084600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001535565b015190503880620014fa565b908a9350601f1983169185600052876000209260005b8982821062001779575050841162001760575b505050811b0190556200150c565b0151600019838a1b60f8161c1916905538808062001752565b8385015186558e979095019493840193016200173f565b620017bb9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620014e3565b015190503880620014a7565b908a9350601f1983169185600052876000209260005b898282106200181e575050841162001805575b505050811b019055620014b9565b0151600019838a1b60f8161c19169055388080620017f7565b8385015186558e97909501949384019301620017e4565b620018609085600052876000208980860160051c8201928a871062001663570160051c019062001253565b3862001490565b0151905038806200144f565b90899350601f1983169185600052866000209260005b88828210620018c45750508411620018aa575b505050811b01905562001463565b015160001960f88460031b161c191690553880806200189c565b8385015186558d9790950194938401930162001889565b620019069085600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001438565b015190503880620013fd565b908a9350601f1983169185600052876000209260005b898282106200196a575050841162001950575b505050811b01905562001411565b015160001960f88460031b161c1916905538808062001942565b8385015186558e979095019493840193016200192f565b620019ac9085600052876000208980860160051c8201928a871062001663570160051c019062001253565b38620013e6565b015190503880620013a7565b60008881528681209350601f198516905b8782821062001a12575050908460019594939210620019f8575b505050811b018455620013bc565b015160001960f88460031b161c19169055388080620019ea565b6001859682939686015181550195019301620019d0565b62001a549088600052866000208880860160051c82019289871062001663570160051c019062001253565b3862001390565b818101850151868201528694869450016200134c56fe6080604052600436101561001257600080fd5b60003560e01c806380a6dfa014611375578063934118fb14610cfe578063ad27274b146100915763c65eb1801461004857600080fd5b3461008c57602036600319011261008c57600435600052600860205261008861007460406000206115be565b6040519182916020835260208301906116b2565b0390f35b600080fd5b3461008c5760c036600319011261008c576001600160401b0360243581811161008c576100c290369060040161151a565b604435916001600160e81b03198316830361008c5760a43590811161008c576100ef90369060040161151a565b906100f8611a65565b60405193610105856114a6565b600685526020368187013760005b60038110610c6d5750508151159050610c66575b604051602081835161013c8183858801611561565b81016009815203019020606061018d60036040519361015a8561148b565b610163816115be565b8552610171600182016115be565b6020860152610182600282016115be565b604086015201611664565b9101908152600360ff6040516020810190600435825260006040820152602181526101b7816114c1565b5190201606600360ff60405160208101906004358252600160f81b6040820152602181526101e4816114c1565b5190201606600360ff60405160208101906004358252600160f91b604082015260218152610211816114c1565b5190201606600360ff604051602081019060043582528360f81b60408201526021815261023d816114c1565b519020160692600054811015610c50576000805261027c907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563016115be565b9351908151936060830151956040602085015194015194600154811015610c5057600160005260206000200191600354811015610c5057600360005260206000200192600254811015610c505760026000526102f9907f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace016115be565b9460405197889760208901600080516020611bb58339815191529052604089017f30302f737667222076696577426f783d22302030203430302034303022207769905276323a341e911a181811103432b4b3b43a1e911a1818111f60491b60608a015260778901661e39ba3cb6329f60c91b9052607e89016a173432b0b23db334b6361d60a91b90528051908160898b01916020019161039892611561565b880191671db9ba3937b5b29d60c11b806089850152825160208401948160918201906103c49188611561565b0197723b7374726f6b652d77696474683a3370783b7d60681b9889609182015260a481016a1732bcb2b9bdb334b6361d60a91b90528151918260af8301916020019161040f92611561565b019060af8201528251908160b78201906104299187611561565b0160b78101723b7374726f6b652d77696474683a3270783b7d60681b905260ca81016c17383ab834b639bdb334b6361d60991b90528151918260d78301916020019161047492611561565b019060d782016d3b7374726f6b653a6e6f6e653b7d60901b905260e58201771736b7baba343db334b6361d3737b7329db9ba3937b5b29d60411b905251918260fd83016104c092611561565b0160fd810194909452671e17b9ba3cb6329f60c11b6101108501527f3c726563742077696474683d2234303022206865696768743d223430302220666101188501526e34b6361e911198181818181811179f60891b610138850152681e3830ba3410321e9160b91b6101478501819052815190946101509261054a90839085840190602001611561565b01906f111031b630b9b99e913432b0b211179f60811b908201528361016082015261016901610578916119e2565b6f111031b630b9b99e9132bcb2b991179f60811b81528260108201526019016105a0916119e2565b9071111031b630b9b99e91383ab834b63991179f60711b8252601282015281519182601b830191602001916105d492611561565b70111031b630b9b99e9136b7baba3411179f60791b601b92909101918201527f3c7465787420783d223230302220793d223238302220666f6e742d66616d696c602c8201527f793d22417269616c2220666f6e742d73697a653d223136222066696c6c3d2223604c8201527f6666666666662220746578742d616e63686f723d226d6964646c65223e000000606c820152845190610679826089830160208901611561565b0160898101661e17ba32bc3a1f60c91b905260908101651e17b9bb339f60d11b9052036076810182526096016106af90826114dc565b6106b890611731565b916040518093602082017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b905280519081603a840191602001916106f892611561565b810103601a81018452603a0161070e90846114dc565b82516020840120936107216004356118a5565b93604051809560208201674c6f6f676965202360c01b90528051908160288401916020019161074f92611561565b81010360088101865260280161076590866114dc565b60643595610772876118a5565b9660843591610780836118a5565b98604051998a91602083017954686973204c6f6f6769652069732074686520636f6c6f72202360301b90528751603a84018160208b01916107c092611561565b8301603a8101750103bb4ba3410309031b43ab13134b732b9b99037b3160551b9052815191826050830191602001916107f892611561565b01605081017401030b7321036b7baba34103632b733ba341037b31605d1b90528151918260658301916020019161082e92611561565b0160658101601760f91b905203604681018a5260660161084e908a6114dc565b61085790611ab1565b90610861906118a5565b9161086b906118a5565b926040519889987a3d912629a81a26b2ba30b230ba30911d103d913730b6b2911d101160291b60208b015280519081603b8c0191602001916108ac92611561565b8901711116113232b9b1b934b83a34b7b7111d101160711b603b82015281519182604d830191602001916108df92611561565b7f222c226c696e6b73223a205b7b227469746c65223a2257656273697465222c22604d92909101918201527f75726c223a2268747470733a2f2f6c756b736f6c6f6f676965732e7665726365606d820152721b0b985c1c089f574b089a58dbdb888e96d74b606a1b608d8201527f22696d61676573223a205b5b7b227769647468223a203430302c22686569676860a0820152671d088e880d0c0c0b60c21b60c082015267113ab936111d101160c11b60c88201528151916109aa90839060d0840190602001611561565b0160d081017f222c22766572696669636174696f6e223a207b226d6574686f64223a20226b6590527831b1b0b5991a9b14313cba32b9949116113230ba30911d101160391b60f082015281519061010992828483019160200191610a0d92611561565b65089f5f57574b60d21b9101918201526d2261747472696275746573223a5b60901b61010f820152787b226b6579223a22636f6c6f72222c2276616c7565223a222360381b61011d820152835161013694909190610a7390839087840190602001611561565b72088b089d1e5c19488e889cdd1c9a5b99c89f4b606a1b91019384018190527b3d9135b2bc911d1131b43ab13134b732b9b99116113b30b63ab2911d60211b6101498501528151909361016592610ad290839085840190602001611561565b01710b089d1e5c19488e889b9d5b58995c889f4b60721b809282015261017781017f7b226b6579223a226d6f7574684c656e677468222c2276616c7565223a000000905282519061019493828583019160200191610b2f92611561565b01918201527a3d9135b2bc911d113ab9b2b93730b6b29116113b30b63ab2911d1160291b6101a68201528251906101c193828583019160200191610b7292611561565b0191820152763d9135b2bc911d113a3cb8329116113b30b63ab2911d1160491b6101d48201528151906101eb92828483019160200191610bb192611561565b019071222c2274797065223a22737472696e67227d60701b908201526101fd8101625d7d7d60e81b9052036101e08101825261020001610bf190826114dc565b610bfa81611731565b604051809160208201600080516020611bd5833981519152905280519081603d84019160200191610c2a92611561565b810103601d81018252603d01610c4090826114dc565b60405191829161008891836116d7565b634e487b7160e01b600052603260045260246000fd5b5081610127565b81811a906001600160f81b031980610c8c600485901c60ff1687611a91565b5116928260011b9383850460021484151715610ce857610cbe91600f9160001a610cb6878d611a91565b531686611a91565b51169160018101809111610ce857610cdd610ce39360001a9189611a91565b53611aa2565b610113565b634e487b7160e01b600052601160045260246000fd5b3461008c57600036600319011261008c576040516101a08101906001600160401b0382118183101761135f5761134091604052611350603d61016480845261130f6102d5610efa610ef4602094858901600080516020611bb583398151915281527f30302f737667222077696474683d2234303022206865696768743d223430302260408b01527f2076696577426f783d223020302034303020343030223e3c726563742077696460608b01527f74683d2234303022206865696768743d22343030222066696c6c3d222330303060808b01527f222f3e3c7465787420783d223230302220793d223138302220666f6e742d666160a08b01527f6d696c793d22417269616c2220666f6e742d73697a653d223430222066696c6c60c08b01527f3d22236666662220746578742d616e63686f723d226d6964646c65223e4c756b60e08b01527f736f4c6f6f676965733c2f746578743e3c7465787420783d223230302220793d6101008b01527f223233302220666f6e742d66616d696c793d22417269616c2220666f6e742d736101208b01527f697a653d223230222066696c6c3d22233066302220746578742d616e63686f726101408b01527f3d226d6964646c65223e46697865642045646974696f6e3c2f746578743e3c2f6101608b01526339bb339f60e11b6101808b01522097611731565b96611ab1565b604051707b224c5350344d65746164617461223a7b60781b858201527b089b985b59488e88931d5adcdbd31bdbd9da595cc8119a5e1959088b60221b60318201527f226465736372697074696f6e223a224c756b736f4c6f6f676965732061726520604d8201527f4c554b534f205374616e64617264204c535038204e4654732077697468206120606d8201527f736d696c65203a29204f6e6c792033373238204c756b736f4c6f6f6769657320608d8201527f617661696c61626c65206f6e206120707269636520637572766520696e63726560ad8201527f6173696e6720302e322520776974682065616368206e6577206d696e742e205460cd8201527f6869732066697865642076657273696f6e2073686f77732070726f706572207460ed8201527f6f6b656e206174747269627574657320616e64205356472072656e646572696e61010d8201526319cb888b60e21b61012d8201527f226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275726c6101318201527f223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c2e616101518201527f7070227d2c7b227469746c65223a2254776974746572222c2275726c223a22686101718201527f747470733a2f2f747769747465722e636f6d2f6c756b736f4c6f6f6769657322610191820152621f574b60ea1b6101b18201526b22696d61676573223a5b5b7b60a01b6101b48201526b089dda591d1a088e8d0c0c0b60a21b6101c08201526c089a195a59da1d088e8d0c0c0b609a1b6101cc8201527f2275726c223a22646174613a696d6167652f7376672b786d6c3b6261736536346101d9820152600b60fa1b6101f9820152875190978892916101fa9161118e908290848701908a01611561565b83019061088b60f21b908201527f22766572696669636174696f6e223a7b226d6574686f64223a226b656363616b6101fc82015273191a9b14313cba32b9949116113230ba30911d1160611b61021c8201528151906111f68261023094898685019101611561565b61227d60f01b910191820152631f57574b60e21b6102328201526d2261747472696275746573223a5b60901b6102368201527f7b226b6579223a2274797065222c2276616c7565223a22636f6c6c656374696f610244820152731b888b089d1e5c19488e889cdd1c9a5b99c89f4b60621b6102648201527f7b226b6579223a226c696d6974222c2276616c7565223a333732382c227479706102788201526c19488e889b9d5b58995c889f4b609a1b6102988201527f7b226b6579223a226375727665222c2276616c7565223a3130302e322c2274796102a58201526c7065223a226e756d626572227d60981b6102c5820152605d60f81b6102d2820152617d7d60f01b6102d3820152036102b58101875201856114dc565b61131884611731565b6040519582600080516020611bd5833981519152889485015282519283918686019101611561565b810103601d8101855201836114dc565b610088604051928392836116d7565b634e487b7160e01b600052604160045260246000fd5b3461008c5760208060031936011261008c57600435906001600160401b03821161008c576100886113c4826113b161142095369060040161151a565b8160405193828580945193849201611561565b810160098152030190206113d7816115be565b92606061147a61146861143b6113ef600187016115be565b9561142d61140b6003611404600285016115be565b9301611664565b976040519b8c9b60808d5260808d01906116b2565b908b8203898d01526116b2565b9089820360408b01526116b2565b938785038489015261145686516080875260808701906116b2565b908087015190868303908701526116b2565b604085015184820360408601526116b2565b9201519060608184039101526116b2565b608081019081106001600160401b0382111761135f57604052565b604081019081106001600160401b0382111761135f57604052565b606081019081106001600160401b0382111761135f57604052565b601f909101601f19168101906001600160401b0382119082101761135f57604052565b6001600160401b03811161135f57601f01601f191660200190565b81601f8201121561008c57803590611531826114ff565b9261153f60405194856114dc565b8284526020838301011161008c57816000926020809301838601378301015290565b60005b8381106115745750506000910152565b8181015183820152602001611564565b90600182811c921680156115b4575b602083101461159e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611593565b90604051918260008254926115d284611584565b90818452600194858116908160001461164157506001146115fe575b50506115fc925003836114dc565b565b9093915060005260209081600020936000915b8183106116295750506115fc935082010138806115ee565b85548884018501529485019487945091830191611611565b9150506115fc94506020925060ff191682840152151560051b82010138806115ee565b906040516116718161148b565b60606116ad60038395611683816115be565b8552611691600182016115be565b60208601526116a2600282016115be565b6040860152016115be565b910152565b906020916116cb81518092818552858086019101611561565b601f01601f1916010190565b90916116ee6116fc936040845260408401906116b2565b9160208184039101526116b2565b90565b90611709826114ff565b61171660405191826114dc565b8281528092611727601f19916114ff565b0190602036910137565b8051156118815760405190606082016001600160401b0381118382101761135f57604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051600291828201809211610ce8576003918290046001600160fe1b0381168103610ce8576117d7908495941b6116ff565b936020850193829183518401906020820192835194600085525b83811061183057505050505251068060011461181d57600214611812575090565b603d90600019015390565b50603d9081600019820153600119015390565b87600491999293949901918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c16880101518885015316850101518982015301979291906117f1565b50604051602081016001600160401b0381118282101761135f576040526000815290565b6000908072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b808210156119d4575b506904ee2d6d415b85acef8160201b808310156119c5575b50662386f26fc10000808310156119b6575b506305f5e100808310156119a7575b5061271080831015611998575b506064821015611988575b600a8092101561197e575b6001908160216119368287016116ff565b95860101905b611948575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156119795791908261193c565b611941565b9160010191611925565b919060646002910491019161191a565b6004919392049101913861190f565b60089193920491019138611902565b601091939204910191386118f3565b602091939204910191386118e1565b6040935081049150386118c9565b6000929181546119f181611584565b92600191808316908115611a4a5750600114611a0e575b50505050565b90919293945060005260209081600020906000915b858310611a395750505050019038808080611a08565b805485840152918301918101611a23565b60ff1916845250505081151590910201915038808080611a08565b60405190611a72826114a6565b601082526f181899199a1a9b1b9c1cb0b131b232b360811b6020830152565b908151811015610c50570160200190565b6000198114610ce85760010190565b611ab9611a65565b9060405191611ac78361148b565b604283526020908184016060368237845115610c505760309053835192600193841015610c50576078602186015360005b838110611b0757505050505090565b6001600160f81b031982821a600482611b2583831c60ff1688611a91565b51169284891b92600294868504861487151715611b9f57848601809611611b9f57600f600393928d611b5e89611b669560001a92611a91565b531689611a91565b51169201809311611b8a575090610cdd611b85939260001a9189611a91565b611af8565b601190634e487b7160e01b6000525260246000fd5b601184634e487b7160e01b6000525260246000fdfe3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f3230646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000a264697066735822122076ec184052ec9fe0b0c266082170ba33445633eed4eac586995af4480fb1163464736f6c6343000811003300000000000000000000000002224842340da3392cae9df5cba5d777c33fe299",
      "r": "0x2021575d205ed1cfc640a2d3cb2fdfe61d84cf0a8d78de7ffd617d01582af9b7",
      "s": "0x0f8698db5d8712496624355a364f200279898a373324255d701176eec9ffef0d",
      "v": 1,
      "chainId": 4201
    }
  }
}