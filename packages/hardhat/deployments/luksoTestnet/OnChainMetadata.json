{
  "address": "0x9A272926091bBA539eeEeF003F1B40Fdae014586",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "addressToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createCollectionMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "raw",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "encoded",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes3",
          "name": "color",
          "type": "bytes3"
        },
        {
          "internalType": "uint256",
          "name": "chubbiness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthLength",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUP",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "createTokenMetadata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "raw",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "encoded",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes3",
          "name": "color",
          "type": "bytes3"
        },
        {
          "internalType": "uint256",
          "name": "chubbiness",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "mouthLength",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "username",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isUP",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "matrixSeed",
          "type": "bytes32"
        }
      ],
      "name": "generateLoogieSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "tokenId",
          "type": "bytes32"
        }
      ],
      "name": "generateMatrixRainEffect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes3",
          "name": "_color",
          "type": "bytes3"
        }
      ],
      "name": "toColorHexString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "uint2str",
      "outputs": [
        {
          "internalType": "string",
          "name": "_uintAsString",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1b94ee3d9da40f927768a3d0f4af5dc0164b928bca2458614510c124c3f675f",
  "receipt": {
    "to": null,
    "from": "0x02224842340dA3392cae9df5cbA5D777C33Fe299",
    "contractAddress": "0x9A272926091bBA539eeEeF003F1B40Fdae014586",
    "transactionIndex": 0,
    "gasUsed": "2113337",
    "logsBloom": "0x
    "blockHash": "0x12039f7819ac04fdb0e5dab32f08a4451fb901e587000207197ad7b7a6473bde",
    "transactionHash": "0xf1b94ee3d9da40f927768a3d0f4af5dc0164b928bca2458614510c124c3f675f",
    "logs": [],
    "blockNumber": 5148738,
    "cumulativeGasUsed": "2113337",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2cd2a536b32f98ca63c2f7a3bb4b521d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCollectionMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"raw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes3\",\"name\":\"color\",\"type\":\"bytes3\"},{\"internalType\":\"uint256\",\"name\":\"chubbiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthLength\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUP\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"createTokenMetadata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"raw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encoded\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"color\",\"type\":\"bytes3\"},{\"internalType\":\"uint256\",\"name\":\"chubbiness\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mouthLength\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"username\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isUP\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"matrixSeed\",\"type\":\"bytes32\"}],\"name\":\"generateLoogieSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"tokenId\",\"type\":\"bytes32\"}],\"name\":\"generateMatrixRainEffect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3\",\"name\":\"_color\",\"type\":\"bytes3\"}],\"name\":\"toColorHexString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"uint2str\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_uintAsString\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides SVG generation with matrix style animation and properly formatted LSP4 metadata\",\"kind\":\"dev\",\"methods\":{\"addressToString(address)\":{\"params\":{\"_addr\":\"The address to convert\"},\"returns\":{\"_0\":\"string The string representation\"}},\"bytes32ToString(bytes32)\":{\"params\":{\"_bytes\":\"The bytes32 to convert\"},\"returns\":{\"_0\":\"string The string representation\"}},\"createCollectionMetadata()\":{\"returns\":{\"encoded\":\"Base64 encoded metadata with data URI\",\"raw\":\"Raw metadata bytes\"}},\"createTokenMetadata(bytes32,bytes3,uint256,uint256,string,bool,address)\":{\"params\":{\"chubbiness\":\"Chubbiness value\",\"color\":\"Color of the Loogie\",\"contractAddress\":\"Contract address for asset link\",\"isUP\":\"Whether the owner is a Universal Profile\",\"mouthLength\":\"Mouth length value\",\"tokenId\":\"The token ID\",\"username\":\"Username\"},\"returns\":{\"encoded\":\"Base64 encoded metadata with data URI\",\"raw\":\"Raw metadata bytes\"}},\"generateLoogieSVG(bytes3,uint256,uint256,string,bool,bytes32)\":{\"params\":{\"chubbiness\":\"Chubbiness value\",\"color\":\"Color of the Loogie\",\"isUP\":\"Whether the owner is a Universal Profile\",\"matrixSeed\":\"Seed for the matrix animation\",\"mouthLength\":\"Mouth length value\",\"username\":\"Username\"},\"returns\":{\"_0\":\"string The SVG string\"}},\"generateMatrixRainEffect(bytes32)\":{\"params\":{\"tokenId\":\"The token ID to use for randomization\"},\"returns\":{\"_0\":\"string The SVG string for matrix effect\"}},\"toColorHexString(bytes3)\":{\"params\":{\"_color\":\"The color as bytes3\"},\"returns\":{\"_0\":\"string The hex string of the color\"}},\"uint2str(uint256)\":{\"params\":{\"_i\":\"The uint to convert\"},\"returns\":{\"_uintAsString\":\"The string representation\"}}},\"title\":\"OnChainMetadata\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressToString(address)\":{\"notice\":\"Convert address to string\"},\"bytes32ToString(bytes32)\":{\"notice\":\"Convert bytes32 to string\"},\"createCollectionMetadata()\":{\"notice\":\"Create collection metadata following LSP4 standard format\"},\"createTokenMetadata(bytes32,bytes3,uint256,uint256,string,bool,address)\":{\"notice\":\"Create token metadata following LSP4 standard format\"},\"generateLoogieSVG(bytes3,uint256,uint256,string,bool,bytes32)\":{\"notice\":\"Generate SVG for a Loogie\"},\"generateMatrixRainEffect(bytes32)\":{\"notice\":\"Generate Matrix rain effect SVG based on tokenId\"},\"toColorHexString(bytes3)\":{\"notice\":\"Converts a bytes3 color to hex string without 0x prefix\"},\"uint2str(uint256)\":{\"notice\":\"Convert uint to string\"}},\"notice\":\"Handles on-chain SVG generation and metadata formatting for LSP8Loogies\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnChainMetadata.sol\":\"OnChainMetadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.6) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 0x20)\\n            let dataPtr := data\\n            let endPtr := add(data, mload(data))\\n\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\n            // set it to zero to make sure no dirty bytes are read in that section.\\n            let afterPtr := add(endPtr, 0x20)\\n            let afterCache := mload(afterPtr)\\n            mstore(afterPtr, 0x00)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 byte (24 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\n                // Use this as an index into the lookup table, mload an entire word\\n                // so the desired character is in the least significant byte, and\\n                // mstore8 this least significant byte into the result and continue.\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // Reset the value that was cached\\n            mstore(afterPtr, afterCache)\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x822fe67e9e671773d29c8182e7287b42edf5f575eab1eb98558d5ccbdff61c96\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/OnChainMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title OnChainMetadata\\n * @notice Handles on-chain SVG generation and metadata formatting for LSP8Loogies\\n * @dev Provides SVG generation with matrix style animation and properly formatted LSP4 metadata\\n */\\ncontract OnChainMetadata {\\n    using Strings for uint256;\\n\\n    /**\\n     * @notice Converts a bytes3 color to hex string without 0x prefix\\n     * @param _color The color as bytes3\\n     * @return string The hex string of the color\\n     */\\n    function toColorHexString(bytes3 _color) public pure returns (string memory) {\\n        bytes memory hexChars = \\\"0123456789abcdef\\\";\\n        bytes memory result = new bytes(6);\\n        \\n        // Extract individual bytes\\n        for (uint256 i = 0; i < 3; i++) {\\n            uint8 byteValue = uint8(_color[i]);\\n            // Process each byte into two hex characters\\n            result[i*2] = hexChars[uint8(byteValue >> 4)];\\n            result[i*2 + 1] = hexChars[uint8(byteValue & 0x0f)];\\n        }\\n        \\n        return string(result);\\n    }\\n\\n    /**\\n     * @notice Convert uint to string\\n     * @param _i The uint to convert\\n     * @return _uintAsString The string representation\\n     */\\n    function uint2str(uint _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        j = _i;\\n        while (j != 0) {\\n            bstr[--k] = bytes1(uint8(48 + j % 10));\\n            j /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /**\\n     * @notice Convert address to string\\n     * @param _addr The address to convert\\n     * @return string The string representation\\n     */\\n    function addressToString(address _addr) public pure returns (string memory) {\\n        bytes memory addressBytes = abi.encodePacked(_addr);\\n        bytes memory stringBytes = new bytes(42);\\n        \\n        stringBytes[0] = '0';\\n        stringBytes[1] = 'x';\\n        \\n        for (uint256 i = 0; i < 20; i++) {\\n            bytes1 leftNibble = bytes1(uint8(uint8(addressBytes[i]) >> 4));\\n            bytes1 rightNibble = bytes1(uint8(uint8(addressBytes[i]) & 0x0f));\\n            \\n            stringBytes[2 + i*2] = toHexChar(leftNibble);\\n            stringBytes[2 + i*2 + 1] = toHexChar(rightNibble);\\n        }\\n        \\n        return string(stringBytes);\\n    }\\n    \\n    /**\\n     * @notice Convert bytes32 to string\\n     * @param _bytes The bytes32 to convert\\n     * @return string The string representation\\n     */\\n    function bytes32ToString(bytes32 _bytes) public pure returns (string memory) {\\n        bytes memory bytesArray = new bytes(66);\\n        bytesArray[0] = '0';\\n        bytesArray[1] = 'x';\\n        \\n        for (uint256 i = 0; i < 32; i++) {\\n            bytesArray[2 + i*2] = toHexChar(bytes1(uint8(uint8(_bytes[i]) >> 4)));\\n            bytesArray[2 + i*2 + 1] = toHexChar(bytes1(uint8(uint8(_bytes[i]) & 0x0f)));\\n        }\\n        \\n        return string(bytesArray);\\n    }\\n    \\n    /**\\n     * @notice Helper to convert a nibble to its hex character\\n     * @param _nibble The nibble to convert\\n     * @return char The hex character\\n     */\\n    function toHexChar(bytes1 _nibble) internal pure returns (bytes1 char) {\\n        if (uint8(_nibble) < 10) {\\n            return bytes1(uint8(_nibble) + 0x30);\\n        } else {\\n            return bytes1(uint8(_nibble) + 0x57);\\n        }\\n    }\\n\\n    /**\\n     * @notice Generate Matrix rain effect SVG based on tokenId\\n     * @param tokenId The token ID to use for randomization\\n     * @return string The SVG string for matrix effect\\n     */\\n    function generateMatrixRainEffect(bytes32 tokenId) public pure returns (string memory) {\\n        // Generate pseudo-random characters for matrix effect based on tokenId\\n        bytes32 predictableRandom = keccak256(abi.encodePacked(tokenId, \\\"matrix\\\"));\\n        string memory matrixElements = \\\"\\\";\\n        \\n        // Generate 200 matrix \\\"drops\\\" with characters (for more density)\\n        for (uint8 i = 0; i < 200; i++) {\\n            // Create some clustering by dividing the space into sections\\n            uint8 section = i / 15; // 4 sections (0-14, 15-29, 30-44, 45-59)\\n            uint16 sectionWidth = 100; // Each section is 100px wide\\n            \\n            // Use different parts of the predictableRandom hash to place characters\\n            // For x coordinate, cluster within the section with some randomness\\n            uint16 x = (section * sectionWidth) + (uint16(uint8(predictableRandom[i % 32])) % sectionWidth);\\n            \\n            // For y coordinate, distribute more evenly\\n            uint16 y = 20 + (uint16(uint8(predictableRandom[(i+1) % 32])) % 360);\\n            \\n            // Select a character from the matrix charset\\n            uint8 charIndex = uint8(predictableRandom[(i+2) % 32]) % 36; // 0-9, A-Z = 36 chars\\n            string memory character = \\\"\\\";\\n            \\n            if (charIndex < 10) {\\n                // 0-9\\n                character = uint2str(uint256(charIndex));\\n            } else {\\n                // A-Z\\n                character = string(abi.encodePacked(bytes1(uint8(charIndex - 10 + 65))));\\n            }\\n            \\n            // Add font size variation for depth effect (9px to 14px)\\n            uint8 fontSize = 9 + (i % 6);\\n            \\n            // Create animation styles with different falling speeds\\n            uint8 animationGroup = i % 4; // Split into 4 groups for different effects\\n            string memory animationStyle;\\n            \\n            if (animationGroup == 0) {\\n                // Very slow fall\\n                animationStyle = string(abi.encodePacked(\\n                    \\\"font-size:\\\", uint2str(uint256(fontSize)), \\\"px; animation: fade 4s infinite, fall 18s linear infinite;\\\"\\n                ));\\n            } else if (animationGroup == 1) {\\n                // Slow fall speed\\n                animationStyle = string(abi.encodePacked(\\n                    \\\"font-size:\\\", uint2str(uint256(fontSize)), \\\"px; animation: fade 4s infinite, fall 12s linear infinite;\\\"\\n                ));\\n            } else if (animationGroup == 2) {\\n                // Medium fall speed\\n                animationStyle = string(abi.encodePacked(\\n                    \\\"font-size:\\\", uint2str(uint256(fontSize)), \\\"px; animation: fade 4s infinite, fall 9s linear infinite;\\\"\\n                ));\\n            } else {\\n                // Slightly faster fall speed\\n                animationStyle = string(abi.encodePacked(\\n                    \\\"font-size:\\\", uint2str(uint256(fontSize)), \\\"px; animation: fade 4s infinite, fall 7s linear infinite;\\\"\\n                ));\\n            }\\n            \\n            matrixElements = string(abi.encodePacked(\\n                matrixElements,\\n                '<text x=\\\"', uint2str(uint256(x)), '\\\" y=\\\"', uint2str(uint256(y)), \\n                '\\\" class=\\\"matrix-char\\\" style=\\\"', animationStyle, '\\\">',\\n                character,\\n                '</text>'\\n            ));\\n        }\\n        \\n        return matrixElements;\\n    }\\n\\n    /**\\n     * @notice Generate SVG for a Loogie\\n     * @param color Color of the Loogie\\n     * @param chubbiness Chubbiness value\\n     * @param mouthLength Mouth length value\\n     * @param username Username\\n     * @param isUP Whether the owner is a Universal Profile\\n     * @param matrixSeed Seed for the matrix animation\\n     * @return string The SVG string\\n     */\\n    function generateLoogieSVG(\\n        bytes3 color,\\n        uint256 chubbiness,\\n        uint256 mouthLength,\\n        string memory username,\\n        bool isUP,\\n        bytes32 matrixSeed\\n    ) public pure returns (string memory) {\\n        string memory matrixEffect = generateMatrixRainEffect(matrixSeed);\\n        \\n        string memory svg = string(\\n            abi.encodePacked(\\n                '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">',\\n                // Add the Comic Sans font definition to the SVG\\n                '<defs>',\\n                '<style>',\\n                '@font-face {',\\n                'font-family: \\\"Comic Sans MS\\\";',\\n                'src: url(\\\"https://fonts.cdnfonts.com/css/comic-sans\\\");',\\n                '}',\\n                '.username { font-family: \\\"Comic Sans MS\\\", cursive; font-size: 16px; fill: white; }',\\n                '.matrix-char { font-family: monospace; fill: ', \\n                isUP ? \\\"#FF00FF\\\" : \\\"#0F0\\\", \\n                '; opacity: 0.8; }',\\n                '@keyframes fade { 0% { opacity: 0.2; } 30% { opacity: 0.9; } 70% { opacity: 0.9; } 100% { opacity: 0.2; } }',\\n                '@keyframes fall { from { transform: translateY(-20px); } to { transform: translateY(420px); } }',\\n                '</style>',\\n                '</defs>',\\n                // Add a semi-transparent black background rectangle\\n                '<rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"rgba(0,0,0,0.85)\\\" />',\\n                // Matrix rain effect background using SVG elements\\n                '<g class=\\\"matrix-background\\\">',\\n                matrixEffect,\\n                '</g>',\\n                // Add a slightly transparent background for the Loogie to make it stand out\\n                '<g class=\\\"loogie-container\\\">',\\n                '<ellipse cx=\\\"200\\\" cy=\\\"200\\\" rx=\\\"120\\\" ry=\\\"120\\\" fill=\\\"rgba(0,0,0,0.5)\\\" filter=\\\"blur(20px)\\\" />',\\n                // Render the Loogie\\n                renderLoogie(color, chubbiness, mouthLength, username, isUP),\\n                '</g>',\\n                \\\"</svg>\\\"\\n            )\\n        );\\n        return svg;\\n    }\\n    \\n    /**\\n     * @notice Render the Loogie SVG\\n     * @param color Color of the Loogie\\n     * @param chubbiness Chubbiness value\\n     * @param mouthLength Mouth length value\\n     * @param username Username\\n     * @param isUP Whether the owner is a Universal Profile\\n     * @return string The SVG part for the Loogie\\n     */\\n    function renderLoogie(\\n        bytes3 color,\\n        uint256 chubbiness,\\n        uint256 mouthLength,\\n        string memory username,\\n        bool isUP\\n    ) internal pure returns (string memory) {\\n        string memory render = string(\\n            abi.encodePacked(\\n                '<g id=\\\"eye1\\\">',\\n                '<ellipse stroke-width=\\\"3\\\" ry=\\\"29.5\\\" rx=\\\"29.5\\\" id=\\\"svg_1\\\" cy=\\\"154.5\\\" cx=\\\"181.5\\\" stroke=\\\"#000\\\" fill=\\\"#fff\\\"/>',\\n                '<ellipse ry=\\\"3.5\\\" rx=\\\"2.5\\\" id=\\\"svg_3\\\" cy=\\\"154.5\\\" cx=\\\"173.5\\\" stroke-width=\\\"3\\\" stroke=\\\"#000\\\" fill=\\\"#000000\\\"/>',\\n                \\\"</g>\\\",\\n                '<g id=\\\"head\\\">',\\n                '<ellipse fill=\\\"#',\\n                toColorHexString(color),\\n                '\\\" stroke-width=\\\"3\\\" cx=\\\"204.5\\\" cy=\\\"211.80065\\\" id=\\\"svg_5\\\" rx=\\\"',\\n                uint2str(chubbiness),\\n                '\\\" ry=\\\"51.80065\\\" stroke=\\\"#000\\\"/>',\\n                \\\"</g>\\\",\\n                '<g id=\\\"eye2\\\">',\\n                '<ellipse stroke-width=\\\"3\\\" ry=\\\"29.5\\\" rx=\\\"29.5\\\" id=\\\"svg_2\\\" cy=\\\"168.5\\\" cx=\\\"209.5\\\" stroke=\\\"#000\\\" fill=\\\"#fff\\\"/>',\\n                '<ellipse ry=\\\"3.5\\\" rx=\\\"3\\\" id=\\\"svg_4\\\" cy=\\\"169.5\\\" cx=\\\"208\\\" stroke-width=\\\"3\\\" fill=\\\"#000000\\\" stroke=\\\"#000\\\"/>',\\n                \\\"</g>\\\",\\n                '<g class=\\\"mouth\\\" transform=\\\"translate(',\\n                uint2str(uint256((810 - 9 * uint256(chubbiness)) / 11)),\\n                ',0)\\\">',\\n                '<path d=\\\"M 130 240 Q 165 250 ',\\n                uint2str(mouthLength),\\n                ' 235\\\" stroke=\\\"black\\\" stroke-width=\\\"3\\\" fill=\\\"transparent\\\"/>',\\n                \\\"</g>\\\",\\n                // Move the UP username a bit lower (from y=275 to y=290)\\n                '<text x=\\\"200\\\" y=\\\"290\\\" text-anchor=\\\"middle\\\" class=\\\"username\\\" fill=\\\"white\\\" stroke=\\\"black\\\" stroke-width=\\\"0.5\\\">',\\n                username,\\n                '</text>'\\n            )\\n        );\\n        return render;\\n    }\\n    \\n    /**\\n     * @notice Create token metadata following LSP4 standard format\\n     * @param tokenId The token ID\\n     * @param color Color of the Loogie\\n     * @param chubbiness Chubbiness value\\n     * @param mouthLength Mouth length value\\n     * @param username Username\\n     * @param isUP Whether the owner is a Universal Profile\\n     * @param contractAddress Contract address for asset link\\n     * @return raw Raw metadata bytes\\n     * @return encoded Base64 encoded metadata with data URI\\n     */\\n    function createTokenMetadata(\\n        bytes32 tokenId,\\n        bytes3 color,\\n        uint256 chubbiness,\\n        uint256 mouthLength,\\n        string memory username,\\n        bool isUP,\\n        address contractAddress\\n    ) public pure returns (bytes memory raw, bytes memory encoded) {\\n        // Generate SVG\\n        string memory svgImage = generateLoogieSVG(\\n            color,\\n            chubbiness,\\n            mouthLength,\\n            username,\\n            isUP,\\n            keccak256(abi.encodePacked(tokenId, \\\"matrix\\\"))\\n        );\\n        \\n        // Create metadata JSON\\n        string memory tokenName = string(abi.encodePacked(\\\"Loogie #\\\", uint256(uint256(tokenId)).toString()));\\n        string memory description = string(\\n            abi.encodePacked(\\n                \\\"This Loogie is the color #\\\",\\n                toColorHexString(color),\\n                \\\" with a chubbiness of \\\",\\n                uint2str(chubbiness),\\n                \\\" and mouth length of \\\",\\n                uint2str(mouthLength),\\n                \\\"!!!\\\"\\n            )\\n        );\\n        \\n        // Calculate the hash of the SVG for verification\\n        bytes32 svgHash = keccak256(bytes(svgImage));\\n        \\n        // Create the raw metadata with proper LSP4 structure - following the LUKSO standard\\n        raw = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\":{\\\"name\\\":\\\"',\\n            tokenName,\\n            '\\\",\\\"description\\\":\\\"',\\n            description,\\n            '\\\",\\\"links\\\":[{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"},{\\\"title\\\":\\\"View Token\\\",\\\"url\\\":\\\"https://universaleverything.io/asset/',\\n            addressToString(contractAddress),\\n            '/tokenId/',\\n            bytes32ToString(tokenId),\\n            '?network=testnet\\\"}],\\\"images\\\":[[{\\\"width\\\":400,\\\"height\\\":400,\\\"url\\\":\\\"data:image/svg+xml;base64,',\\n            Base64.encode(bytes(svgImage)),\\n            '\\\",\\\"verification\\\":{\\\"method\\\":\\\"keccak256(bytes)\\\",\\\"data\\\":\\\"',\\n            bytes32ToString(svgHash),\\n            '\\\"}}]],\\\"attributes\\\":[{\\\"key\\\":\\\"color\\\",\\\"value\\\":\\\"#',\\n            toColorHexString(color),\\n            '\\\",\\\"type\\\":\\\"string\\\"},{\\\"key\\\":\\\"chubbiness\\\",\\\"value\\\":\\\"',\\n            uint2str(chubbiness),\\n            '\\\",\\\"type\\\":\\\"number\\\"},{\\\"key\\\":\\\"mouthLength\\\",\\\"value\\\":\\\"',\\n            uint2str(mouthLength),\\n            '\\\",\\\"type\\\":\\\"number\\\"},{\\\"key\\\":\\\"upUsername\\\",\\\"value\\\":\\\"',\\n            username,\\n            '\\\",\\\"type\\\":\\\"string\\\"}]}}'\\n        );\\n        \\n        // Create the encoded version (with data URI prefix)\\n        encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(raw)\\n        );\\n        \\n        return (raw, encoded);\\n    }\\n    \\n    /**\\n     * @notice Create collection metadata following LSP4 standard format\\n     * @return raw Raw metadata bytes\\n     * @return encoded Base64 encoded metadata with data URI\\n     */\\n    function createCollectionMetadata() public pure returns (bytes memory raw, bytes memory encoded) {\\n        // Create a simple collection logo SVG\\n        string memory collectionSvg = '<svg width=\\\"400\\\" height=\\\"400\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#000\\\"/><text x=\\\"200\\\" y=\\\"180\\\" font-family=\\\"Arial\\\" font-size=\\\"40\\\" fill=\\\"#fff\\\" text-anchor=\\\"middle\\\">LuksoLoogies</text><text x=\\\"200\\\" y=\\\"230\\\" font-family=\\\"Arial\\\" font-size=\\\"20\\\" fill=\\\"#0f0\\\" text-anchor=\\\"middle\\\">Matrix Edition</text></svg>';\\n        \\n        // Calculate the hash of the SVG for verification\\n        bytes32 svgHash = keccak256(bytes(collectionSvg));\\n        \\n        // Create the collection metadata with proper LSP4 structure - following the LUKSO standard\\n        raw = abi.encodePacked(\\n            '{\\\"LSP4Metadata\\\":{\\\"name\\\":\\\"LuksoLoogies\\\",\\\"description\\\":\\\"LuksoLoogies are LUKSO Standard LSP8 NFTs with a smile :) Only 3728 LuksoLoogies available on a price curve increasing 0.2% with each new mint. This Matrix Edition features animated Matrix-style falling code behind each Loogie.\\\",',\\n            '\\\"links\\\":[{\\\"title\\\":\\\"Website\\\",\\\"url\\\":\\\"https://luksoloogies.vercel.app\\\"},{\\\"title\\\":\\\"Twitter\\\",\\\"url\\\":\\\"https://twitter.com/luksoLoogies\\\"}],',\\n            '\\\"images\\\":[[{\\\"width\\\":400,\\\"height\\\":400,\\\"url\\\":\\\"data:image/svg+xml;base64,',\\n            Base64.encode(bytes(collectionSvg)),\\n            '\\\",\\\"verification\\\":{\\\"method\\\":\\\"keccak256(bytes)\\\",\\\"data\\\":\\\"',\\n            bytes32ToString(svgHash),\\n            '\\\"}}]],',\\n            '\\\"assets\\\":[],\\\"attributes\\\":[{\\\"key\\\":\\\"type\\\",\\\"value\\\":\\\"collection\\\",\\\"type\\\":\\\"string\\\"},{\\\"key\\\":\\\"style\\\",\\\"value\\\":\\\"matrix\\\",\\\"type\\\":\\\"string\\\"}]}}'\\n        );\\n        \\n        // Create the encoded version (with data URI prefix)\\n        encoded = abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(raw)\\n        );\\n        \\n        return (raw, encoded);\\n    }\\n} \",\"keccak256\":\"0x4b9990d064370f2b0f8755e4b4a3843b8a958c72f6e51349a62bcd053c96fa7d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761253a908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600090813560e01c9081633bdf428a1461090a575080635e57966d146108d857806376799136146108b15780638494c87a1461084d5780639201de551461082d578063aef5bb73146100d5578063cfafca00146100b55763f76f950e1461007c57600080fd5b346100b25760203660031901126100b2575061009b6100ae923561113d565b9051918291602083526020830190610e71565b0390f35b80fd5b50346100b25760203660031901126100b2575061009b6100ae92356113fa565b5090346108295760e0366003190112610829576024359183356001600160e81b03198416840361082957604435906064356084356001600160401b038111610825576101249036908901610f7f565b9260a4359687151588036108215760c435906001600160a01b038216820361081d5787519161018060209a848c80960190898252650dac2e8e4d2f60d31b8d8201526026815261017381610eda565b519020908988888761195c565b9a869081908a9072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80841015610810575b50866904ee2d6d415b85acef8160201b80861015610801575b5050662386f26fc10000808510156107f2575b506305f5e100808510156107e3575b50612710808510156107d7575b505060648310156107c9575b600a809310156107c1575b906021916001928161021a85809401610fc6565b9d508d0101905b61078b575b5050505088519a8b84810199674c6f6f676965202360c01b8b5280519081876028850192019161025592610e4e565b810103600881018d5260280161026b908d610f41565b61027483611044565b9661027e8661113d565b976102888861113d565b988c51998a91888301937954686973204c6f6f6769652069732074686520636f6c6f72202360301b8552805190818b603a87019201916102c792610e4e565b8301603a8101750103bb4ba3410309031b43ab13134b732b9b99037b3160551b9052815191828b605084019201916102fe92610e4e565b01605081017401030b7321036b7baba34103632b733ba341037b31605d1b9052815191828a6065840192019161033392610e4e565b01606581016221212160e81b905203604881018a52606801610355908a610f41565b82518684012093610365906111d5565b9161036f906112e2565b9261037990612370565b93610383906112e2565b9461038d90611044565b966103979061113d565b976103a19061113d565b988c519e8f9c8d91783d912629a81a26b2ba30b230ba30911d3d913730b6b2911d1160391b8a8401525160398193016103d992610e4e565b8c0190701116113232b9b1b934b83a34b7b7111d1160791b6039830152519182604a830161040692610e4e565b7f222c226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275604a92909101918201527f726c223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c606a8201527f2e617070227d2c7b227469746c65223a225669657720546f6b656e222c227572608a8201527f6c223a2268747470733a2f2f756e6976657273616c65766572797468696e672e60aa82015268696f2f61737365742f60b81b60ca8201528151916104ca90839060d38401908901610e4e565b0160d38101682f746f6b656e49642f60b81b9052815191828660dc84019201916104f392610e4e565b0160dc81017f3f6e6574776f726b3d746573746e6574227d5d2c22696d61676573223a5b5b7b905260fc81017f227769647468223a3430302c22686569676874223a3430302c2275726c223a22905261011c81017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b905281519061013692828685840192019161057f92610e4e565b010161058a90612328565b81819251938491019161059c92610e4e565b017f227d7d5d5d2c2261747472696275746573223a5b7b226b6579223a22636f6c6f81526c72222c2276616c7565223a222360981b888201528151918289602d84019201916105ea92610e4e565b01602d81017f222c2274797065223a22737472696e67227d2c7b226b6579223a22636875626290526f34b732b9b99116113b30b63ab2911d1160811b604d8201528151918288605d840192019161064092610e4e565b01605d81017f222c2274797065223a226e756d626572227d2c7b226b6579223a226d6f7574689052702632b733ba341116113b30b63ab2911d1160791b607d8201528151918287608e840192019161069792610e4e565b01608e81017f222c2274797065223a226e756d626572227d2c7b226b6579223a22757055736590526f393730b6b29116113b30b63ab2911d1160811b60ae820152815191828660be84019201916106ed92610e4e565b0174222c2274797065223a22737472696e67227d5d7d7d60581b60be8201520360b38101845260d3016107209084610f41565b61072983612370565b81517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000084820152815190938492610767918391603d86019101610e4e565b810103601d81018352603d0161077d9083610f41565b519182916100ae9183610e96565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156107bc57919082610221565b610226565b600101610206565b9160646002910492016101fb565b909304920138806101ef565b600891929404930190386101e2565b601091929404930190386101d3565b909192940493019086386101c0565b8a0493508c9150386101a7565b8680fd5b8580fd5b8480fd5b5080fd5b50346100b25760203660031901126100b2575061009b6100ae92356112e2565b50346100b25760c03660031901126100b257610867610ebe565b926064356001600160401b0381116108ad5761088591369101610f7f565b6084359182151583036100b257509261009b916100ae9460a43592604435906024359061195c565b8280fd5b509034610829576020366003190112610829576100ae9061009b6108d3610ebe565b611044565b5091346108ad5760203660031901126108ad5735916001600160a01b03831683036100b2575061009b6100ae926111d5565b838584346100b257806003193601126100b2576101808401916001600160401b03831185841017610e3b575050815261014f9081835260209182808501946000805160206124c583398151915286528381016000805160206124e58339815191529052606081017f3e3c726563742077696474683d2234303022206865696768743d2234303022209052608081017f66696c6c3d2223303030222f3e3c7465787420783d223230302220793d223138905260a081017f302220666f6e742d66616d696c793d22417269616c2220666f6e742d73697a65905260c081017f3d223430222066696c6c3d22236666662220746578742d616e63686f723d226d905260e081017f6964646c65223e4c756b736f4c6f6f676965733c2f746578743e3c74657874209052610100928382017f783d223230302220793d223233302220666f6e742d66616d696c793d224172699052610120968783017f616c2220666f6e742d73697a653d223230222066696c6c3d2223306630222074905261014083017f6578742d616e63686f723d226d6964646c65223e4d6174726978204564697469905261016083016e37b71e17ba32bc3a1f1e17b9bb339f60891b90522090610ad190612370565b90610adb906112e2565b84517f7b224c5350344d65746164617461223a7b226e616d65223a224c756b736f4c6f848201527f6f67696573222c226465736372697074696f6e223a224c756b736f4c6f6f6769818701527f657320617265204c554b534f205374616e64617264204c535038204e4654732060608201527f77697468206120736d696c65203a29204f6e6c792033373238204c756b736f4c60808201527f6f6f6769657320617661696c61626c65206f6e2061207072696365206375727660a08201527f6520696e6372656173696e6720302e322520776974682065616368206e65772060c08201527f6d696e742e2054686973204d61747269782045646974696f6e2066656174757260e08201527f657320616e696d61746564204d61747269782d7374796c652066616c6c696e67948101949094527a0818dbd9194818995a1a5b9908195858da08131bdbd9da594b888b602a1b968401969096527f226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275726c61013b8401527f223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c2e6161015b8401527f7070227d2c7b227469746c65223a2254776974746572222c2275726c223a226861017b8401527f747470733a2f2f747769747465722e636f6d2f6c756b736f4c6f6f676965732261019b840152621f574b60ea1b6101bb8401527f22696d61676573223a5b5b7b227769647468223a3430302c22686569676874226101be8401527f3a3430302c2275726c223a22646174613a696d6167652f7376672b786d6c3b626101de84015265185cd94d8d0b60d21b6101fe84015280519295869390916102049190610d58908290848801908701610e4e565b840101610d6490612328565b818192519384910191610d7692610e4e565b65089f5f57574b60d21b91019081527f22617373657473223a5b5d2c2261747472696275746573223a5b7b226b65792260068201527f3a2274797065222c2276616c7565223a22636f6c6c656374696f6e222c22747960268201527f7065223a22737472696e67227d2c7b226b6579223a227374796c65222c22766160468201527f6c7565223a226d6174726978222c2274797065223a22737472696e67227d5d7d6066820152607d60f81b6086820152036067810184526107209060870184610f41565b634e487b7160e01b825260419052602490fd5b60005b838110610e615750506000910152565b8181015183820152602001610e51565b90602091610e8a81518092818552858086019101610e4e565b601f01601f1916010190565b9091610ead610ebb93604084526040840190610e71565b916020818403910152610e71565b90565b600435906001600160e81b031982168203610ed557565b600080fd5b606081019081106001600160401b03821117610ef557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610ef557604052565b602081019081106001600160401b03821117610ef557604052565b601f909101601f19168101906001600160401b03821190821017610ef557604052565b6001600160401b038111610ef557601f01601f191660200190565b81601f82011215610ed557803590610f9682610f64565b92610fa46040519485610f41565b82845260208383010111610ed557816000926020809301838601378301015290565b90610fd082610f64565b610fdd6040519182610f41565b8281528092610fee601f1991610f64565b0190602036910137565b60001981146110075760010190565b634e487b7160e01b600052601160045260246000fd5b90815181101561102e570160200190565b634e487b7160e01b600052603260045260246000fd5b60405161105081610f0b565b601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201526040519161107a83610f0b565b600683526020368185013760005b600381106110965750505090565b6001600160f81b031982821a6004826110b483831c60ff168861101d565b51169260019285841b9486860460021487151715611128576110e891600f9160001a6110e0888d61101d565b53168861101d565b511691830180931161111357509061110861110e939260001a918761101d565b53610ff8565b611088565b601190634e487b7160e01b6000525260246000fd5b601184634e487b7160e01b6000525260246000fd5b80156111b75780816000925b6111a3575061115782610fc6565b9190805b61116457505090565b600a90603092828206840180941161100757801561100757600019019260f81b6001600160f81b03191660001a61119b848661101d565b53048061115b565b916111af600a91610ff8565b920480611149565b506040516111c481610f0b565b60018152600360fc1b602082015290565b60405160609190911b6001600160601b03191660208201526014808252906111fc81610f0b565b6040519161120983610eda565b602a835260208301604036823783511561102e576030905382519160019283101561102e576078602185015360005b828110611246575050505090565b611250818361101d565b51600f60f81b61127281611264858761101d565b511691600493841c166113b8565b9183871b916002938584048514861517156112cd578385018095116112cd576003916112ab9160001a6112a5878d61101d565b536113b8565b92018093116111135750906111086112c8939260001a918861101d565b611238565b601183634e487b7160e01b6000525260246000fd5b60405190608082016001600160401b03811183821017610ef557604052604282526020808301606036823783511561102e576030905382519160019283101561102e576078602185015360005b82811061133d575050505090565b81811a9061135860f483901b6001600160f81b0319166113b8565b81861b9260029183850483148415171561100757848301809311611007576003916113999160001a61138a858c61101d565b5360f81b600f60f81b166113b8565b9301809111611007576111086113b39360001a918861101d565b61132f565b60f81c600a8110156113df5760300160ff81116110075760f81b6001600160f81b03191690565b60570160ff81116110075760f81b6001600160f81b03191690565b6040805191602092838101918252650dac2e8e4d2f60d31b838201526026815261142381610eda565b5190209281519261143384610f26565b6000938481529184925b60ff9081851660c8811015611950576064928381600f840416029361ffff9081861695860361193c57601f95868a16898110156119285782848f81931a1606160192828411611914576001968786018281116118ec5781168a811015611900576101688f86929083911a160616601401978489116118ec576002918288018481116118d757168b8110156118c357908f94938f8f9382959491839251906114e382610f26565b9052602497901a87900616600a8110156118695761150260069161113d565b995b0616600901948386116118575750858f8f978f8f96986116bd9d9b9860549d9b89661e17ba32bc3a1f60c91b9c7f2220636c6173733d226d61747269782d6368617222207374796c653d220000009a6116069861160d9b60037f70783b20616e696d6174696f6e3a206661646520347320696e66696e6974652c9916915081156000146116e75750505061159c906115fe951661113d565b9151948592693337b73a16b9b4bd329d60b11b838501526115c781518092602a958688019101610e4e565b830191820152792066616c6c20313873206c696e65617220696e66696e6974653b60301b604a820152036044810184520182610f41565b965b1661113d565b9a1661113d565b8d5199876116248c9951809287808d019101610e4e565b8801681e3a32bc3a103c1e9160b91b8582015281519061164c82602994888685019101610e4e565b01906411103c9e9160d91b9082015261166f82518093602e968785019101610e4e565b019182015281519061168982604b948d8685019101610e4e565b019061111f60f11b908201528251906116aa82604d958c8785019101610e4e565b0191820152036034810184520182610f41565b9260ff8091169081146116d3576001019261143d565b634e487b7160e01b86526011600452602486fd5b81036117655750506116fd9061175f951661113d565b9151948592693337b73a16b9b4bd329d60b11b8385015261172881518092602a958688019101610e4e565b830191820152792066616c6c20313273206c696e65617220696e66696e6974653b60301b604a820152036044810184520182610f41565b96611600565b93959294509092036117e4579161178361175f94926063941661113d565b9151948592693337b73a16b9b4bd329d60b11b838501526117ae81518092602a958688019101610e4e565b830191820152782066616c6c203973206c696e65617220696e66696e6974653b60381b604a820152036043810184520182610f41565b916117f661175f94926063941661113d565b9151948592693337b73a16b9b4bd329d60b11b8385015261182181518092602a958688019101610e4e565b830191820152782066616c6c203773206c696e65617220696e66696e6974653b60381b604a820152036043810184520182610f41565b8f634e487b7160e01b81526011600452fd5b6009190190508381116118af5783166041018381116118af578e5160f89190911b6001600160f81b031916818e015281815283906006906118a981610f0b565b99611504565b50634e487b7160e01b8f526011600452848ffd5b634e487b7160e01b8f52603260045260248ffd5b50634e487b7160e01b8f52601160045260248ffd5b634e487b7160e01b8e52601160045260248efd5b634e487b7160e01b8e52603260045260248efd5b634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8d52603260045260248dfd5b634e487b7160e01b8b52601160045260248bfd5b50955050945050505090565b94611969909392936113fa565b93156123025761199860405161197e81610f0b565b600781526611a3231818232360c91b602082015295611044565b936119a28261113d565b94826009029260098404036110075761032a92830383811161100757600b90046119cb9061113d565b946119d59061113d565b9160405180958194602096878401996c1e339034b21e9132bcb298911f60991b8b52887f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323980602d880152604d87017f2e35222072783d2232392e35222069643d227376675f31222063793d223135349052606d87017f2e35222063783d223138312e3522207374726f6b653d2223303030222066696c905269361e9111b3333311179f60b11b9081608d890152609788017f3c656c6c697073652072793d22332e35222072783d22322e35222069643d2273905260b788017f76675f33222063793d223135342e35222063783d223137332e3522207374726f905260d788017f6b652d77696474683d223322207374726f6b653d2223303030222066696c6c3d90526a111198181818181811179f60a91b60f7890152631e17b39f60e11b9e8f9d8e9b8c6101028301526c1e339034b21e913432b0b2111f60991b6101068301526f3c656c6c697073652066696c6c3d222360801b6101138301528051908187610123809501920191611b6792610e4e565b7f22207374726f6b652d77696474683d2233222063783d223230342e3522206379908b01918201527b1e91191898971c18181b1a911034b21e9139bb33af9a9110393c1e9160211b610143820152815161015f959092611bcd9184918885019101610e4e565b7f222072793d2235312e383030363522207374726f6b653d2223303030222f3e0091019384015261017e8084019f909f526c1e339034b21e9132bcb299111f60991b61018284015261018f8301527f2e35222072783d2232392e35222069643d227376675f32222063793d223136386101af8301527f2e35222063783d223230392e3522207374726f6b653d2223303030222066696c6101cf8301526101ef8201527f3c656c6c697073652072793d22332e35222072783d2233222069643d227376676101f98201527f5f34222063793d223136392e35222063783d2232303822207374726f6b652d776102198201527f696474683d2233222066696c6c3d222330303030303022207374726f6b653d22610239820152661198181811179f60c91b61025982015261026081018890527f3c6720636c6173733d226d6f75746822207472616e73666f726d3d227472616e610264820152650e6d8c2e8ca560d31b610284820152815161028a92909190611d4e908390858401908e01610e4e565b64161814911f60d91b9101918201527f3c7061746820643d224d2031333020323430205120313635203235302000000061028f82015282516102ac93909190611d9e908390868401908d01610e4e565b7f2032333522207374726f6b653d22626c61636b22207374726f6b652d7769647491019283015279341e911991103334b6361e913a3930b739b830b932b73a11179f60311b6102cc8301526102e682018690527f3c7465787420783d223230302220793d223239302220746578742d616e63686f6102ea8301527f723d226d6964646c652220636c6173733d22757365726e616d65222066696c6c61030a8301527f3d22776869746522207374726f6b653d22626c61636b22207374726f6b652d77908201526a34b23a341e9118171a911f60a91b61034a820152815161035592909190611e93908390858401908b01610e4e565b01908101661e17ba32bc3a1f60c91b90520361033c8101845261035c01611eba9084610f41565b604080516000805160206124c5833981519152868201526000805160206124e583398151915291810191909152601f60f91b6060820152651e3232b3399f60d11b6061820152661e39ba3cb6329f60c91b60678201526b40666f6e742d66616365207b60a01b606e8201527f666f6e742d66616d696c793a2022436f6d69632053616e73204d53223b000000607a8201527f7372633a2075726c282268747470733a2f2f666f6e74732e63646e666f6e74736097820152752e636f6d2f6373732f636f6d69632d73616e7322293b60501b60b7820152607d60f81b60cd8201527f2e757365726e616d65207b20666f6e742d66616d696c793a2022436f6d69632060ce8201527f53616e73204d53222c20637572736976653b20666f6e742d73697a653a20313660ee8201527170783b2066696c6c3a2077686974653b207d60701b61010e8201527f2e6d61747269782d63686172207b20666f6e742d66616d696c793a206d6f6e6f6101208201526c039b830b1b29d903334b6361d1609d1b61014082015288519098899861014d92909161205d908290858d01908a01610e4e565b703b206f7061636974793a20302e383b207d60781b908a01928301527f406b65796672616d65732066616465207b203025207b206f7061636974793a2061015e8301527f302e323b207d20333025207b206f7061636974793a20302e393b207d20373025908201527f207b206f7061636974793a20302e393b207d2031303025207b206f706163697461019e8201526a793a20302e323b207d207d60a81b6101be8201527f406b65796672616d65732066616c6c207b2066726f6d207b207472616e73666f6101c98201527f726d3a207472616e736c61746559282d32307078293b207d20746f207b2074726101e98201527f616e73666f726d3a207472616e736c61746559283432307078293b207d207d00610209820152671e17b9ba3cb6329f60c11b610228820152661e17b232b3399f60c91b6102308201527f3c726563742077696474683d2234303022206865696768743d223430302220666102378201527834b6361e913933b1309418161816181618171c1a949110179f60391b6102578201527f3c6720636c6173733d226d61747269782d6261636b67726f756e64223e000000610270820152815161028d9590926122229184918885019101610e4e565b01928301527b1e339031b630b9b99e913637b7b3b4b296b1b7b73a30b4b732b9111f60211b6102918301527f3c656c6c697073652063783d22323030222063793d22323030222072783d22316102ad8301527f3230222072793d22313230222066696c6c3d227267626128302c302c302c302e6102cd830152791a9491103334b63a32b91e9131363ab9141918383c149110179f60311b6102ed83015251610307939091906122d690839086840190610e4e565b019182015261030b8101651e17b9bb339f60d11b9052036102f18101825261031101610ebb9082610f41565b61199860405161231181610f0b565b60048152630233046360e41b602082015295611044565b7f222c22766572696669636174696f6e223a7b226d6574686f64223a226b65636381527530b5991a9b14313cba32b9949116113230ba30911d1160511b602082015260360190565b8051156124b0576040519061238482610eda565b604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051600291828201809211611007576003918290046001600160fe1b038116810361100757612406908495941b610fc6565b936020850193829183518401906020820192835194600085525b83811061245f57505050505251068060011461244c57600214612441575090565b603d90600019015390565b50603d9081600019820153600119015390565b87600491999293949901918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151898201530197929190612420565b506040516124bd81610f26565b600081529056fe3c7376672077696474683d2234303022206865696768743d223430302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722a264697066735822122054f03b54be25425fc0d0ab61b3f96faf34c4e711f8bc023e96dc123e4ce0384364736f6c63430008110033",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600090813560e01c9081633bdf428a1461090a575080635e57966d146108d857806376799136146108b15780638494c87a1461084d5780639201de551461082d578063aef5bb73146100d5578063cfafca00146100b55763f76f950e1461007c57600080fd5b346100b25760203660031901126100b2575061009b6100ae923561113d565b9051918291602083526020830190610e71565b0390f35b80fd5b50346100b25760203660031901126100b2575061009b6100ae92356113fa565b5090346108295760e0366003190112610829576024359183356001600160e81b03198416840361082957604435906064356084356001600160401b038111610825576101249036908901610f7f565b9260a4359687151588036108215760c435906001600160a01b038216820361081d5787519161018060209a848c80960190898252650dac2e8e4d2f60d31b8d8201526026815261017381610eda565b519020908988888761195c565b9a869081908a9072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b80841015610810575b50866904ee2d6d415b85acef8160201b80861015610801575b5050662386f26fc10000808510156107f2575b506305f5e100808510156107e3575b50612710808510156107d7575b505060648310156107c9575b600a809310156107c1575b906021916001928161021a85809401610fc6565b9d508d0101905b61078b575b5050505088519a8b84810199674c6f6f676965202360c01b8b5280519081876028850192019161025592610e4e565b810103600881018d5260280161026b908d610f41565b61027483611044565b9661027e8661113d565b976102888861113d565b988c51998a91888301937954686973204c6f6f6769652069732074686520636f6c6f72202360301b8552805190818b603a87019201916102c792610e4e565b8301603a8101750103bb4ba3410309031b43ab13134b732b9b99037b3160551b9052815191828b605084019201916102fe92610e4e565b01605081017401030b7321036b7baba34103632b733ba341037b31605d1b9052815191828a6065840192019161033392610e4e565b01606581016221212160e81b905203604881018a52606801610355908a610f41565b82518684012093610365906111d5565b9161036f906112e2565b9261037990612370565b93610383906112e2565b9461038d90611044565b966103979061113d565b976103a19061113d565b988c519e8f9c8d91783d912629a81a26b2ba30b230ba30911d3d913730b6b2911d1160391b8a8401525160398193016103d992610e4e565b8c0190701116113232b9b1b934b83a34b7b7111d1160791b6039830152519182604a830161040692610e4e565b7f222c226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275604a92909101918201527f726c223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c606a8201527f2e617070227d2c7b227469746c65223a225669657720546f6b656e222c227572608a8201527f6c223a2268747470733a2f2f756e6976657273616c65766572797468696e672e60aa82015268696f2f61737365742f60b81b60ca8201528151916104ca90839060d38401908901610e4e565b0160d38101682f746f6b656e49642f60b81b9052815191828660dc84019201916104f392610e4e565b0160dc81017f3f6e6574776f726b3d746573746e6574227d5d2c22696d61676573223a5b5b7b905260fc81017f227769647468223a3430302c22686569676874223a3430302c2275726c223a22905261011c81017919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b905281519061013692828685840192019161057f92610e4e565b010161058a90612328565b81819251938491019161059c92610e4e565b017f227d7d5d5d2c2261747472696275746573223a5b7b226b6579223a22636f6c6f81526c72222c2276616c7565223a222360981b888201528151918289602d84019201916105ea92610e4e565b01602d81017f222c2274797065223a22737472696e67227d2c7b226b6579223a22636875626290526f34b732b9b99116113b30b63ab2911d1160811b604d8201528151918288605d840192019161064092610e4e565b01605d81017f222c2274797065223a226e756d626572227d2c7b226b6579223a226d6f7574689052702632b733ba341116113b30b63ab2911d1160791b607d8201528151918287608e840192019161069792610e4e565b01608e81017f222c2274797065223a226e756d626572227d2c7b226b6579223a22757055736590526f393730b6b29116113b30b63ab2911d1160811b60ae820152815191828660be84019201916106ed92610e4e565b0174222c2274797065223a22737472696e67227d5d7d7d60581b60be8201520360b38101845260d3016107209084610f41565b61072983612370565b81517f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000084820152815190938492610767918391603d86019101610e4e565b810103601d81018352603d0161077d9083610f41565b519182916100ae9183610e96565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156107bc57919082610221565b610226565b600101610206565b9160646002910492016101fb565b909304920138806101ef565b600891929404930190386101e2565b601091929404930190386101d3565b909192940493019086386101c0565b8a0493508c9150386101a7565b8680fd5b8580fd5b8480fd5b5080fd5b50346100b25760203660031901126100b2575061009b6100ae92356112e2565b50346100b25760c03660031901126100b257610867610ebe565b926064356001600160401b0381116108ad5761088591369101610f7f565b6084359182151583036100b257509261009b916100ae9460a43592604435906024359061195c565b8280fd5b509034610829576020366003190112610829576100ae9061009b6108d3610ebe565b611044565b5091346108ad5760203660031901126108ad5735916001600160a01b03831683036100b2575061009b6100ae926111d5565b838584346100b257806003193601126100b2576101808401916001600160401b03831185841017610e3b575050815261014f9081835260209182808501946000805160206124c583398151915286528381016000805160206124e58339815191529052606081017f3e3c726563742077696474683d2234303022206865696768743d2234303022209052608081017f66696c6c3d2223303030222f3e3c7465787420783d223230302220793d223138905260a081017f302220666f6e742d66616d696c793d22417269616c2220666f6e742d73697a65905260c081017f3d223430222066696c6c3d22236666662220746578742d616e63686f723d226d905260e081017f6964646c65223e4c756b736f4c6f6f676965733c2f746578743e3c74657874209052610100928382017f783d223230302220793d223233302220666f6e742d66616d696c793d224172699052610120968783017f616c2220666f6e742d73697a653d223230222066696c6c3d2223306630222074905261014083017f6578742d616e63686f723d226d6964646c65223e4d6174726978204564697469905261016083016e37b71e17ba32bc3a1f1e17b9bb339f60891b90522090610ad190612370565b90610adb906112e2565b84517f7b224c5350344d65746164617461223a7b226e616d65223a224c756b736f4c6f848201527f6f67696573222c226465736372697074696f6e223a224c756b736f4c6f6f6769818701527f657320617265204c554b534f205374616e64617264204c535038204e4654732060608201527f77697468206120736d696c65203a29204f6e6c792033373238204c756b736f4c60808201527f6f6f6769657320617661696c61626c65206f6e2061207072696365206375727660a08201527f6520696e6372656173696e6720302e322520776974682065616368206e65772060c08201527f6d696e742e2054686973204d61747269782045646974696f6e2066656174757260e08201527f657320616e696d61746564204d61747269782d7374796c652066616c6c696e67948101949094527a0818dbd9194818995a1a5b9908195858da08131bdbd9da594b888b602a1b968401969096527f226c696e6b73223a5b7b227469746c65223a2257656273697465222c2275726c61013b8401527f223a2268747470733a2f2f6c756b736f6c6f6f676965732e76657263656c2e6161015b8401527f7070227d2c7b227469746c65223a2254776974746572222c2275726c223a226861017b8401527f747470733a2f2f747769747465722e636f6d2f6c756b736f4c6f6f676965732261019b840152621f574b60ea1b6101bb8401527f22696d61676573223a5b5b7b227769647468223a3430302c22686569676874226101be8401527f3a3430302c2275726c223a22646174613a696d6167652f7376672b786d6c3b626101de84015265185cd94d8d0b60d21b6101fe84015280519295869390916102049190610d58908290848801908701610e4e565b840101610d6490612328565b818192519384910191610d7692610e4e565b65089f5f57574b60d21b91019081527f22617373657473223a5b5d2c2261747472696275746573223a5b7b226b65792260068201527f3a2274797065222c2276616c7565223a22636f6c6c656374696f6e222c22747960268201527f7065223a22737472696e67227d2c7b226b6579223a227374796c65222c22766160468201527f6c7565223a226d6174726978222c2274797065223a22737472696e67227d5d7d6066820152607d60f81b6086820152036067810184526107209060870184610f41565b634e487b7160e01b825260419052602490fd5b60005b838110610e615750506000910152565b8181015183820152602001610e51565b90602091610e8a81518092818552858086019101610e4e565b601f01601f1916010190565b9091610ead610ebb93604084526040840190610e71565b916020818403910152610e71565b90565b600435906001600160e81b031982168203610ed557565b600080fd5b606081019081106001600160401b03821117610ef557604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117610ef557604052565b602081019081106001600160401b03821117610ef557604052565b601f909101601f19168101906001600160401b03821190821017610ef557604052565b6001600160401b038111610ef557601f01601f191660200190565b81601f82011215610ed557803590610f9682610f64565b92610fa46040519485610f41565b82845260208383010111610ed557816000926020809301838601378301015290565b90610fd082610f64565b610fdd6040519182610f41565b8281528092610fee601f1991610f64565b0190602036910137565b60001981146110075760010190565b634e487b7160e01b600052601160045260246000fd5b90815181101561102e570160200190565b634e487b7160e01b600052603260045260246000fd5b60405161105081610f0b565b601081526f181899199a1a9b1b9c1cb0b131b232b360811b60208201526040519161107a83610f0b565b600683526020368185013760005b600381106110965750505090565b6001600160f81b031982821a6004826110b483831c60ff168861101d565b51169260019285841b9486860460021487151715611128576110e891600f9160001a6110e0888d61101d565b53168861101d565b511691830180931161111357509061110861110e939260001a918761101d565b53610ff8565b611088565b601190634e487b7160e01b6000525260246000fd5b601184634e487b7160e01b6000525260246000fd5b80156111b75780816000925b6111a3575061115782610fc6565b9190805b61116457505090565b600a90603092828206840180941161100757801561100757600019019260f81b6001600160f81b03191660001a61119b848661101d565b53048061115b565b916111af600a91610ff8565b920480611149565b506040516111c481610f0b565b60018152600360fc1b602082015290565b60405160609190911b6001600160601b03191660208201526014808252906111fc81610f0b565b6040519161120983610eda565b602a835260208301604036823783511561102e576030905382519160019283101561102e576078602185015360005b828110611246575050505090565b611250818361101d565b51600f60f81b61127281611264858761101d565b511691600493841c166113b8565b9183871b916002938584048514861517156112cd578385018095116112cd576003916112ab9160001a6112a5878d61101d565b536113b8565b92018093116111135750906111086112c8939260001a918861101d565b611238565b601183634e487b7160e01b6000525260246000fd5b60405190608082016001600160401b03811183821017610ef557604052604282526020808301606036823783511561102e576030905382519160019283101561102e576078602185015360005b82811061133d575050505090565b81811a9061135860f483901b6001600160f81b0319166113b8565b81861b9260029183850483148415171561100757848301809311611007576003916113999160001a61138a858c61101d565b5360f81b600f60f81b166113b8565b9301809111611007576111086113b39360001a918861101d565b61132f565b60f81c600a8110156113df5760300160ff81116110075760f81b6001600160f81b03191690565b60570160ff81116110075760f81b6001600160f81b03191690565b6040805191602092838101918252650dac2e8e4d2f60d31b838201526026815261142381610eda565b5190209281519261143384610f26565b6000938481529184925b60ff9081851660c8811015611950576064928381600f840416029361ffff9081861695860361193c57601f95868a16898110156119285782848f81931a1606160192828411611914576001968786018281116118ec5781168a811015611900576101688f86929083911a160616601401978489116118ec576002918288018481116118d757168b8110156118c357908f94938f8f9382959491839251906114e382610f26565b9052602497901a87900616600a8110156118695761150260069161113d565b995b0616600901948386116118575750858f8f978f8f96986116bd9d9b9860549d9b89661e17ba32bc3a1f60c91b9c7f2220636c6173733d226d61747269782d6368617222207374796c653d220000009a6116069861160d9b60037f70783b20616e696d6174696f6e3a206661646520347320696e66696e6974652c9916915081156000146116e75750505061159c906115fe951661113d565b9151948592693337b73a16b9b4bd329d60b11b838501526115c781518092602a958688019101610e4e565b830191820152792066616c6c20313873206c696e65617220696e66696e6974653b60301b604a820152036044810184520182610f41565b965b1661113d565b9a1661113d565b8d5199876116248c9951809287808d019101610e4e565b8801681e3a32bc3a103c1e9160b91b8582015281519061164c82602994888685019101610e4e565b01906411103c9e9160d91b9082015261166f82518093602e968785019101610e4e565b019182015281519061168982604b948d8685019101610e4e565b019061111f60f11b908201528251906116aa82604d958c8785019101610e4e565b0191820152036034810184520182610f41565b9260ff8091169081146116d3576001019261143d565b634e487b7160e01b86526011600452602486fd5b81036117655750506116fd9061175f951661113d565b9151948592693337b73a16b9b4bd329d60b11b8385015261172881518092602a958688019101610e4e565b830191820152792066616c6c20313273206c696e65617220696e66696e6974653b60301b604a820152036044810184520182610f41565b96611600565b93959294509092036117e4579161178361175f94926063941661113d565b9151948592693337b73a16b9b4bd329d60b11b838501526117ae81518092602a958688019101610e4e565b830191820152782066616c6c203973206c696e65617220696e66696e6974653b60381b604a820152036043810184520182610f41565b916117f661175f94926063941661113d565b9151948592693337b73a16b9b4bd329d60b11b8385015261182181518092602a958688019101610e4e565b830191820152782066616c6c203773206c696e65617220696e66696e6974653b60381b604a820152036043810184520182610f41565b8f634e487b7160e01b81526011600452fd5b6009190190508381116118af5783166041018381116118af578e5160f89190911b6001600160f81b031916818e015281815283906006906118a981610f0b565b99611504565b50634e487b7160e01b8f526011600452848ffd5b634e487b7160e01b8f52603260045260248ffd5b50634e487b7160e01b8f52601160045260248ffd5b634e487b7160e01b8e52601160045260248efd5b634e487b7160e01b8e52603260045260248efd5b634e487b7160e01b8c52601160045260248cfd5b634e487b7160e01b8d52603260045260248dfd5b634e487b7160e01b8b52601160045260248bfd5b50955050945050505090565b94611969909392936113fa565b93156123025761199860405161197e81610f0b565b600781526611a3231818232360c91b602082015295611044565b936119a28261113d565b94826009029260098404036110075761032a92830383811161100757600b90046119cb9061113d565b946119d59061113d565b9160405180958194602096878401996c1e339034b21e9132bcb298911f60991b8b52887f3c656c6c69707365207374726f6b652d77696474683d2233222072793d22323980602d880152604d87017f2e35222072783d2232392e35222069643d227376675f31222063793d223135349052606d87017f2e35222063783d223138312e3522207374726f6b653d2223303030222066696c905269361e9111b3333311179f60b11b9081608d890152609788017f3c656c6c697073652072793d22332e35222072783d22322e35222069643d2273905260b788017f76675f33222063793d223135342e35222063783d223137332e3522207374726f905260d788017f6b652d77696474683d223322207374726f6b653d2223303030222066696c6c3d90526a111198181818181811179f60a91b60f7890152631e17b39f60e11b9e8f9d8e9b8c6101028301526c1e339034b21e913432b0b2111f60991b6101068301526f3c656c6c697073652066696c6c3d222360801b6101138301528051908187610123809501920191611b6792610e4e565b7f22207374726f6b652d77696474683d2233222063783d223230342e3522206379908b01918201527b1e91191898971c18181b1a911034b21e9139bb33af9a9110393c1e9160211b610143820152815161015f959092611bcd9184918885019101610e4e565b7f222072793d2235312e383030363522207374726f6b653d2223303030222f3e0091019384015261017e8084019f909f526c1e339034b21e9132bcb299111f60991b61018284015261018f8301527f2e35222072783d2232392e35222069643d227376675f32222063793d223136386101af8301527f2e35222063783d223230392e3522207374726f6b653d2223303030222066696c6101cf8301526101ef8201527f3c656c6c697073652072793d22332e35222072783d2233222069643d227376676101f98201527f5f34222063793d223136392e35222063783d2232303822207374726f6b652d776102198201527f696474683d2233222066696c6c3d222330303030303022207374726f6b653d22610239820152661198181811179f60c91b61025982015261026081018890527f3c6720636c6173733d226d6f75746822207472616e73666f726d3d227472616e610264820152650e6d8c2e8ca560d31b610284820152815161028a92909190611d4e908390858401908e01610e4e565b64161814911f60d91b9101918201527f3c7061746820643d224d2031333020323430205120313635203235302000000061028f82015282516102ac93909190611d9e908390868401908d01610e4e565b7f2032333522207374726f6b653d22626c61636b22207374726f6b652d7769647491019283015279341e911991103334b6361e913a3930b739b830b932b73a11179f60311b6102cc8301526102e682018690527f3c7465787420783d223230302220793d223239302220746578742d616e63686f6102ea8301527f723d226d6964646c652220636c6173733d22757365726e616d65222066696c6c61030a8301527f3d22776869746522207374726f6b653d22626c61636b22207374726f6b652d77908201526a34b23a341e9118171a911f60a91b61034a820152815161035592909190611e93908390858401908b01610e4e565b01908101661e17ba32bc3a1f60c91b90520361033c8101845261035c01611eba9084610f41565b604080516000805160206124c5833981519152868201526000805160206124e583398151915291810191909152601f60f91b6060820152651e3232b3399f60d11b6061820152661e39ba3cb6329f60c91b60678201526b40666f6e742d66616365207b60a01b606e8201527f666f6e742d66616d696c793a2022436f6d69632053616e73204d53223b000000607a8201527f7372633a2075726c282268747470733a2f2f666f6e74732e63646e666f6e74736097820152752e636f6d2f6373732f636f6d69632d73616e7322293b60501b60b7820152607d60f81b60cd8201527f2e757365726e616d65207b20666f6e742d66616d696c793a2022436f6d69632060ce8201527f53616e73204d53222c20637572736976653b20666f6e742d73697a653a20313660ee8201527170783b2066696c6c3a2077686974653b207d60701b61010e8201527f2e6d61747269782d63686172207b20666f6e742d66616d696c793a206d6f6e6f6101208201526c039b830b1b29d903334b6361d1609d1b61014082015288519098899861014d92909161205d908290858d01908a01610e4e565b703b206f7061636974793a20302e383b207d60781b908a01928301527f406b65796672616d65732066616465207b203025207b206f7061636974793a2061015e8301527f302e323b207d20333025207b206f7061636974793a20302e393b207d20373025908201527f207b206f7061636974793a20302e393b207d2031303025207b206f706163697461019e8201526a793a20302e323b207d207d60a81b6101be8201527f406b65796672616d65732066616c6c207b2066726f6d207b207472616e73666f6101c98201527f726d3a207472616e736c61746559282d32307078293b207d20746f207b2074726101e98201527f616e73666f726d3a207472616e736c61746559283432307078293b207d207d00610209820152671e17b9ba3cb6329f60c11b610228820152661e17b232b3399f60c91b6102308201527f3c726563742077696474683d2234303022206865696768743d223430302220666102378201527834b6361e913933b1309418161816181618171c1a949110179f60391b6102578201527f3c6720636c6173733d226d61747269782d6261636b67726f756e64223e000000610270820152815161028d9590926122229184918885019101610e4e565b01928301527b1e339031b630b9b99e913637b7b3b4b296b1b7b73a30b4b732b9111f60211b6102918301527f3c656c6c697073652063783d22323030222063793d22323030222072783d22316102ad8301527f3230222072793d22313230222066696c6c3d227267626128302c302c302c302e6102cd830152791a9491103334b63a32b91e9131363ab9141918383c149110179f60311b6102ed83015251610307939091906122d690839086840190610e4e565b019182015261030b8101651e17b9bb339f60d11b9052036102f18101825261031101610ebb9082610f41565b61199860405161231181610f0b565b60048152630233046360e41b602082015295611044565b7f222c22766572696669636174696f6e223a7b226d6574686f64223a226b65636381527530b5991a9b14313cba32b9949116113230ba30911d1160511b602082015260360190565b8051156124b0576040519061238482610eda565b604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f60408301528051600291828201809211611007576003918290046001600160fe1b038116810361100757612406908495941b610fc6565b936020850193829183518401906020820192835194600085525b83811061245f57505050505251068060011461244c57600214612441575090565b603d90600019015390565b50603d9081600019820153600119015390565b87600491999293949901918251600190603f9082828260121c16880101518453828282600c1c16880101518385015382828260061c1688010151888501531685010151898201530197929190612420565b506040516124bd81610f26565b600081529056fe3c7376672077696474683d2234303022206865696768743d223430302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722a264697066735822122054f03b54be25425fc0d0ab61b3f96faf34c4e711f8bc023e96dc123e4ce0384364736f6c63430008110033",
  "devdoc": {
    "details": "Provides SVG generation with matrix style animation and properly formatted LSP4 metadata",
    "kind": "dev",
    "methods": {
      "addressToString(address)": {
        "params": {
          "_addr": "The address to convert"
        },
        "returns": {
          "_0": "string The string representation"
        }
      },
      "bytes32ToString(bytes32)": {
        "params": {
          "_bytes": "The bytes32 to convert"
        },
        "returns": {
          "_0": "string The string representation"
        }
      },
      "createCollectionMetadata()": {
        "returns": {
          "encoded": "Base64 encoded metadata with data URI",
          "raw": "Raw metadata bytes"
        }
      },
      "createTokenMetadata(bytes32,bytes3,uint256,uint256,string,bool,address)": {
        "params": {
          "chubbiness": "Chubbiness value",
          "color": "Color of the Loogie",
          "contractAddress": "Contract address for asset link",
          "isUP": "Whether the owner is a Universal Profile",
          "mouthLength": "Mouth length value",
          "tokenId": "The token ID",
          "username": "Username"
        },
        "returns": {
          "encoded": "Base64 encoded metadata with data URI",
          "raw": "Raw metadata bytes"
        }
      },
      "generateLoogieSVG(bytes3,uint256,uint256,string,bool,bytes32)": {
        "params": {
          "chubbiness": "Chubbiness value",
          "color": "Color of the Loogie",
          "isUP": "Whether the owner is a Universal Profile",
          "matrixSeed": "Seed for the matrix animation",
          "mouthLength": "Mouth length value",
          "username": "Username"
        },
        "returns": {
          "_0": "string The SVG string"
        }
      },
      "generateMatrixRainEffect(bytes32)": {
        "params": {
          "tokenId": "The token ID to use for randomization"
        },
        "returns": {
          "_0": "string The SVG string for matrix effect"
        }
      },
      "toColorHexString(bytes3)": {
        "params": {
          "_color": "The color as bytes3"
        },
        "returns": {
          "_0": "string The hex string of the color"
        }
      },
      "uint2str(uint256)": {
        "params": {
          "_i": "The uint to convert"
        },
        "returns": {
          "_uintAsString": "The string representation"
        }
      }
    },
    "title": "OnChainMetadata",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressToString(address)": {
        "notice": "Convert address to string"
      },
      "bytes32ToString(bytes32)": {
        "notice": "Convert bytes32 to string"
      },
      "createCollectionMetadata()": {
        "notice": "Create collection metadata following LSP4 standard format"
      },
      "createTokenMetadata(bytes32,bytes3,uint256,uint256,string,bool,address)": {
        "notice": "Create token metadata following LSP4 standard format"
      },
      "generateLoogieSVG(bytes3,uint256,uint256,string,bool,bytes32)": {
        "notice": "Generate SVG for a Loogie"
      },
      "generateMatrixRainEffect(bytes32)": {
        "notice": "Generate Matrix rain effect SVG based on tokenId"
      },
      "toColorHexString(bytes3)": {
        "notice": "Converts a bytes3 color to hex string without 0x prefix"
      },
      "uint2str(uint256)": {
        "notice": "Convert uint to string"
      }
    },
    "notice": "Handles on-chain SVG generation and metadata formatting for LSP8Loogies",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}